{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\"],\"mappings\":\"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,EAAAA,EAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,QAAAA,OAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,GAAA,EAAAE,GAAA,iBAAAF,GAAAA,GAAAA,EAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,MAAAA,IACzC,EAAAE,GAAA,iBAAAF,EAAA,IAAA,IAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,GAAAA,EAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,QAIAlC,EAAAA,EAAAmC,EAAA\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"dist/\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 2);\\n\"]}","code":"!function(Q){var B={};function F(U){if(B[U])return B[U].exports;var c=B[U]={i:U,l:!1,exports:{}};return Q[U].call(c.exports,c,c.exports,F),c.l=!0,c.exports}F.m=Q,F.c=B,F.d=function(Q,B,U){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:U})},F.r=function(Q){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(Q,\"__esModule\",{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&\"object\"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(F.r(U),Object.defineProperty(U,\"default\",{enumerable:!0,value:Q}),2&B&&\"string\"!=typeof Q)for(var c in Q)F.d(U,c,function(B){return Q[B]}.bind(null,c));return U},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,\"a\",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p=\"dist/\",F(F.s=2)}([function(module,exports){eval('var g;\\n\\n// This works in non-strict mode\\ng = function () {\\n\\treturn this;\\n}();\\n\\ntry {\\n\\t// This works if eval is allowed (see CSP)\\n\\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\\n} catch (e) {\\n\\t// This works if the window reference is available\\n\\tif (typeof window === \"object\") g = window;\\n}\\n\\n// g can still be undefined, but nothing to do about it...\\n// We return undefined, instead of nothing here, so it\\'s\\n// easier to handle this case. if(!global) { ...}\\n\\nmodule.exports = g;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxDQUFKOztBQUVBO0FBQ0FBLElBQUssWUFBVztBQUNmLFFBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsS0FBSUEsS0FBS0MsU0FBUyxhQUFULEdBQUwsSUFBa0MsQ0FBQyxHQUFHQyxJQUFKLEVBQVUsTUFBVixDQUF0QztBQUNBLENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDWDtBQUNBLEtBQUksT0FBT0MsTUFBUCxLQUFrQixRQUF0QixFQUFnQ0osSUFBSUksTUFBSjtBQUNoQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJOLENBQWpCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///0\\n')},,function(Q,B,F){F(3),Q.exports=F(25)},function(module,exports,__webpack_require__){\"use strict\";eval(\"/* WEBPACK VAR INJECTION */(function(__resourceQuery) {\\n\\n/* global __resourceQuery WorkerGlobalScope self */\\n/* eslint prefer-destructuring: off */\\n\\nvar url = __webpack_require__(4);\\nvar stripAnsi = __webpack_require__(11);\\nvar log = __webpack_require__(13).getLogger('webpack-dev-server');\\nvar socket = __webpack_require__(14);\\nvar overlay = __webpack_require__(16);\\n\\nfunction getCurrentScriptSource() {\\n  // `document.currentScript` is the most accurate way to find the current script,\\n  // but is not supported in all browsers.\\n  if (document.currentScript) {\\n    return document.currentScript.getAttribute('src');\\n  }\\n  // Fall back to getting all scripts in the document.\\n  var scriptElements = document.scripts || [];\\n  var currentScript = scriptElements[scriptElements.length - 1];\\n  if (currentScript) {\\n    return currentScript.getAttribute('src');\\n  }\\n  // Fail as there was no script to use.\\n  throw new Error('[WDS] Failed to get current script source.');\\n}\\n\\nvar urlParts = void 0;\\nvar hotReload = true;\\nif (typeof window !== 'undefined') {\\n  var qs = window.location.search.toLowerCase();\\n  hotReload = qs.indexOf('hotreload=false') === -1;\\n}\\nif (true) {\\n  // If this bundle is inlined, use the resource query to get the correct url.\\n  urlParts = url.parse(__resourceQuery.substr(1));\\n} else { var scriptHost; }\\n\\nif (!urlParts.port || urlParts.port === '0') {\\n  urlParts.port = self.location.port;\\n}\\n\\nvar _hot = false;\\nvar initial = true;\\nvar currentHash = '';\\nvar useWarningOverlay = false;\\nvar useErrorOverlay = false;\\nvar useProgress = false;\\n\\nvar INFO = 'info';\\nvar WARNING = 'warning';\\nvar ERROR = 'error';\\nvar NONE = 'none';\\n\\n// Set the default log level\\nlog.setDefaultLevel(INFO);\\n\\n// Send messages to the outside, so plugins can consume it.\\nfunction sendMsg(type, data) {\\n  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {\\n    self.postMessage({\\n      type: 'webpack' + type,\\n      data: data\\n    }, '*');\\n  }\\n}\\n\\nvar onSocketMsg = {\\n  hot: function hot() {\\n    _hot = true;\\n    log.info('[WDS] Hot Module Replacement enabled.');\\n  },\\n  invalid: function invalid() {\\n    log.info('[WDS] App updated. Recompiling...');\\n    // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\\n    sendMsg('Invalid');\\n  },\\n  hash: function hash(_hash) {\\n    currentHash = _hash;\\n  },\\n\\n  'still-ok': function stillOk() {\\n    log.info('[WDS] Nothing changed.');\\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\\n    sendMsg('StillOk');\\n  },\\n  'log-level': function logLevel(level) {\\n    var hotCtx = __webpack_require__(21);\\n    if (hotCtx.keys().indexOf('./log') !== -1) {\\n      hotCtx('./log').setLogLevel(level);\\n    }\\n    switch (level) {\\n      case INFO:\\n      case ERROR:\\n        log.setLevel(level);\\n        break;\\n      case WARNING:\\n        // loglevel's warning name is different from webpack's\\n        log.setLevel('warn');\\n        break;\\n      case NONE:\\n        log.disableAll();\\n        break;\\n      default:\\n        log.error('[WDS] Unknown clientLogLevel \\\\'' + level + '\\\\'');\\n    }\\n  },\\n  overlay: function overlay(value) {\\n    if (typeof document !== 'undefined') {\\n      if (typeof value === 'boolean') {\\n        useWarningOverlay = false;\\n        useErrorOverlay = value;\\n      } else if (value) {\\n        useWarningOverlay = value.warnings;\\n        useErrorOverlay = value.errors;\\n      }\\n    }\\n  },\\n  progress: function progress(_progress) {\\n    if (typeof document !== 'undefined') {\\n      useProgress = _progress;\\n    }\\n  },\\n\\n  'progress-update': function progressUpdate(data) {\\n    if (useProgress) log.info('[WDS] ' + data.percent + '% - ' + data.msg + '.');\\n    sendMsg('Progress', data);\\n  },\\n  ok: function ok() {\\n    sendMsg('Ok');\\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\\n    reloadApp();\\n  },\\n\\n  'content-changed': function contentChanged() {\\n    log.info('[WDS] Content base changed. Reloading...');\\n    self.location.reload();\\n  },\\n  warnings: function warnings(_warnings) {\\n    log.warn('[WDS] Warnings while compiling.');\\n    var strippedWarnings = _warnings.map(function (warning) {\\n      return stripAnsi(warning);\\n    });\\n    sendMsg('Warnings', strippedWarnings);\\n    for (var i = 0; i < strippedWarnings.length; i++) {\\n      log.warn(strippedWarnings[i]);\\n    }\\n    if (useWarningOverlay) overlay.showMessage(_warnings);\\n\\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\\n    reloadApp();\\n  },\\n  errors: function errors(_errors) {\\n    log.error('[WDS] Errors while compiling. Reload prevented.');\\n    var strippedErrors = _errors.map(function (error) {\\n      return stripAnsi(error);\\n    });\\n    sendMsg('Errors', strippedErrors);\\n    for (var i = 0; i < strippedErrors.length; i++) {\\n      log.error(strippedErrors[i]);\\n    }\\n    if (useErrorOverlay) overlay.showMessage(_errors);\\n    initial = false;\\n  },\\n  error: function error(_error) {\\n    log.error(_error);\\n  },\\n  close: function close() {\\n    log.error('[WDS] Disconnected!');\\n    sendMsg('Close');\\n  }\\n};\\n\\nvar hostname = urlParts.hostname;\\nvar protocol = urlParts.protocol;\\n\\n// check ipv4 and ipv6 `all hostname`\\nif (hostname === '0.0.0.0' || hostname === '::') {\\n  // why do we need this check?\\n  // hostname n/a for file protocol (example, when using electron, ionic)\\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\\n  // eslint-disable-next-line no-bitwise\\n  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {\\n    hostname = self.location.hostname;\\n  }\\n}\\n\\n// `hostname` can be empty when the script path is relative. In that case, specifying\\n// a protocol would result in an invalid URL.\\n// When https is used in the app, secure websockets are always necessary\\n// because the browser doesn't accept non-secure websockets.\\nif (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\\n  protocol = self.location.protocol;\\n}\\n\\nvar socketUrl = url.format({\\n  protocol: protocol,\\n  auth: urlParts.auth,\\n  hostname: hostname,\\n  port: urlParts.port,\\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path\\n});\\n\\nsocket(socketUrl, onSocketMsg);\\n\\nvar isUnloading = false;\\nself.addEventListener('beforeunload', function () {\\n  isUnloading = true;\\n});\\n\\nfunction reloadApp() {\\n  if (isUnloading || !hotReload) {\\n    return;\\n  }\\n  if (_hot) {\\n    log.info('[WDS] App hot update...');\\n    // eslint-disable-next-line global-require\\n    var hotEmitter = __webpack_require__(23);\\n    hotEmitter.emit('webpackHotUpdate', currentHash);\\n    if (typeof self !== 'undefined' && self.window) {\\n      // broadcast update to window\\n      self.postMessage('webpackHotUpdate' + currentHash, '*');\\n    }\\n  } else {\\n    var rootWindow = self;\\n    // use parent window for reload (in case we're in an iframe with no valid src)\\n    var intervalId = self.setInterval(function () {\\n      if (rootWindow.location.protocol !== 'about:') {\\n        // reload immediately if protocol is valid\\n        applyReload(rootWindow, intervalId);\\n      } else {\\n        rootWindow = rootWindow.parent;\\n        if (rootWindow.parent === rootWindow) {\\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\\n          applyReload(rootWindow, intervalId);\\n        }\\n      }\\n    });\\n  }\\n\\n  function applyReload(rootWindow, intervalId) {\\n    clearInterval(intervalId);\\n    log.info('[WDS] App updated. Reloading...');\\n    rootWindow.location.reload();\\n  }\\n}\\n/* WEBPACK VAR INJECTION */}.call(this, \\\"?http://localhost:8081\\\"))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///3\\n\")},function(module,exports,__webpack_require__){\"use strict\";eval(\"// Copyright Joyent, Inc. and other Node contributors.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a\\n// copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to permit\\n// persons to whom the Software is furnished to do so, subject to the\\n// following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n\\n\\nvar punycode = __webpack_require__(5);\\nvar util = __webpack_require__(7);\\n\\nexports.parse = urlParse;\\nexports.resolve = urlResolve;\\nexports.resolveObject = urlResolveObject;\\nexports.format = urlFormat;\\n\\nexports.Url = Url;\\n\\nfunction Url() {\\n  this.protocol = null;\\n  this.slashes = null;\\n  this.auth = null;\\n  this.host = null;\\n  this.port = null;\\n  this.hostname = null;\\n  this.hash = null;\\n  this.search = null;\\n  this.query = null;\\n  this.pathname = null;\\n  this.path = null;\\n  this.href = null;\\n}\\n\\n// Reference: RFC 3986, RFC 1808, RFC 2396\\n\\n// define these here so at least they only have to be\\n// compiled once on the first module load.\\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\\n    portPattern = /:[0-9]*$/,\\n\\n\\n// Special case for a simple path URL\\nsimplePathPattern = /^(\\\\/\\\\/?(?!\\\\/)[^\\\\?\\\\s]*)(\\\\?[^\\\\s]*)?$/,\\n\\n\\n// RFC 2396: characters reserved for delimiting URLs.\\n// We actually just auto-escape these.\\ndelims = ['<', '>', '\\\"', '`', ' ', '\\\\r', '\\\\n', '\\\\t'],\\n\\n\\n// RFC 2396: characters not allowed for various reasons.\\nunwise = ['{', '}', '|', '\\\\\\\\', '^', '`'].concat(delims),\\n\\n\\n// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\\nautoEscape = ['\\\\''].concat(unwise),\\n\\n// Characters that are never ever allowed in a hostname.\\n// Note that any invalid chars are also handled, but these\\n// are the ones that are *expected* to be seen, so we fast-path\\n// them.\\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\\n    hostEndingChars = ['/', '?', '#'],\\n    hostnameMaxLen = 255,\\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\\n\\n// protocols that can allow \\\"unsafe\\\" and \\\"unwise\\\" chars.\\nunsafeProtocol = {\\n  'javascript': true,\\n  'javascript:': true\\n},\\n\\n// protocols that never have a hostname.\\nhostlessProtocol = {\\n  'javascript': true,\\n  'javascript:': true\\n},\\n\\n// protocols that always contain a // bit.\\nslashedProtocol = {\\n  'http': true,\\n  'https': true,\\n  'ftp': true,\\n  'gopher': true,\\n  'file': true,\\n  'http:': true,\\n  'https:': true,\\n  'ftp:': true,\\n  'gopher:': true,\\n  'file:': true\\n},\\n    querystring = __webpack_require__(8);\\n\\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\\n  if (url && util.isObject(url) && url instanceof Url) return url;\\n\\n  var u = new Url();\\n  u.parse(url, parseQueryString, slashesDenoteHost);\\n  return u;\\n}\\n\\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\\n  if (!util.isString(url)) {\\n    throw new TypeError(\\\"Parameter 'url' must be a string, not \\\" + typeof url);\\n  }\\n\\n  // Copy chrome, IE, opera backslash-handling behavior.\\n  // Back slashes before the query string get converted to forward slashes\\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\\n  var queryIndex = url.indexOf('?'),\\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\\n      uSplit = url.split(splitter),\\n      slashRegex = /\\\\\\\\/g;\\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\\n  url = uSplit.join(splitter);\\n\\n  var rest = url;\\n\\n  // trim before proceeding.\\n  // This is to support parse stuff like \\\"  http://foo.com  \\\\n\\\"\\n  rest = rest.trim();\\n\\n  if (!slashesDenoteHost && url.split('#').length === 1) {\\n    // Try fast path regexp\\n    var simplePath = simplePathPattern.exec(rest);\\n    if (simplePath) {\\n      this.path = rest;\\n      this.href = rest;\\n      this.pathname = simplePath[1];\\n      if (simplePath[2]) {\\n        this.search = simplePath[2];\\n        if (parseQueryString) {\\n          this.query = querystring.parse(this.search.substr(1));\\n        } else {\\n          this.query = this.search.substr(1);\\n        }\\n      } else if (parseQueryString) {\\n        this.search = '';\\n        this.query = {};\\n      }\\n      return this;\\n    }\\n  }\\n\\n  var proto = protocolPattern.exec(rest);\\n  if (proto) {\\n    proto = proto[0];\\n    var lowerProto = proto.toLowerCase();\\n    this.protocol = lowerProto;\\n    rest = rest.substr(proto.length);\\n  }\\n\\n  // figure out if it's got a host\\n  // user@server is *always* interpreted as a hostname, and url\\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\\n  // how the browser resolves relative URLs.\\n  if (slashesDenoteHost || proto || rest.match(/^\\\\/\\\\/[^@\\\\/]+@[^@\\\\/]+/)) {\\n    var slashes = rest.substr(0, 2) === '//';\\n    if (slashes && !(proto && hostlessProtocol[proto])) {\\n      rest = rest.substr(2);\\n      this.slashes = true;\\n    }\\n  }\\n\\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\\n\\n    // there's a hostname.\\n    // the first instance of /, ?, ;, or # ends the host.\\n    //\\n    // If there is an @ in the hostname, then non-host chars *are* allowed\\n    // to the left of the last @ sign, unless some host-ending character\\n    // comes *before* the @-sign.\\n    // URLs are obnoxious.\\n    //\\n    // ex:\\n    // http://a@b@c/ => user:a@b host:c\\n    // http://a@b?@c => user:a host:c path:/?@c\\n\\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\\n    // Review our test case against browsers more comprehensively.\\n\\n    // find the first instance of any hostEndingChars\\n    var hostEnd = -1;\\n    for (var i = 0; i < hostEndingChars.length; i++) {\\n      var hec = rest.indexOf(hostEndingChars[i]);\\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\\n    }\\n\\n    // at this point, either we have an explicit point where the\\n    // auth portion cannot go past, or the last @ char is the decider.\\n    var auth, atSign;\\n    if (hostEnd === -1) {\\n      // atSign can be anywhere.\\n      atSign = rest.lastIndexOf('@');\\n    } else {\\n      // atSign must be in auth portion.\\n      // http://a@b/c@d => host:b auth:a path:/c@d\\n      atSign = rest.lastIndexOf('@', hostEnd);\\n    }\\n\\n    // Now we have a portion which is definitely the auth.\\n    // Pull that off.\\n    if (atSign !== -1) {\\n      auth = rest.slice(0, atSign);\\n      rest = rest.slice(atSign + 1);\\n      this.auth = decodeURIComponent(auth);\\n    }\\n\\n    // the host is the remaining to the left of the first non-host char\\n    hostEnd = -1;\\n    for (var i = 0; i < nonHostChars.length; i++) {\\n      var hec = rest.indexOf(nonHostChars[i]);\\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\\n    }\\n    // if we still have not hit it, then the entire thing is a host.\\n    if (hostEnd === -1) hostEnd = rest.length;\\n\\n    this.host = rest.slice(0, hostEnd);\\n    rest = rest.slice(hostEnd);\\n\\n    // pull out port.\\n    this.parseHost();\\n\\n    // we've indicated that there is a hostname,\\n    // so even if it's empty, it has to be present.\\n    this.hostname = this.hostname || '';\\n\\n    // if hostname begins with [ and ends with ]\\n    // assume that it's an IPv6 address.\\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\\n\\n    // validate a little.\\n    if (!ipv6Hostname) {\\n      var hostparts = this.hostname.split(/\\\\./);\\n      for (var i = 0, l = hostparts.length; i < l; i++) {\\n        var part = hostparts[i];\\n        if (!part) continue;\\n        if (!part.match(hostnamePartPattern)) {\\n          var newpart = '';\\n          for (var j = 0, k = part.length; j < k; j++) {\\n            if (part.charCodeAt(j) > 127) {\\n              // we replace non-ASCII char with a temporary placeholder\\n              // we need this to make sure size of hostname is not\\n              // broken by replacing non-ASCII by nothing\\n              newpart += 'x';\\n            } else {\\n              newpart += part[j];\\n            }\\n          }\\n          // we test again with ASCII char only\\n          if (!newpart.match(hostnamePartPattern)) {\\n            var validParts = hostparts.slice(0, i);\\n            var notHost = hostparts.slice(i + 1);\\n            var bit = part.match(hostnamePartStart);\\n            if (bit) {\\n              validParts.push(bit[1]);\\n              notHost.unshift(bit[2]);\\n            }\\n            if (notHost.length) {\\n              rest = '/' + notHost.join('.') + rest;\\n            }\\n            this.hostname = validParts.join('.');\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    if (this.hostname.length > hostnameMaxLen) {\\n      this.hostname = '';\\n    } else {\\n      // hostnames are always lower case.\\n      this.hostname = this.hostname.toLowerCase();\\n    }\\n\\n    if (!ipv6Hostname) {\\n      // IDNA Support: Returns a punycoded representation of \\\"domain\\\".\\n      // It only converts parts of the domain name that\\n      // have non-ASCII characters, i.e. it doesn't matter if\\n      // you call it with a domain that already is ASCII-only.\\n      this.hostname = punycode.toASCII(this.hostname);\\n    }\\n\\n    var p = this.port ? ':' + this.port : '';\\n    var h = this.hostname || '';\\n    this.host = h + p;\\n    this.href += this.host;\\n\\n    // strip [ and ] from the hostname\\n    // the host field still retains them, though\\n    if (ipv6Hostname) {\\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\\n      if (rest[0] !== '/') {\\n        rest = '/' + rest;\\n      }\\n    }\\n  }\\n\\n  // now rest is set to the post-host stuff.\\n  // chop off any delim chars.\\n  if (!unsafeProtocol[lowerProto]) {\\n\\n    // First, make 100% sure that any \\\"autoEscape\\\" chars get\\n    // escaped, even if encodeURIComponent doesn't think they\\n    // need to be.\\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\\n      var ae = autoEscape[i];\\n      if (rest.indexOf(ae) === -1) continue;\\n      var esc = encodeURIComponent(ae);\\n      if (esc === ae) {\\n        esc = escape(ae);\\n      }\\n      rest = rest.split(ae).join(esc);\\n    }\\n  }\\n\\n  // chop off from the tail first.\\n  var hash = rest.indexOf('#');\\n  if (hash !== -1) {\\n    // got a fragment string.\\n    this.hash = rest.substr(hash);\\n    rest = rest.slice(0, hash);\\n  }\\n  var qm = rest.indexOf('?');\\n  if (qm !== -1) {\\n    this.search = rest.substr(qm);\\n    this.query = rest.substr(qm + 1);\\n    if (parseQueryString) {\\n      this.query = querystring.parse(this.query);\\n    }\\n    rest = rest.slice(0, qm);\\n  } else if (parseQueryString) {\\n    // no query string, but parseQueryString still requested\\n    this.search = '';\\n    this.query = {};\\n  }\\n  if (rest) this.pathname = rest;\\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\\n    this.pathname = '/';\\n  }\\n\\n  //to support http.request\\n  if (this.pathname || this.search) {\\n    var p = this.pathname || '';\\n    var s = this.search || '';\\n    this.path = p + s;\\n  }\\n\\n  // finally, reconstruct the href based on what has been validated.\\n  this.href = this.format();\\n  return this;\\n};\\n\\n// format a parsed object into a url string\\nfunction urlFormat(obj) {\\n  // ensure it's an object, and not a string url.\\n  // If it's an obj, this is a no-op.\\n  // this way, you can call url_format() on strings\\n  // to clean up potentially wonky urls.\\n  if (util.isString(obj)) obj = urlParse(obj);\\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\\n  return obj.format();\\n}\\n\\nUrl.prototype.format = function () {\\n  var auth = this.auth || '';\\n  if (auth) {\\n    auth = encodeURIComponent(auth);\\n    auth = auth.replace(/%3A/i, ':');\\n    auth += '@';\\n  }\\n\\n  var protocol = this.protocol || '',\\n      pathname = this.pathname || '',\\n      hash = this.hash || '',\\n      host = false,\\n      query = '';\\n\\n  if (this.host) {\\n    host = auth + this.host;\\n  } else if (this.hostname) {\\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\\n    if (this.port) {\\n      host += ':' + this.port;\\n    }\\n  }\\n\\n  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {\\n    query = querystring.stringify(this.query);\\n  }\\n\\n  var search = this.search || query && '?' + query || '';\\n\\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\\n\\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\\n  // unless they had them to begin with.\\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\\n    host = '//' + (host || '');\\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\\n  } else if (!host) {\\n    host = '';\\n  }\\n\\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\\n  if (search && search.charAt(0) !== '?') search = '?' + search;\\n\\n  pathname = pathname.replace(/[?#]/g, function (match) {\\n    return encodeURIComponent(match);\\n  });\\n  search = search.replace('#', '%23');\\n\\n  return protocol + host + pathname + search + hash;\\n};\\n\\nfunction urlResolve(source, relative) {\\n  return urlParse(source, false, true).resolve(relative);\\n}\\n\\nUrl.prototype.resolve = function (relative) {\\n  return this.resolveObject(urlParse(relative, false, true)).format();\\n};\\n\\nfunction urlResolveObject(source, relative) {\\n  if (!source) return relative;\\n  return urlParse(source, false, true).resolveObject(relative);\\n}\\n\\nUrl.prototype.resolveObject = function (relative) {\\n  if (util.isString(relative)) {\\n    var rel = new Url();\\n    rel.parse(relative, false, true);\\n    relative = rel;\\n  }\\n\\n  var result = new Url();\\n  var tkeys = Object.keys(this);\\n  for (var tk = 0; tk < tkeys.length; tk++) {\\n    var tkey = tkeys[tk];\\n    result[tkey] = this[tkey];\\n  }\\n\\n  // hash is always overridden, no matter what.\\n  // even href=\\\"\\\" will remove it.\\n  result.hash = relative.hash;\\n\\n  // if the relative url is empty, then there's nothing left to do here.\\n  if (relative.href === '') {\\n    result.href = result.format();\\n    return result;\\n  }\\n\\n  // hrefs like //foo/bar always cut to the protocol.\\n  if (relative.slashes && !relative.protocol) {\\n    // take everything except the protocol from relative\\n    var rkeys = Object.keys(relative);\\n    for (var rk = 0; rk < rkeys.length; rk++) {\\n      var rkey = rkeys[rk];\\n      if (rkey !== 'protocol') result[rkey] = relative[rkey];\\n    }\\n\\n    //urlParse appends trailing / to urls like http://www.example.com\\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\\n      result.path = result.pathname = '/';\\n    }\\n\\n    result.href = result.format();\\n    return result;\\n  }\\n\\n  if (relative.protocol && relative.protocol !== result.protocol) {\\n    // if it's a known url protocol, then changing\\n    // the protocol does weird things\\n    // first, if it's not file:, then we MUST have a host,\\n    // and if there was a path\\n    // to begin with, then we MUST have a path.\\n    // if it is file:, then the host is dropped,\\n    // because that's known to be hostless.\\n    // anything else is assumed to be absolute.\\n    if (!slashedProtocol[relative.protocol]) {\\n      var keys = Object.keys(relative);\\n      for (var v = 0; v < keys.length; v++) {\\n        var k = keys[v];\\n        result[k] = relative[k];\\n      }\\n      result.href = result.format();\\n      return result;\\n    }\\n\\n    result.protocol = relative.protocol;\\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\\n      var relPath = (relative.pathname || '').split('/');\\n      while (relPath.length && !(relative.host = relPath.shift()));\\n      if (!relative.host) relative.host = '';\\n      if (!relative.hostname) relative.hostname = '';\\n      if (relPath[0] !== '') relPath.unshift('');\\n      if (relPath.length < 2) relPath.unshift('');\\n      result.pathname = relPath.join('/');\\n    } else {\\n      result.pathname = relative.pathname;\\n    }\\n    result.search = relative.search;\\n    result.query = relative.query;\\n    result.host = relative.host || '';\\n    result.auth = relative.auth;\\n    result.hostname = relative.hostname || relative.host;\\n    result.port = relative.port;\\n    // to support http.request\\n    if (result.pathname || result.search) {\\n      var p = result.pathname || '';\\n      var s = result.search || '';\\n      result.path = p + s;\\n    }\\n    result.slashes = result.slashes || relative.slashes;\\n    result.href = result.format();\\n    return result;\\n  }\\n\\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\\n      removeAllDots = mustEndAbs,\\n      srcPath = result.pathname && result.pathname.split('/') || [],\\n      relPath = relative.pathname && relative.pathname.split('/') || [],\\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\\n\\n  // if the url is a non-slashed url, then relative\\n  // links like ../.. should be able\\n  // to crawl up to the hostname, as well.  This is strange.\\n  // result.protocol has already been set by now.\\n  // Later on, put the first path part into the host field.\\n  if (psychotic) {\\n    result.hostname = '';\\n    result.port = null;\\n    if (result.host) {\\n      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\\n    }\\n    result.host = '';\\n    if (relative.protocol) {\\n      relative.hostname = null;\\n      relative.port = null;\\n      if (relative.host) {\\n        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\\n      }\\n      relative.host = null;\\n    }\\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\\n  }\\n\\n  if (isRelAbs) {\\n    // it's absolute.\\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\\n    result.search = relative.search;\\n    result.query = relative.query;\\n    srcPath = relPath;\\n    // fall through to the dot-handling below.\\n  } else if (relPath.length) {\\n    // it's relative\\n    // throw away the existing file, and take the new path instead.\\n    if (!srcPath) srcPath = [];\\n    srcPath.pop();\\n    srcPath = srcPath.concat(relPath);\\n    result.search = relative.search;\\n    result.query = relative.query;\\n  } else if (!util.isNullOrUndefined(relative.search)) {\\n    // just pull out the search.\\n    // like href='?foo'.\\n    // Put this after the other two cases because it simplifies the booleans\\n    if (psychotic) {\\n      result.hostname = result.host = srcPath.shift();\\n      //occationaly the auth can get stuck only in host\\n      //this especially happens in cases like\\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\\n      if (authInHost) {\\n        result.auth = authInHost.shift();\\n        result.host = result.hostname = authInHost.shift();\\n      }\\n    }\\n    result.search = relative.search;\\n    result.query = relative.query;\\n    //to support http.request\\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\\n    }\\n    result.href = result.format();\\n    return result;\\n  }\\n\\n  if (!srcPath.length) {\\n    // no path at all.  easy.\\n    // we've already handled the other stuff above.\\n    result.pathname = null;\\n    //to support http.request\\n    if (result.search) {\\n      result.path = '/' + result.search;\\n    } else {\\n      result.path = null;\\n    }\\n    result.href = result.format();\\n    return result;\\n  }\\n\\n  // if a url ENDs in . or .., then it must get a trailing slash.\\n  // however, if it ends in anything else non-slashy,\\n  // then it must NOT get a trailing slash.\\n  var last = srcPath.slice(-1)[0];\\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\\n\\n  // strip single dots, resolve double dots to parent dir\\n  // if the path tries to go above the root, `up` ends up > 0\\n  var up = 0;\\n  for (var i = srcPath.length; i >= 0; i--) {\\n    last = srcPath[i];\\n    if (last === '.') {\\n      srcPath.splice(i, 1);\\n    } else if (last === '..') {\\n      srcPath.splice(i, 1);\\n      up++;\\n    } else if (up) {\\n      srcPath.splice(i, 1);\\n      up--;\\n    }\\n  }\\n\\n  // if the path is allowed to go above the root, restore leading ..s\\n  if (!mustEndAbs && !removeAllDots) {\\n    for (; up--; up) {\\n      srcPath.unshift('..');\\n    }\\n  }\\n\\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\\n    srcPath.unshift('');\\n  }\\n\\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\\n    srcPath.push('');\\n  }\\n\\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';\\n\\n  // put the host back\\n  if (psychotic) {\\n    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\\n    //occationaly the auth can get stuck only in host\\n    //this especially happens in cases like\\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\\n    if (authInHost) {\\n      result.auth = authInHost.shift();\\n      result.host = result.hostname = authInHost.shift();\\n    }\\n  }\\n\\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\\n\\n  if (mustEndAbs && !isAbsolute) {\\n    srcPath.unshift('');\\n  }\\n\\n  if (!srcPath.length) {\\n    result.pathname = null;\\n    result.path = null;\\n  } else {\\n    result.pathname = srcPath.join('/');\\n  }\\n\\n  //to support request.http\\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\\n  }\\n  result.auth = relative.auth || result.auth;\\n  result.slashes = result.slashes || relative.slashes;\\n  result.href = result.format();\\n  return result;\\n};\\n\\nUrl.prototype.parseHost = function () {\\n  var host = this.host;\\n  var port = portPattern.exec(host);\\n  if (port) {\\n    port = port[0];\\n    if (port !== ':') {\\n      this.port = port.substr(1);\\n    }\\n    host = host.substr(0, host.length - port.length);\\n  }\\n  if (host) this.hostname = host;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///4\\n\")},function(module,exports){eval(\"throw new Error(\\\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\\\nError: ENOENT: no such file or directory, open 'C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\node-libs-browser\\\\\\\\node_modules\\\\\\\\punycode\\\\\\\\package.json'\\\\n    at Object.fs.openSync (fs.js:646:18)\\\\n    at Object.fs.readFileSync (fs.js:551:33)\\\\n    at ConfigChainBuilder.addConfig (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:146:32)\\\\n    at ConfigChainBuilder.findConfigs (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:102:30)\\\\n    at buildConfigChain (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:61:13)\\\\n    at OptionManager.init (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\option-manager.js:354:58)\\\\n    at File.initOptions (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\index.js:212:65)\\\\n    at new File (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\index.js:135:24)\\\\n    at Pipeline.transform (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\pipeline.js:46:16)\\\\n    at transpile (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-loader\\\\\\\\lib\\\\\\\\index.js:50:20)\\\\n    at Object.module.exports (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-loader\\\\\\\\lib\\\\\\\\index.js:173:20)\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI1LmpzIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///5\\n\")},,function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nmodule.exports = {\\n  isString: function (arg) {\\n    return typeof arg === 'string';\\n  },\\n  isObject: function (arg) {\\n    return typeof arg === 'object' && arg !== null;\\n  },\\n  isNull: function (arg) {\\n    return arg === null;\\n  },\\n  isNullOrUndefined: function (arg) {\\n    return arg == null;\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanM/MzVlOCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNTdHJpbmciLCJhcmciLCJpc09iamVjdCIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmQyxZQUFVLFVBQVNDLEdBQVQsRUFBYztBQUN0QixXQUFPLE9BQU9BLEdBQVAsS0FBZ0IsUUFBdkI7QUFDRCxHQUhjO0FBSWZDLFlBQVUsVUFBU0QsR0FBVCxFQUFjO0FBQ3RCLFdBQU8sT0FBT0EsR0FBUCxLQUFnQixRQUFoQixJQUE0QkEsUUFBUSxJQUEzQztBQUNELEdBTmM7QUFPZkUsVUFBUSxVQUFTRixHQUFULEVBQWM7QUFDcEIsV0FBT0EsUUFBUSxJQUFmO0FBQ0QsR0FUYztBQVVmRyxxQkFBbUIsVUFBU0gsR0FBVCxFQUFjO0FBQy9CLFdBQU9BLE9BQU8sSUFBZDtBQUNEO0FBWmMsQ0FBakIiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcclxuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XHJcbiAgfSxcclxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcclxuICB9LFxyXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XHJcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xyXG4gIH0sXHJcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xyXG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xyXG4gIH1cclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///7\\n\")},function(module,exports){eval(\"throw new Error(\\\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\\\nError: ENOENT: no such file or directory, open 'C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\querystring-es3\\\\\\\\index.js'\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI4LmpzIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///8\\n\")},,,function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nvar ansiRegex = __webpack_require__(12)();\\n\\nmodule.exports = function (str) {\\n\\treturn typeof str === 'string' ? str.replace(ansiRegex, '') : str;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanM/OTc1MSJdLCJuYW1lcyI6WyJhbnNpUmVnZXgiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0ciIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLEVBQVIsR0FBaEI7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlO0FBQy9CLFFBQU8sT0FBT0EsR0FBUCxLQUFlLFFBQWYsR0FBMEJBLElBQUlDLE9BQUosQ0FBWUwsU0FBWixFQUF1QixFQUF2QixDQUExQixHQUF1REksR0FBOUQ7QUFDQSxDQUZEIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5zaVJlZ2V4ID0gcmVxdWlyZSgnYW5zaS1yZWdleCcpKCk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIucmVwbGFjZShhbnNpUmVnZXgsICcnKSA6IHN0cjtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///11\\n\")},function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nmodule.exports = function () {\\n\\treturn (/[\\\\u001b\\\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g\\n\\t);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanM/MzQ5NCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsT0FBT0MsT0FBUCxHQUFpQixZQUFZO0FBQzVCLFFBQU87QUFBUDtBQUNBLENBRkQiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xyXG5cdHJldHVybiAvW1xcdTAwMWJcXHUwMDliXVtbKCkjOz9dKig/OlswLTldezEsNH0oPzo7WzAtOV17MCw0fSkqKT9bMC05QS1QUlpjZi1ucXJ5PT48XS9nO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///12\\n\")},function(module,exports){eval(\"throw new Error(\\\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\\\nError: ENOENT: no such file or directory, open 'C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\loglevel\\\\\\\\package.json'\\\\n    at Object.fs.openSync (fs.js:646:18)\\\\n    at Object.fs.readFileSync (fs.js:551:33)\\\\n    at ConfigChainBuilder.addConfig (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:146:32)\\\\n    at ConfigChainBuilder.findConfigs (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:102:30)\\\\n    at buildConfigChain (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:61:13)\\\\n    at OptionManager.init (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\option-manager.js:354:58)\\\\n    at File.initOptions (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\index.js:212:65)\\\\n    at new File (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\index.js:135:24)\\\\n    at Pipeline.transform (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\pipeline.js:46:16)\\\\n    at transpile (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-loader\\\\\\\\lib\\\\\\\\index.js:50:20)\\\\n    at Object.module.exports (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-loader\\\\\\\\lib\\\\\\\\index.js:173:20)\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///13\\n\")},function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nvar SockJS = __webpack_require__(15);\\n\\nvar retries = 0;\\nvar sock = null;\\n\\nvar socket = function initSocket(url, handlers) {\\n  sock = new SockJS(url);\\n\\n  sock.onopen = function onopen() {\\n    retries = 0;\\n  };\\n\\n  sock.onclose = function onclose() {\\n    if (retries === 0) {\\n      handlers.close();\\n    }\\n\\n    // Try to reconnect.\\n    sock = null;\\n\\n    // After 10 retries stop trying, to prevent logspam.\\n    if (retries <= 10) {\\n      // Exponentially increase timeout to reconnect.\\n      // Respectfully copied from the package `got`.\\n      // eslint-disable-next-line no-mixed-operators, no-restricted-properties\\n      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\\n      retries += 1;\\n\\n      setTimeout(function () {\\n        socket(url, handlers);\\n      }, retryInMs);\\n    }\\n  };\\n\\n  sock.onmessage = function onmessage(e) {\\n    // This assumes that all data sent via the websocket is JSON.\\n    var msg = JSON.parse(e.data);\\n    if (handlers[msg.type]) {\\n      handlers[msg.type](msg.data);\\n    }\\n  };\\n};\\n\\nmodule.exports = socket;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3NvY2tldC5qcz9lMjljIl0sIm5hbWVzIjpbIlNvY2tKUyIsInJlcXVpcmUiLCJyZXRyaWVzIiwic29jayIsInNvY2tldCIsImluaXRTb2NrZXQiLCJ1cmwiLCJoYW5kbGVycyIsIm9ub3BlbiIsIm9uY2xvc2UiLCJjbG9zZSIsInJldHJ5SW5NcyIsIk1hdGgiLCJwb3ciLCJyYW5kb20iLCJzZXRUaW1lb3V0Iiwib25tZXNzYWdlIiwiZSIsIm1zZyIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUMsRUFBUixDQUFiOztBQUVBLElBQUlDLFVBQVUsQ0FBZDtBQUNBLElBQUlDLE9BQU8sSUFBWDs7QUFFQSxJQUFJQyxTQUFTLFNBQVNDLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCQyxRQUF6QixFQUFtQztBQUM5Q0osU0FBTyxJQUFJSCxNQUFKLENBQVdNLEdBQVgsQ0FBUDs7QUFFQUgsT0FBS0ssTUFBTCxHQUFjLFNBQVNBLE1BQVQsR0FBa0I7QUFDOUJOLGNBQVUsQ0FBVjtBQUNELEdBRkQ7O0FBSUFDLE9BQUtNLE9BQUwsR0FBZSxTQUFTQSxPQUFULEdBQW1CO0FBQ2hDLFFBQUlQLFlBQVksQ0FBaEIsRUFBbUI7QUFDakJLLGVBQVNHLEtBQVQ7QUFDRDs7QUFFRDtBQUNBUCxXQUFPLElBQVA7O0FBRUE7QUFDQSxRQUFJRCxXQUFXLEVBQWYsRUFBbUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsVUFBSVMsWUFBWSxPQUFPQyxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZWCxPQUFaLENBQVAsR0FBOEJVLEtBQUtFLE1BQUwsS0FBZ0IsR0FBOUQ7QUFDQVosaUJBQVcsQ0FBWDs7QUFFQWEsaUJBQVcsWUFBWTtBQUNyQlgsZUFBT0UsR0FBUCxFQUFZQyxRQUFaO0FBQ0QsT0FGRCxFQUVHSSxTQUZIO0FBR0Q7QUFDRixHQXBCRDs7QUFzQkFSLE9BQUthLFNBQUwsR0FBaUIsU0FBU0EsU0FBVCxDQUFtQkMsQ0FBbkIsRUFBc0I7QUFDckM7QUFDQSxRQUFJQyxNQUFNQyxLQUFLQyxLQUFMLENBQVdILEVBQUVJLElBQWIsQ0FBVjtBQUNBLFFBQUlkLFNBQVNXLElBQUlJLElBQWIsQ0FBSixFQUF3QjtBQUN0QmYsZUFBU1csSUFBSUksSUFBYixFQUFtQkosSUFBSUcsSUFBdkI7QUFDRDtBQUNGLEdBTkQ7QUFPRCxDQXBDRDs7QUFzQ0FFLE9BQU9DLE9BQVAsR0FBaUJwQixNQUFqQiIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBTb2NrSlMgPSByZXF1aXJlKCdzb2NranMtY2xpZW50L2Rpc3Qvc29ja2pzJyk7XHJcblxyXG52YXIgcmV0cmllcyA9IDA7XHJcbnZhciBzb2NrID0gbnVsbDtcclxuXHJcbnZhciBzb2NrZXQgPSBmdW5jdGlvbiBpbml0U29ja2V0KHVybCwgaGFuZGxlcnMpIHtcclxuICBzb2NrID0gbmV3IFNvY2tKUyh1cmwpO1xyXG5cclxuICBzb2NrLm9ub3BlbiA9IGZ1bmN0aW9uIG9ub3BlbigpIHtcclxuICAgIHJldHJpZXMgPSAwO1xyXG4gIH07XHJcblxyXG4gIHNvY2sub25jbG9zZSA9IGZ1bmN0aW9uIG9uY2xvc2UoKSB7XHJcbiAgICBpZiAocmV0cmllcyA9PT0gMCkge1xyXG4gICAgICBoYW5kbGVycy5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRyeSB0byByZWNvbm5lY3QuXHJcbiAgICBzb2NrID0gbnVsbDtcclxuXHJcbiAgICAvLyBBZnRlciAxMCByZXRyaWVzIHN0b3AgdHJ5aW5nLCB0byBwcmV2ZW50IGxvZ3NwYW0uXHJcbiAgICBpZiAocmV0cmllcyA8PSAxMCkge1xyXG4gICAgICAvLyBFeHBvbmVudGlhbGx5IGluY3JlYXNlIHRpbWVvdXQgdG8gcmVjb25uZWN0LlxyXG4gICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuXHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1taXhlZC1vcGVyYXRvcnMsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xyXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcclxuICAgICAgcmV0cmllcyArPSAxO1xyXG5cclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc29ja2V0KHVybCwgaGFuZGxlcnMpO1xyXG4gICAgICB9LCByZXRyeUluTXMpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNvY2sub25tZXNzYWdlID0gZnVuY3Rpb24gb25tZXNzYWdlKGUpIHtcclxuICAgIC8vIFRoaXMgYXNzdW1lcyB0aGF0IGFsbCBkYXRhIHNlbnQgdmlhIHRoZSB3ZWJzb2NrZXQgaXMgSlNPTi5cclxuICAgIHZhciBtc2cgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcbiAgICBpZiAoaGFuZGxlcnNbbXNnLnR5cGVdKSB7XHJcbiAgICAgIGhhbmRsZXJzW21zZy50eXBlXShtc2cuZGF0YSk7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gc29ja2V0OyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///14\\n\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.1.5 | http://sockjs.org | MIT license */\\n(function (f) {\\n  if (true) {\\n    module.exports = f();\\n  } else { var g; }\\n})(function () {\\n  var define, module, exports;return function () {\\n    function r(e, n, t) {\\n      function o(i, f) {\\n        if (!n[i]) {\\n          if (!e[i]) {\\n            var c = \\\"function\\\" == typeof require && require;if (!f && c) return require(i, !0);if (u) return u(i, !0);var a = new Error(\\\"Cannot find module '\\\" + i + \\\"'\\\");throw a.code = \\\"MODULE_NOT_FOUND\\\", a;\\n          }var p = n[i] = { exports: {} };e[i][0].call(p.exports, function (r) {\\n            var n = e[i][1][r];return o(n || r);\\n          }, p, p.exports, r, e, n, t);\\n        }return n[i].exports;\\n      }for (var u = \\\"function\\\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);return o;\\n    }return r;\\n  }()({ 1: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        var transportList = require('./transport-list');\\n\\n        module.exports = require('./main')(transportList);\\n\\n        // TODO can't get rid of this until all servers do\\n        if ('_sockjs_onload' in global) {\\n          setTimeout(global._sockjs_onload, 1);\\n        }\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"./main\\\": 14, \\\"./transport-list\\\": 16 }], 2: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          Event = require('./event');\\n\\n      function CloseEvent() {\\n        Event.call(this);\\n        this.initEvent('close', false, false);\\n        this.wasClean = false;\\n        this.code = 0;\\n        this.reason = '';\\n      }\\n\\n      inherits(CloseEvent, Event);\\n\\n      module.exports = CloseEvent;\\n    }, { \\\"./event\\\": 4, \\\"inherits\\\": 56 }], 3: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          EventTarget = require('./eventtarget');\\n\\n      function EventEmitter() {\\n        EventTarget.call(this);\\n      }\\n\\n      inherits(EventEmitter, EventTarget);\\n\\n      EventEmitter.prototype.removeAllListeners = function (type) {\\n        if (type) {\\n          delete this._listeners[type];\\n        } else {\\n          this._listeners = {};\\n        }\\n      };\\n\\n      EventEmitter.prototype.once = function (type, listener) {\\n        var self = this,\\n            fired = false;\\n\\n        function g() {\\n          self.removeListener(type, g);\\n\\n          if (!fired) {\\n            fired = true;\\n            listener.apply(this, arguments);\\n          }\\n        }\\n\\n        this.on(type, g);\\n      };\\n\\n      EventEmitter.prototype.emit = function () {\\n        var type = arguments[0];\\n        var listeners = this._listeners[type];\\n        if (!listeners) {\\n          return;\\n        }\\n        // equivalent of Array.prototype.slice.call(arguments, 1);\\n        var l = arguments.length;\\n        var args = new Array(l - 1);\\n        for (var ai = 1; ai < l; ai++) {\\n          args[ai - 1] = arguments[ai];\\n        }\\n        for (var i = 0; i < listeners.length; i++) {\\n          listeners[i].apply(this, args);\\n        }\\n      };\\n\\n      EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;\\n      EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;\\n\\n      module.exports.EventEmitter = EventEmitter;\\n    }, { \\\"./eventtarget\\\": 5, \\\"inherits\\\": 56 }], 4: [function (require, module, exports) {\\n      'use strict';\\n\\n      function Event(eventType) {\\n        this.type = eventType;\\n      }\\n\\n      Event.prototype.initEvent = function (eventType, canBubble, cancelable) {\\n        this.type = eventType;\\n        this.bubbles = canBubble;\\n        this.cancelable = cancelable;\\n        this.timeStamp = +new Date();\\n        return this;\\n      };\\n\\n      Event.prototype.stopPropagation = function () {};\\n      Event.prototype.preventDefault = function () {};\\n\\n      Event.CAPTURING_PHASE = 1;\\n      Event.AT_TARGET = 2;\\n      Event.BUBBLING_PHASE = 3;\\n\\n      module.exports = Event;\\n    }, {}], 5: [function (require, module, exports) {\\n      'use strict';\\n\\n      /* Simplified implementation of DOM2 EventTarget.\\r\\n       *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget\\r\\n       */\\n\\n      function EventTarget() {\\n        this._listeners = {};\\n      }\\n\\n      EventTarget.prototype.addEventListener = function (eventType, listener) {\\n        if (!(eventType in this._listeners)) {\\n          this._listeners[eventType] = [];\\n        }\\n        var arr = this._listeners[eventType];\\n        // #4\\n        if (arr.indexOf(listener) === -1) {\\n          // Make a copy so as not to interfere with a current dispatchEvent.\\n          arr = arr.concat([listener]);\\n        }\\n        this._listeners[eventType] = arr;\\n      };\\n\\n      EventTarget.prototype.removeEventListener = function (eventType, listener) {\\n        var arr = this._listeners[eventType];\\n        if (!arr) {\\n          return;\\n        }\\n        var idx = arr.indexOf(listener);\\n        if (idx !== -1) {\\n          if (arr.length > 1) {\\n            // Make a copy so as not to interfere with a current dispatchEvent.\\n            this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));\\n          } else {\\n            delete this._listeners[eventType];\\n          }\\n          return;\\n        }\\n      };\\n\\n      EventTarget.prototype.dispatchEvent = function () {\\n        var event = arguments[0];\\n        var t = event.type;\\n        // equivalent of Array.prototype.slice.call(arguments, 0);\\n        var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);\\n        // TODO: This doesn't match the real behavior; per spec, onfoo get\\n        // their place in line from the /first/ time they're set from\\n        // non-null. Although WebKit bumps it to the end every time it's\\n        // set.\\n        if (this['on' + t]) {\\n          this['on' + t].apply(this, args);\\n        }\\n        if (t in this._listeners) {\\n          // Grab a reference to the listeners list. removeEventListener may alter the list.\\n          var listeners = this._listeners[t];\\n          for (var i = 0; i < listeners.length; i++) {\\n            listeners[i].apply(this, args);\\n          }\\n        }\\n      };\\n\\n      module.exports = EventTarget;\\n    }, {}], 6: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          Event = require('./event');\\n\\n      function TransportMessageEvent(data) {\\n        Event.call(this);\\n        this.initEvent('message', false, false);\\n        this.data = data;\\n      }\\n\\n      inherits(TransportMessageEvent, Event);\\n\\n      module.exports = TransportMessageEvent;\\n    }, { \\\"./event\\\": 4, \\\"inherits\\\": 56 }], 7: [function (require, module, exports) {\\n      'use strict';\\n\\n      var JSON3 = require('json3'),\\n          iframeUtils = require('./utils/iframe');\\n\\n      function FacadeJS(transport) {\\n        this._transport = transport;\\n        transport.on('message', this._transportMessage.bind(this));\\n        transport.on('close', this._transportClose.bind(this));\\n      }\\n\\n      FacadeJS.prototype._transportClose = function (code, reason) {\\n        iframeUtils.postMessage('c', JSON3.stringify([code, reason]));\\n      };\\n      FacadeJS.prototype._transportMessage = function (frame) {\\n        iframeUtils.postMessage('t', frame);\\n      };\\n      FacadeJS.prototype._send = function (data) {\\n        this._transport.send(data);\\n      };\\n      FacadeJS.prototype._close = function () {\\n        this._transport.close();\\n        this._transport.removeAllListeners();\\n      };\\n\\n      module.exports = FacadeJS;\\n    }, { \\\"./utils/iframe\\\": 47, \\\"json3\\\": 57 }], 8: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var urlUtils = require('./utils/url'),\\n            eventUtils = require('./utils/event'),\\n            JSON3 = require('json3'),\\n            FacadeJS = require('./facade'),\\n            InfoIframeReceiver = require('./info-iframe-receiver'),\\n            iframeUtils = require('./utils/iframe'),\\n            loc = require('./location');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:iframe-bootstrap');\\n        }\\n\\n        module.exports = function (SockJS, availableTransports) {\\n          var transportMap = {};\\n          availableTransports.forEach(function (at) {\\n            if (at.facadeTransport) {\\n              transportMap[at.facadeTransport.transportName] = at.facadeTransport;\\n            }\\n          });\\n\\n          // hard-coded for the info iframe\\n          // TODO see if we can make this more dynamic\\n          transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;\\n          var parentOrigin;\\n\\n          /* eslint-disable camelcase */\\n          SockJS.bootstrap_iframe = function () {\\n            /* eslint-enable camelcase */\\n            var facade;\\n            iframeUtils.currentWindowId = loc.hash.slice(1);\\n            var onMessage = function (e) {\\n              if (e.source !== parent) {\\n                return;\\n              }\\n              if (typeof parentOrigin === 'undefined') {\\n                parentOrigin = e.origin;\\n              }\\n              if (e.origin !== parentOrigin) {\\n                return;\\n              }\\n\\n              var iframeMessage;\\n              try {\\n                iframeMessage = JSON3.parse(e.data);\\n              } catch (ignored) {\\n                debug('bad json', e.data);\\n                return;\\n              }\\n\\n              if (iframeMessage.windowId !== iframeUtils.currentWindowId) {\\n                return;\\n              }\\n              switch (iframeMessage.type) {\\n                case 's':\\n                  var p;\\n                  try {\\n                    p = JSON3.parse(iframeMessage.data);\\n                  } catch (ignored) {\\n                    debug('bad json', iframeMessage.data);\\n                    break;\\n                  }\\n                  var version = p[0];\\n                  var transport = p[1];\\n                  var transUrl = p[2];\\n                  var baseUrl = p[3];\\n                  debug(version, transport, transUrl, baseUrl);\\n                  // change this to semver logic\\n                  if (version !== SockJS.version) {\\n                    throw new Error('Incompatible SockJS! Main site uses:' + ' \\\"' + version + '\\\", the iframe:' + ' \\\"' + SockJS.version + '\\\".');\\n                  }\\n\\n                  if (!urlUtils.isOriginEqual(transUrl, loc.href) || !urlUtils.isOriginEqual(baseUrl, loc.href)) {\\n                    throw new Error('Can\\\\'t connect to different domain from within an ' + 'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');\\n                  }\\n                  facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));\\n                  break;\\n                case 'm':\\n                  facade._send(iframeMessage.data);\\n                  break;\\n                case 'c':\\n                  if (facade) {\\n                    facade._close();\\n                  }\\n                  facade = null;\\n                  break;\\n              }\\n            };\\n\\n            eventUtils.attachEvent('message', onMessage);\\n\\n            // Start\\n            iframeUtils.postMessage('s');\\n          };\\n        };\\n      }).call(this, { env: {} });\\n    }, { \\\"./facade\\\": 7, \\\"./info-iframe-receiver\\\": 10, \\\"./location\\\": 13, \\\"./utils/event\\\": 46, \\\"./utils/iframe\\\": 47, \\\"./utils/url\\\": 52, \\\"debug\\\": 54, \\\"json3\\\": 57 }], 9: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var EventEmitter = require('events').EventEmitter,\\n            inherits = require('inherits'),\\n            JSON3 = require('json3'),\\n            objectUtils = require('./utils/object');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:info-ajax');\\n        }\\n\\n        function InfoAjax(url, AjaxObject) {\\n          EventEmitter.call(this);\\n\\n          var self = this;\\n          var t0 = +new Date();\\n          this.xo = new AjaxObject('GET', url);\\n\\n          this.xo.once('finish', function (status, text) {\\n            var info, rtt;\\n            if (status === 200) {\\n              rtt = +new Date() - t0;\\n              if (text) {\\n                try {\\n                  info = JSON3.parse(text);\\n                } catch (e) {\\n                  debug('bad json', text);\\n                }\\n              }\\n\\n              if (!objectUtils.isObject(info)) {\\n                info = {};\\n              }\\n            }\\n            self.emit('finish', info, rtt);\\n            self.removeAllListeners();\\n          });\\n        }\\n\\n        inherits(InfoAjax, EventEmitter);\\n\\n        InfoAjax.prototype.close = function () {\\n          this.removeAllListeners();\\n          this.xo.close();\\n        };\\n\\n        module.exports = InfoAjax;\\n      }).call(this, { env: {} });\\n    }, { \\\"./utils/object\\\": 49, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56, \\\"json3\\\": 57 }], 10: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          EventEmitter = require('events').EventEmitter,\\n          JSON3 = require('json3'),\\n          XHRLocalObject = require('./transport/sender/xhr-local'),\\n          InfoAjax = require('./info-ajax');\\n\\n      function InfoReceiverIframe(transUrl) {\\n        var self = this;\\n        EventEmitter.call(this);\\n\\n        this.ir = new InfoAjax(transUrl, XHRLocalObject);\\n        this.ir.once('finish', function (info, rtt) {\\n          self.ir = null;\\n          self.emit('message', JSON3.stringify([info, rtt]));\\n        });\\n      }\\n\\n      inherits(InfoReceiverIframe, EventEmitter);\\n\\n      InfoReceiverIframe.transportName = 'iframe-info-receiver';\\n\\n      InfoReceiverIframe.prototype.close = function () {\\n        if (this.ir) {\\n          this.ir.close();\\n          this.ir = null;\\n        }\\n        this.removeAllListeners();\\n      };\\n\\n      module.exports = InfoReceiverIframe;\\n    }, { \\\"./info-ajax\\\": 9, \\\"./transport/sender/xhr-local\\\": 37, \\\"events\\\": 3, \\\"inherits\\\": 56, \\\"json3\\\": 57 }], 11: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        var EventEmitter = require('events').EventEmitter,\\n            inherits = require('inherits'),\\n            JSON3 = require('json3'),\\n            utils = require('./utils/event'),\\n            IframeTransport = require('./transport/iframe'),\\n            InfoReceiverIframe = require('./info-iframe-receiver');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:info-iframe');\\n        }\\n\\n        function InfoIframe(baseUrl, url) {\\n          var self = this;\\n          EventEmitter.call(this);\\n\\n          var go = function () {\\n            var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);\\n\\n            ifr.once('message', function (msg) {\\n              if (msg) {\\n                var d;\\n                try {\\n                  d = JSON3.parse(msg);\\n                } catch (e) {\\n                  debug('bad json', msg);\\n                  self.emit('finish');\\n                  self.close();\\n                  return;\\n                }\\n\\n                var info = d[0],\\n                    rtt = d[1];\\n                self.emit('finish', info, rtt);\\n              }\\n              self.close();\\n            });\\n\\n            ifr.once('close', function () {\\n              self.emit('finish');\\n              self.close();\\n            });\\n          };\\n\\n          // TODO this seems the same as the 'needBody' from transports\\n          if (!global.document.body) {\\n            utils.attachEvent('load', go);\\n          } else {\\n            go();\\n          }\\n        }\\n\\n        inherits(InfoIframe, EventEmitter);\\n\\n        InfoIframe.enabled = function () {\\n          return IframeTransport.enabled();\\n        };\\n\\n        InfoIframe.prototype.close = function () {\\n          if (this.ifr) {\\n            this.ifr.close();\\n          }\\n          this.removeAllListeners();\\n          this.ifr = null;\\n        };\\n\\n        module.exports = InfoIframe;\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"./info-iframe-receiver\\\": 10, \\\"./transport/iframe\\\": 22, \\\"./utils/event\\\": 46, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56, \\\"json3\\\": 57 }], 12: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var EventEmitter = require('events').EventEmitter,\\n            inherits = require('inherits'),\\n            urlUtils = require('./utils/url'),\\n            XDR = require('./transport/sender/xdr'),\\n            XHRCors = require('./transport/sender/xhr-cors'),\\n            XHRLocal = require('./transport/sender/xhr-local'),\\n            XHRFake = require('./transport/sender/xhr-fake'),\\n            InfoIframe = require('./info-iframe'),\\n            InfoAjax = require('./info-ajax');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:info-receiver');\\n        }\\n\\n        function InfoReceiver(baseUrl, urlInfo) {\\n          debug(baseUrl);\\n          var self = this;\\n          EventEmitter.call(this);\\n\\n          setTimeout(function () {\\n            self.doXhr(baseUrl, urlInfo);\\n          }, 0);\\n        }\\n\\n        inherits(InfoReceiver, EventEmitter);\\n\\n        // TODO this is currently ignoring the list of available transports and the whitelist\\n\\n        InfoReceiver._getReceiver = function (baseUrl, url, urlInfo) {\\n          // determine method of CORS support (if needed)\\n          if (urlInfo.sameOrigin) {\\n            return new InfoAjax(url, XHRLocal);\\n          }\\n          if (XHRCors.enabled) {\\n            return new InfoAjax(url, XHRCors);\\n          }\\n          if (XDR.enabled && urlInfo.sameScheme) {\\n            return new InfoAjax(url, XDR);\\n          }\\n          if (InfoIframe.enabled()) {\\n            return new InfoIframe(baseUrl, url);\\n          }\\n          return new InfoAjax(url, XHRFake);\\n        };\\n\\n        InfoReceiver.prototype.doXhr = function (baseUrl, urlInfo) {\\n          var self = this,\\n              url = urlUtils.addPath(baseUrl, '/info');\\n          debug('doXhr', url);\\n\\n          this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);\\n\\n          this.timeoutRef = setTimeout(function () {\\n            debug('timeout');\\n            self._cleanup(false);\\n            self.emit('finish');\\n          }, InfoReceiver.timeout);\\n\\n          this.xo.once('finish', function (info, rtt) {\\n            debug('finish', info, rtt);\\n            self._cleanup(true);\\n            self.emit('finish', info, rtt);\\n          });\\n        };\\n\\n        InfoReceiver.prototype._cleanup = function (wasClean) {\\n          debug('_cleanup');\\n          clearTimeout(this.timeoutRef);\\n          this.timeoutRef = null;\\n          if (!wasClean && this.xo) {\\n            this.xo.close();\\n          }\\n          this.xo = null;\\n        };\\n\\n        InfoReceiver.prototype.close = function () {\\n          debug('close');\\n          this.removeAllListeners();\\n          this._cleanup(false);\\n        };\\n\\n        InfoReceiver.timeout = 8000;\\n\\n        module.exports = InfoReceiver;\\n      }).call(this, { env: {} });\\n    }, { \\\"./info-ajax\\\": 9, \\\"./info-iframe\\\": 11, \\\"./transport/sender/xdr\\\": 34, \\\"./transport/sender/xhr-cors\\\": 35, \\\"./transport/sender/xhr-fake\\\": 36, \\\"./transport/sender/xhr-local\\\": 37, \\\"./utils/url\\\": 52, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 13: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        module.exports = global.location || {\\n          origin: 'http://localhost:80',\\n          protocol: 'http:',\\n          host: 'localhost',\\n          port: 80,\\n          href: 'http://localhost/',\\n          hash: ''\\n        };\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, {}], 14: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        require('./shims');\\n\\n        var URL = require('url-parse'),\\n            inherits = require('inherits'),\\n            JSON3 = require('json3'),\\n            random = require('./utils/random'),\\n            escape = require('./utils/escape'),\\n            urlUtils = require('./utils/url'),\\n            eventUtils = require('./utils/event'),\\n            transport = require('./utils/transport'),\\n            objectUtils = require('./utils/object'),\\n            browser = require('./utils/browser'),\\n            log = require('./utils/log'),\\n            Event = require('./event/event'),\\n            EventTarget = require('./event/eventtarget'),\\n            loc = require('./location'),\\n            CloseEvent = require('./event/close'),\\n            TransportMessageEvent = require('./event/trans-message'),\\n            InfoReceiver = require('./info-receiver');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:main');\\n        }\\n\\n        var transports;\\n\\n        // follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface\\n        function SockJS(url, protocols, options) {\\n          if (!(this instanceof SockJS)) {\\n            return new SockJS(url, protocols, options);\\n          }\\n          if (arguments.length < 1) {\\n            throw new TypeError(\\\"Failed to construct 'SockJS: 1 argument required, but only 0 present\\\");\\n          }\\n          EventTarget.call(this);\\n\\n          this.readyState = SockJS.CONNECTING;\\n          this.extensions = '';\\n          this.protocol = '';\\n\\n          // non-standard extension\\n          options = options || {};\\n          if (options.protocols_whitelist) {\\n            log.warn(\\\"'protocols_whitelist' is DEPRECATED. Use 'transports' instead.\\\");\\n          }\\n          this._transportsWhitelist = options.transports;\\n          this._transportOptions = options.transportOptions || {};\\n\\n          var sessionId = options.sessionId || 8;\\n          if (typeof sessionId === 'function') {\\n            this._generateSessionId = sessionId;\\n          } else if (typeof sessionId === 'number') {\\n            this._generateSessionId = function () {\\n              return random.string(sessionId);\\n            };\\n          } else {\\n            throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');\\n          }\\n\\n          this._server = options.server || random.numberString(1000);\\n\\n          // Step 1 of WS spec - parse and validate the url. Issue #8\\n          var parsedUrl = new URL(url);\\n          if (!parsedUrl.host || !parsedUrl.protocol) {\\n            throw new SyntaxError(\\\"The URL '\\\" + url + \\\"' is invalid\\\");\\n          } else if (parsedUrl.hash) {\\n            throw new SyntaxError('The URL must not contain a fragment');\\n          } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {\\n            throw new SyntaxError(\\\"The URL's scheme must be either 'http:' or 'https:'. '\\\" + parsedUrl.protocol + \\\"' is not allowed.\\\");\\n          }\\n\\n          var secure = parsedUrl.protocol === 'https:';\\n          // Step 2 - don't allow secure origin with an insecure protocol\\n          if (loc.protocol === 'https:' && !secure) {\\n            throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');\\n          }\\n\\n          // Step 3 - check port access - no need here\\n          // Step 4 - parse protocols argument\\n          if (!protocols) {\\n            protocols = [];\\n          } else if (!Array.isArray(protocols)) {\\n            protocols = [protocols];\\n          }\\n\\n          // Step 5 - check protocols argument\\n          var sortedProtocols = protocols.sort();\\n          sortedProtocols.forEach(function (proto, i) {\\n            if (!proto) {\\n              throw new SyntaxError(\\\"The protocols entry '\\\" + proto + \\\"' is invalid.\\\");\\n            }\\n            if (i < sortedProtocols.length - 1 && proto === sortedProtocols[i + 1]) {\\n              throw new SyntaxError(\\\"The protocols entry '\\\" + proto + \\\"' is duplicated.\\\");\\n            }\\n          });\\n\\n          // Step 6 - convert origin\\n          var o = urlUtils.getOrigin(loc.href);\\n          this._origin = o ? o.toLowerCase() : null;\\n\\n          // remove the trailing slash\\n          parsedUrl.set('pathname', parsedUrl.pathname.replace(/\\\\/+$/, ''));\\n\\n          // store the sanitized url\\n          this.url = parsedUrl.href;\\n          debug('using url', this.url);\\n\\n          // Step 7 - start connection in background\\n          // obtain server info\\n          // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26\\n          this._urlInfo = {\\n            nullOrigin: !browser.hasDomain(),\\n            sameOrigin: urlUtils.isOriginEqual(this.url, loc.href),\\n            sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)\\n          };\\n\\n          this._ir = new InfoReceiver(this.url, this._urlInfo);\\n          this._ir.once('finish', this._receiveInfo.bind(this));\\n        }\\n\\n        inherits(SockJS, EventTarget);\\n\\n        function userSetCode(code) {\\n          return code === 1000 || code >= 3000 && code <= 4999;\\n        }\\n\\n        SockJS.prototype.close = function (code, reason) {\\n          // Step 1\\n          if (code && !userSetCode(code)) {\\n            throw new Error('InvalidAccessError: Invalid code');\\n          }\\n          // Step 2.4 states the max is 123 bytes, but we are just checking length\\n          if (reason && reason.length > 123) {\\n            throw new SyntaxError('reason argument has an invalid length');\\n          }\\n\\n          // Step 3.1\\n          if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {\\n            return;\\n          }\\n\\n          // TODO look at docs to determine how to set this\\n          var wasClean = true;\\n          this._close(code || 1000, reason || 'Normal closure', wasClean);\\n        };\\n\\n        SockJS.prototype.send = function (data) {\\n          // #13 - convert anything non-string to string\\n          // TODO this currently turns objects into [object Object]\\n          if (typeof data !== 'string') {\\n            data = '' + data;\\n          }\\n          if (this.readyState === SockJS.CONNECTING) {\\n            throw new Error('InvalidStateError: The connection has not been established yet');\\n          }\\n          if (this.readyState !== SockJS.OPEN) {\\n            return;\\n          }\\n          this._transport.send(escape.quote(data));\\n        };\\n\\n        SockJS.version = require('./version');\\n\\n        SockJS.CONNECTING = 0;\\n        SockJS.OPEN = 1;\\n        SockJS.CLOSING = 2;\\n        SockJS.CLOSED = 3;\\n\\n        SockJS.prototype._receiveInfo = function (info, rtt) {\\n          debug('_receiveInfo', rtt);\\n          this._ir = null;\\n          if (!info) {\\n            this._close(1002, 'Cannot connect to server');\\n            return;\\n          }\\n\\n          // establish a round-trip timeout (RTO) based on the\\n          // round-trip time (RTT)\\n          this._rto = this.countRTO(rtt);\\n          // allow server to override url used for the actual transport\\n          this._transUrl = info.base_url ? info.base_url : this.url;\\n          info = objectUtils.extend(info, this._urlInfo);\\n          debug('info', info);\\n          // determine list of desired and supported transports\\n          var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);\\n          this._transports = enabledTransports.main;\\n          debug(this._transports.length + ' enabled transports');\\n\\n          this._connect();\\n        };\\n\\n        SockJS.prototype._connect = function () {\\n          for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {\\n            debug('attempt', Transport.transportName);\\n            if (Transport.needBody) {\\n              if (!global.document.body || typeof global.document.readyState !== 'undefined' && global.document.readyState !== 'complete' && global.document.readyState !== 'interactive') {\\n                debug('waiting for body');\\n                this._transports.unshift(Transport);\\n                eventUtils.attachEvent('load', this._connect.bind(this));\\n                return;\\n              }\\n            }\\n\\n            // calculate timeout based on RTO and round trips. Default to 5s\\n            var timeoutMs = this._rto * Transport.roundTrips || 5000;\\n            this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);\\n            debug('using timeout', timeoutMs);\\n\\n            var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());\\n            var options = this._transportOptions[Transport.transportName];\\n            debug('transport url', transportUrl);\\n            var transportObj = new Transport(transportUrl, this._transUrl, options);\\n            transportObj.on('message', this._transportMessage.bind(this));\\n            transportObj.once('close', this._transportClose.bind(this));\\n            transportObj.transportName = Transport.transportName;\\n            this._transport = transportObj;\\n\\n            return;\\n          }\\n          this._close(2000, 'All transports failed', false);\\n        };\\n\\n        SockJS.prototype._transportTimeout = function () {\\n          debug('_transportTimeout');\\n          if (this.readyState === SockJS.CONNECTING) {\\n            if (this._transport) {\\n              this._transport.close();\\n            }\\n\\n            this._transportClose(2007, 'Transport timed out');\\n          }\\n        };\\n\\n        SockJS.prototype._transportMessage = function (msg) {\\n          debug('_transportMessage', msg);\\n          var self = this,\\n              type = msg.slice(0, 1),\\n              content = msg.slice(1),\\n              payload;\\n\\n          // first check for messages that don't need a payload\\n          switch (type) {\\n            case 'o':\\n              this._open();\\n              return;\\n            case 'h':\\n              this.dispatchEvent(new Event('heartbeat'));\\n              debug('heartbeat', this.transport);\\n              return;\\n          }\\n\\n          if (content) {\\n            try {\\n              payload = JSON3.parse(content);\\n            } catch (e) {\\n              debug('bad json', content);\\n            }\\n          }\\n\\n          if (typeof payload === 'undefined') {\\n            debug('empty payload', content);\\n            return;\\n          }\\n\\n          switch (type) {\\n            case 'a':\\n              if (Array.isArray(payload)) {\\n                payload.forEach(function (p) {\\n                  debug('message', self.transport, p);\\n                  self.dispatchEvent(new TransportMessageEvent(p));\\n                });\\n              }\\n              break;\\n            case 'm':\\n              debug('message', this.transport, payload);\\n              this.dispatchEvent(new TransportMessageEvent(payload));\\n              break;\\n            case 'c':\\n              if (Array.isArray(payload) && payload.length === 2) {\\n                this._close(payload[0], payload[1], true);\\n              }\\n              break;\\n          }\\n        };\\n\\n        SockJS.prototype._transportClose = function (code, reason) {\\n          debug('_transportClose', this.transport, code, reason);\\n          if (this._transport) {\\n            this._transport.removeAllListeners();\\n            this._transport = null;\\n            this.transport = null;\\n          }\\n\\n          if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {\\n            this._connect();\\n            return;\\n          }\\n\\n          this._close(code, reason);\\n        };\\n\\n        SockJS.prototype._open = function () {\\n          debug('_open', this._transport.transportName, this.readyState);\\n          if (this.readyState === SockJS.CONNECTING) {\\n            if (this._transportTimeoutId) {\\n              clearTimeout(this._transportTimeoutId);\\n              this._transportTimeoutId = null;\\n            }\\n            this.readyState = SockJS.OPEN;\\n            this.transport = this._transport.transportName;\\n            this.dispatchEvent(new Event('open'));\\n            debug('connected', this.transport);\\n          } else {\\n            // The server might have been restarted, and lost track of our\\n            // connection.\\n            this._close(1006, 'Server lost session');\\n          }\\n        };\\n\\n        SockJS.prototype._close = function (code, reason, wasClean) {\\n          debug('_close', this.transport, code, reason, wasClean, this.readyState);\\n          var forceFail = false;\\n\\n          if (this._ir) {\\n            forceFail = true;\\n            this._ir.close();\\n            this._ir = null;\\n          }\\n          if (this._transport) {\\n            this._transport.close();\\n            this._transport = null;\\n            this.transport = null;\\n          }\\n\\n          if (this.readyState === SockJS.CLOSED) {\\n            throw new Error('InvalidStateError: SockJS has already been closed');\\n          }\\n\\n          this.readyState = SockJS.CLOSING;\\n          setTimeout(function () {\\n            this.readyState = SockJS.CLOSED;\\n\\n            if (forceFail) {\\n              this.dispatchEvent(new Event('error'));\\n            }\\n\\n            var e = new CloseEvent('close');\\n            e.wasClean = wasClean || false;\\n            e.code = code || 1000;\\n            e.reason = reason;\\n\\n            this.dispatchEvent(e);\\n            this.onmessage = this.onclose = this.onerror = null;\\n            debug('disconnected');\\n          }.bind(this), 0);\\n        };\\n\\n        // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/\\n        // and RFC 2988.\\n        SockJS.prototype.countRTO = function (rtt) {\\n          // In a local environment, when using IE8/9 and the `jsonp-polling`\\n          // transport the time needed to establish a connection (the time that pass\\n          // from the opening of the transport to the call of `_dispatchOpen`) is\\n          // around 200msec (the lower bound used in the article above) and this\\n          // causes spurious timeouts. For this reason we calculate a value slightly\\n          // larger than that used in the article.\\n          if (rtt > 100) {\\n            return 4 * rtt; // rto > 400msec\\n          }\\n          return 300 + rtt; // 300msec < rto <= 400msec\\n        };\\n\\n        module.exports = function (availableTransports) {\\n          transports = transport(availableTransports);\\n          require('./iframe-bootstrap')(SockJS, availableTransports);\\n          return SockJS;\\n        };\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"./event/close\\\": 2, \\\"./event/event\\\": 4, \\\"./event/eventtarget\\\": 5, \\\"./event/trans-message\\\": 6, \\\"./iframe-bootstrap\\\": 8, \\\"./info-receiver\\\": 12, \\\"./location\\\": 13, \\\"./shims\\\": 15, \\\"./utils/browser\\\": 44, \\\"./utils/escape\\\": 45, \\\"./utils/event\\\": 46, \\\"./utils/log\\\": 48, \\\"./utils/object\\\": 49, \\\"./utils/random\\\": 50, \\\"./utils/transport\\\": 51, \\\"./utils/url\\\": 52, \\\"./version\\\": 53, \\\"debug\\\": 54, \\\"inherits\\\": 56, \\\"json3\\\": 57, \\\"url-parse\\\": 61 }], 15: [function (require, module, exports) {\\n      /* eslint-disable */\\n      /* jscs: disable */\\n      'use strict';\\n\\n      // pulled specific shims from https://github.com/es-shims/es5-shim\\n\\n      var ArrayPrototype = Array.prototype;\\n      var ObjectPrototype = Object.prototype;\\n      var FunctionPrototype = Function.prototype;\\n      var StringPrototype = String.prototype;\\n      var array_slice = ArrayPrototype.slice;\\n\\n      var _toString = ObjectPrototype.toString;\\n      var isFunction = function (val) {\\n        return ObjectPrototype.toString.call(val) === '[object Function]';\\n      };\\n      var isArray = function isArray(obj) {\\n        return _toString.call(obj) === '[object Array]';\\n      };\\n      var isString = function isString(obj) {\\n        return _toString.call(obj) === '[object String]';\\n      };\\n\\n      var supportsDescriptors = Object.defineProperty && function () {\\n        try {\\n          Object.defineProperty({}, 'x', {});\\n          return true;\\n        } catch (e) {\\n          /* this is ES3 */\\n          return false;\\n        }\\n      }();\\n\\n      // Define configurable, writable and non-enumerable props\\n      // if they don't exist.\\n      var defineProperty;\\n      if (supportsDescriptors) {\\n        defineProperty = function (object, name, method, forceAssign) {\\n          if (!forceAssign && name in object) {\\n            return;\\n          }\\n          Object.defineProperty(object, name, {\\n            configurable: true,\\n            enumerable: false,\\n            writable: true,\\n            value: method\\n          });\\n        };\\n      } else {\\n        defineProperty = function (object, name, method, forceAssign) {\\n          if (!forceAssign && name in object) {\\n            return;\\n          }\\n          object[name] = method;\\n        };\\n      }\\n      var defineProperties = function (object, map, forceAssign) {\\n        for (var name in map) {\\n          if (ObjectPrototype.hasOwnProperty.call(map, name)) {\\n            defineProperty(object, name, map[name], forceAssign);\\n          }\\n        }\\n      };\\n\\n      var toObject = function (o) {\\n        if (o == null) {\\n          // this matches both null and undefined\\n          throw new TypeError(\\\"can't convert \\\" + o + ' to object');\\n        }\\n        return Object(o);\\n      };\\n\\n      //\\n      // Util\\n      // ======\\n      //\\n\\n      // ES5 9.4\\n      // http://es5.github.com/#x9.4\\n      // http://jsperf.com/to-integer\\n\\n      function toInteger(num) {\\n        var n = +num;\\n        if (n !== n) {\\n          // isNaN\\n          n = 0;\\n        } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {\\n          n = (n > 0 || -1) * Math.floor(Math.abs(n));\\n        }\\n        return n;\\n      }\\n\\n      function ToUint32(x) {\\n        return x >>> 0;\\n      }\\n\\n      //\\n      // Function\\n      // ========\\n      //\\n\\n      // ES-5 15.3.4.5\\n      // http://es5.github.com/#x15.3.4.5\\n\\n      function Empty() {}\\n\\n      defineProperties(FunctionPrototype, {\\n        bind: function bind(that) {\\n          // .length is 1\\n          // 1. Let Target be the this value.\\n          var target = this;\\n          // 2. If IsCallable(Target) is false, throw a TypeError exception.\\n          if (!isFunction(target)) {\\n            throw new TypeError('Function.prototype.bind called on incompatible ' + target);\\n          }\\n          // 3. Let A be a new (possibly empty) internal list of all of the\\n          //   argument values provided after thisArg (arg1, arg2 etc), in order.\\n          // XXX slicedArgs will stand in for \\\"A\\\" if used\\n          var args = array_slice.call(arguments, 1); // for normal call\\n          // 4. Let F be a new native ECMAScript object.\\n          // 11. Set the [[Prototype]] internal property of F to the standard\\n          //   built-in Function prototype object as specified in 15.3.3.1.\\n          // 12. Set the [[Call]] internal property of F as described in\\n          //   15.3.4.5.1.\\n          // 13. Set the [[Construct]] internal property of F as described in\\n          //   15.3.4.5.2.\\n          // 14. Set the [[HasInstance]] internal property of F as described in\\n          //   15.3.4.5.3.\\n          var binder = function () {\\n\\n            if (this instanceof bound) {\\n              // 15.3.4.5.2 [[Construct]]\\n              // When the [[Construct]] internal method of a function object,\\n              // F that was created using the bind function is called with a\\n              // list of arguments ExtraArgs, the following steps are taken:\\n              // 1. Let target be the value of F's [[TargetFunction]]\\n              //   internal property.\\n              // 2. If target has no [[Construct]] internal method, a\\n              //   TypeError exception is thrown.\\n              // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\\n              //   property.\\n              // 4. Let args be a new list containing the same values as the\\n              //   list boundArgs in the same order followed by the same\\n              //   values as the list ExtraArgs in the same order.\\n              // 5. Return the result of calling the [[Construct]] internal\\n              //   method of target providing args as the arguments.\\n\\n              var result = target.apply(this, args.concat(array_slice.call(arguments)));\\n              if (Object(result) === result) {\\n                return result;\\n              }\\n              return this;\\n            } else {\\n              // 15.3.4.5.1 [[Call]]\\n              // When the [[Call]] internal method of a function object, F,\\n              // which was created using the bind function is called with a\\n              // this value and a list of arguments ExtraArgs, the following\\n              // steps are taken:\\n              // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\\n              //   property.\\n              // 2. Let boundThis be the value of F's [[BoundThis]] internal\\n              //   property.\\n              // 3. Let target be the value of F's [[TargetFunction]] internal\\n              //   property.\\n              // 4. Let args be a new list containing the same values as the\\n              //   list boundArgs in the same order followed by the same\\n              //   values as the list ExtraArgs in the same order.\\n              // 5. Return the result of calling the [[Call]] internal method\\n              //   of target providing boundThis as the this value and\\n              //   providing args as the arguments.\\n\\n              // equiv: target.call(this, ...boundArgs, ...args)\\n              return target.apply(that, args.concat(array_slice.call(arguments)));\\n            }\\n          };\\n\\n          // 15. If the [[Class]] internal property of Target is \\\"Function\\\", then\\n          //     a. Let L be the length property of Target minus the length of A.\\n          //     b. Set the length own property of F to either 0 or L, whichever is\\n          //       larger.\\n          // 16. Else set the length own property of F to 0.\\n\\n          var boundLength = Math.max(0, target.length - args.length);\\n\\n          // 17. Set the attributes of the length own property of F to the values\\n          //   specified in 15.3.5.1.\\n          var boundArgs = [];\\n          for (var i = 0; i < boundLength; i++) {\\n            boundArgs.push('$' + i);\\n          }\\n\\n          // XXX Build a dynamic function with desired amount of arguments is the only\\n          // way to set the length property of a function.\\n          // In environments where Content Security Policies enabled (Chrome extensions,\\n          // for ex.) all use of eval or Function costructor throws an exception.\\n          // However in all of these environments Function.prototype.bind exists\\n          // and so this code will never be executed.\\n          var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\\n\\n          if (target.prototype) {\\n            Empty.prototype = target.prototype;\\n            bound.prototype = new Empty();\\n            // Clean up dangling references.\\n            Empty.prototype = null;\\n          }\\n\\n          // TODO\\n          // 18. Set the [[Extensible]] internal property of F to true.\\n\\n          // TODO\\n          // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\\n          // 20. Call the [[DefineOwnProperty]] internal method of F with\\n          //   arguments \\\"caller\\\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\\n          //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\\n          //   false.\\n          // 21. Call the [[DefineOwnProperty]] internal method of F with\\n          //   arguments \\\"arguments\\\", PropertyDescriptor {[[Get]]: thrower,\\n          //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\\n          //   and false.\\n\\n          // TODO\\n          // NOTE Function objects created using Function.prototype.bind do not\\n          // have a prototype property or the [[Code]], [[FormalParameters]], and\\n          // [[Scope]] internal properties.\\n          // XXX can't delete prototype in pure-js.\\n\\n          // 22. Return F.\\n          return bound;\\n        }\\n      });\\n\\n      //\\n      // Array\\n      // =====\\n      //\\n\\n      // ES5 15.4.3.2\\n      // http://es5.github.com/#x15.4.3.2\\n      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray\\n      defineProperties(Array, { isArray: isArray });\\n\\n      var boxedString = Object('a');\\n      var splitString = boxedString[0] !== 'a' || !(0 in boxedString);\\n\\n      var properlyBoxesContext = function properlyBoxed(method) {\\n        // Check node 0.6.21 bug where third parameter is not boxed\\n        var properlyBoxesNonStrict = true;\\n        var properlyBoxesStrict = true;\\n        if (method) {\\n          method.call('foo', function (_, __, context) {\\n            if (typeof context !== 'object') {\\n              properlyBoxesNonStrict = false;\\n            }\\n          });\\n\\n          method.call([1], function () {\\n            'use strict';\\n\\n            properlyBoxesStrict = typeof this === 'string';\\n          }, 'x');\\n        }\\n        return !!method && properlyBoxesNonStrict && properlyBoxesStrict;\\n      };\\n\\n      defineProperties(ArrayPrototype, {\\n        forEach: function forEach(fun /*, thisp*/) {\\n          var object = toObject(this),\\n              self = splitString && isString(this) ? this.split('') : object,\\n              thisp = arguments[1],\\n              i = -1,\\n              length = self.length >>> 0;\\n\\n          // If no callback function or if callback is not a callable function\\n          if (!isFunction(fun)) {\\n            throw new TypeError(); // TODO message\\n          }\\n\\n          while (++i < length) {\\n            if (i in self) {\\n              // Invoke the callback function with call, passing arguments:\\n              // context, property value, property key, thisArg object\\n              // context\\n              fun.call(thisp, self[i], i, object);\\n            }\\n          }\\n        }\\n      }, !properlyBoxesContext(ArrayPrototype.forEach));\\n\\n      // ES5 15.4.4.14\\n      // http://es5.github.com/#x15.4.4.14\\n      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\\n      var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;\\n      defineProperties(ArrayPrototype, {\\n        indexOf: function indexOf(sought /*, fromIndex */) {\\n          var self = splitString && isString(this) ? this.split('') : toObject(this),\\n              length = self.length >>> 0;\\n\\n          if (!length) {\\n            return -1;\\n          }\\n\\n          var i = 0;\\n          if (arguments.length > 1) {\\n            i = toInteger(arguments[1]);\\n          }\\n\\n          // handle negative indices\\n          i = i >= 0 ? i : Math.max(0, length + i);\\n          for (; i < length; i++) {\\n            if (i in self && self[i] === sought) {\\n              return i;\\n            }\\n          }\\n          return -1;\\n        }\\n      }, hasFirefox2IndexOfBug);\\n\\n      //\\n      // String\\n      // ======\\n      //\\n\\n      // ES5 15.5.4.14\\n      // http://es5.github.com/#x15.5.4.14\\n\\n      // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]\\n      // Many browsers do not split properly with regular expressions or they\\n      // do not perform the split correctly under obscure conditions.\\n      // See http://blog.stevenlevithan.com/archives/cross-browser-split\\n      // I've tested in many browsers and this seems to cover the deviant ones:\\n      //    'ab'.split(/(?:ab)*/) should be [\\\"\\\", \\\"\\\"], not [\\\"\\\"]\\n      //    '.'.split(/(.?)(.?)/) should be [\\\"\\\", \\\".\\\", \\\"\\\", \\\"\\\"], not [\\\"\\\", \\\"\\\"]\\n      //    'tesst'.split(/(s)*/) should be [\\\"t\\\", undefined, \\\"e\\\", \\\"s\\\", \\\"t\\\"], not\\n      //       [undefined, \\\"t\\\", undefined, \\\"e\\\", ...]\\n      //    ''.split(/.?/) should be [], not [\\\"\\\"]\\n      //    '.'.split(/()()/) should be [\\\".\\\"], not [\\\"\\\", \\\"\\\", \\\".\\\"]\\n\\n      var string_split = StringPrototype.split;\\n      if ('ab'.split(/(?:ab)*/).length !== 2 || '.'.split(/(.?)(.?)/).length !== 4 || 'tesst'.split(/(s)*/)[1] === 't' || 'test'.split(/(?:)/, -1).length !== 4 || ''.split(/.?/).length || '.'.split(/()()/).length > 1) {\\n        (function () {\\n          var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group\\n\\n          StringPrototype.split = function (separator, limit) {\\n            var string = this;\\n            if (separator === void 0 && limit === 0) {\\n              return [];\\n            }\\n\\n            // If `separator` is not a regex, use native split\\n            if (_toString.call(separator) !== '[object RegExp]') {\\n              return string_split.call(this, separator, limit);\\n            }\\n\\n            var output = [],\\n                flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.extended ? 'x' : '') + ( // Proposed for ES6\\n            separator.sticky ? 'y' : ''),\\n                // Firefox 3+\\n            lastLastIndex = 0,\\n\\n            // Make `global` and avoid `lastIndex` issues by working with a copy\\n            separator2,\\n                match,\\n                lastIndex,\\n                lastLength;\\n            separator = new RegExp(separator.source, flags + 'g');\\n            string += ''; // Type-convert\\n            if (!compliantExecNpcg) {\\n              // Doesn't need flags gy, but they don't hurt\\n              separator2 = new RegExp('^' + separator.source + '$(?!\\\\\\\\s)', flags);\\n            }\\n            /* Values for `limit`, per the spec:\\r\\n             * If undefined: 4294967295 // Math.pow(2, 32) - 1\\r\\n             * If 0, Infinity, or NaN: 0\\r\\n             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\\r\\n             * If negative number: 4294967296 - Math.floor(Math.abs(limit))\\r\\n             * If other: Type-convert, then use the above rules\\r\\n             */\\n            limit = limit === void 0 ? -1 >>> 0 : // Math.pow(2, 32) - 1\\n            ToUint32(limit);\\n            while (match = separator.exec(string)) {\\n              // `separator.lastIndex` is not reliable cross-browser\\n              lastIndex = match.index + match[0].length;\\n              if (lastIndex > lastLastIndex) {\\n                output.push(string.slice(lastLastIndex, match.index));\\n                // Fix browsers whose `exec` methods don't consistently return `undefined` for\\n                // nonparticipating capturing groups\\n                if (!compliantExecNpcg && match.length > 1) {\\n                  match[0].replace(separator2, function () {\\n                    for (var i = 1; i < arguments.length - 2; i++) {\\n                      if (arguments[i] === void 0) {\\n                        match[i] = void 0;\\n                      }\\n                    }\\n                  });\\n                }\\n                if (match.length > 1 && match.index < string.length) {\\n                  ArrayPrototype.push.apply(output, match.slice(1));\\n                }\\n                lastLength = match[0].length;\\n                lastLastIndex = lastIndex;\\n                if (output.length >= limit) {\\n                  break;\\n                }\\n              }\\n              if (separator.lastIndex === match.index) {\\n                separator.lastIndex++; // Avoid an infinite loop\\n              }\\n            }\\n            if (lastLastIndex === string.length) {\\n              if (lastLength || !separator.test('')) {\\n                output.push('');\\n              }\\n            } else {\\n              output.push(string.slice(lastLastIndex));\\n            }\\n            return output.length > limit ? output.slice(0, limit) : output;\\n          };\\n        })();\\n\\n        // [bugfix, chrome]\\n        // If separator is undefined, then the result array contains just one String,\\n        // which is the this value (converted to a String). If limit is not undefined,\\n        // then the output array is truncated so that it contains no more than limit\\n        // elements.\\n        // \\\"0\\\".split(undefined, 0) -> []\\n      } else if ('0'.split(void 0, 0).length) {\\n        StringPrototype.split = function split(separator, limit) {\\n          if (separator === void 0 && limit === 0) {\\n            return [];\\n          }\\n          return string_split.call(this, separator, limit);\\n        };\\n      }\\n\\n      // ECMA-262, 3rd B.2.3\\n      // Not an ECMAScript standard, although ECMAScript 3rd Edition has a\\n      // non-normative section suggesting uniform semantics and it should be\\n      // normalized across all browsers\\n      // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE\\n      var string_substr = StringPrototype.substr;\\n      var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';\\n      defineProperties(StringPrototype, {\\n        substr: function substr(start, length) {\\n          return string_substr.call(this, start < 0 ? (start = this.length + start) < 0 ? 0 : start : start, length);\\n        }\\n      }, hasNegativeSubstrBug);\\n    }, {}], 16: [function (require, module, exports) {\\n      'use strict';\\n\\n      module.exports = [\\n      // streaming transports\\n      require('./transport/websocket'), require('./transport/xhr-streaming'), require('./transport/xdr-streaming'), require('./transport/eventsource'), require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))\\n\\n      // polling transports\\n      , require('./transport/htmlfile'), require('./transport/lib/iframe-wrap')(require('./transport/htmlfile')), require('./transport/xhr-polling'), require('./transport/xdr-polling'), require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling')), require('./transport/jsonp-polling')];\\n    }, { \\\"./transport/eventsource\\\": 20, \\\"./transport/htmlfile\\\": 21, \\\"./transport/jsonp-polling\\\": 23, \\\"./transport/lib/iframe-wrap\\\": 26, \\\"./transport/websocket\\\": 38, \\\"./transport/xdr-polling\\\": 39, \\\"./transport/xdr-streaming\\\": 40, \\\"./transport/xhr-polling\\\": 41, \\\"./transport/xhr-streaming\\\": 42 }], 17: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        var EventEmitter = require('events').EventEmitter,\\n            inherits = require('inherits'),\\n            utils = require('../../utils/event'),\\n            urlUtils = require('../../utils/url'),\\n            XHR = global.XMLHttpRequest;\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:browser:xhr');\\n        }\\n\\n        function AbstractXHRObject(method, url, payload, opts) {\\n          debug(method, url);\\n          var self = this;\\n          EventEmitter.call(this);\\n\\n          setTimeout(function () {\\n            self._start(method, url, payload, opts);\\n          }, 0);\\n        }\\n\\n        inherits(AbstractXHRObject, EventEmitter);\\n\\n        AbstractXHRObject.prototype._start = function (method, url, payload, opts) {\\n          var self = this;\\n\\n          try {\\n            this.xhr = new XHR();\\n          } catch (x) {\\n            // intentionally empty\\n          }\\n\\n          if (!this.xhr) {\\n            debug('no xhr');\\n            this.emit('finish', 0, 'no xhr support');\\n            this._cleanup();\\n            return;\\n          }\\n\\n          // several browsers cache POSTs\\n          url = urlUtils.addQuery(url, 't=' + +new Date());\\n\\n          // Explorer tends to keep connection open, even after the\\n          // tab gets closed: http://bugs.jquery.com/ticket/5280\\n          this.unloadRef = utils.unloadAdd(function () {\\n            debug('unload cleanup');\\n            self._cleanup(true);\\n          });\\n          try {\\n            this.xhr.open(method, url, true);\\n            if (this.timeout && 'timeout' in this.xhr) {\\n              this.xhr.timeout = this.timeout;\\n              this.xhr.ontimeout = function () {\\n                debug('xhr timeout');\\n                self.emit('finish', 0, '');\\n                self._cleanup(false);\\n              };\\n            }\\n          } catch (e) {\\n            debug('exception', e);\\n            // IE raises an exception on wrong port.\\n            this.emit('finish', 0, '');\\n            this._cleanup(false);\\n            return;\\n          }\\n\\n          if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {\\n            debug('withCredentials');\\n            // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :\\n            // \\\"This never affects same-site requests.\\\"\\n\\n            this.xhr.withCredentials = true;\\n          }\\n          if (opts && opts.headers) {\\n            for (var key in opts.headers) {\\n              this.xhr.setRequestHeader(key, opts.headers[key]);\\n            }\\n          }\\n\\n          this.xhr.onreadystatechange = function () {\\n            if (self.xhr) {\\n              var x = self.xhr;\\n              var text, status;\\n              debug('readyState', x.readyState);\\n              switch (x.readyState) {\\n                case 3:\\n                  // IE doesn't like peeking into responseText or status\\n                  // on Microsoft.XMLHTTP and readystate=3\\n                  try {\\n                    status = x.status;\\n                    text = x.responseText;\\n                  } catch (e) {\\n                    // intentionally empty\\n                  }\\n                  debug('status', status);\\n                  // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450\\n                  if (status === 1223) {\\n                    status = 204;\\n                  }\\n\\n                  // IE does return readystate == 3 for 404 answers.\\n                  if (status === 200 && text && text.length > 0) {\\n                    debug('chunk');\\n                    self.emit('chunk', status, text);\\n                  }\\n                  break;\\n                case 4:\\n                  status = x.status;\\n                  debug('status', status);\\n                  // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450\\n                  if (status === 1223) {\\n                    status = 204;\\n                  }\\n                  // IE returns this for a bad port\\n                  // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx\\n                  if (status === 12005 || status === 12029) {\\n                    status = 0;\\n                  }\\n\\n                  debug('finish', status, x.responseText);\\n                  self.emit('finish', status, x.responseText);\\n                  self._cleanup(false);\\n                  break;\\n              }\\n            }\\n          };\\n\\n          try {\\n            self.xhr.send(payload);\\n          } catch (e) {\\n            self.emit('finish', 0, '');\\n            self._cleanup(false);\\n          }\\n        };\\n\\n        AbstractXHRObject.prototype._cleanup = function (abort) {\\n          debug('cleanup');\\n          if (!this.xhr) {\\n            return;\\n          }\\n          this.removeAllListeners();\\n          utils.unloadDel(this.unloadRef);\\n\\n          // IE needs this field to be a function\\n          this.xhr.onreadystatechange = function () {};\\n          if (this.xhr.ontimeout) {\\n            this.xhr.ontimeout = null;\\n          }\\n\\n          if (abort) {\\n            try {\\n              this.xhr.abort();\\n            } catch (x) {\\n              // intentionally empty\\n            }\\n          }\\n          this.unloadRef = this.xhr = null;\\n        };\\n\\n        AbstractXHRObject.prototype.close = function () {\\n          debug('close');\\n          this._cleanup(true);\\n        };\\n\\n        AbstractXHRObject.enabled = !!XHR;\\n        // override XMLHttpRequest for IE6/7\\n        // obfuscate to avoid firewalls\\n        var axo = ['Active'].concat('Object').join('X');\\n        if (!AbstractXHRObject.enabled && axo in global) {\\n          debug('overriding xmlhttprequest');\\n          XHR = function () {\\n            try {\\n              return new global[axo]('Microsoft.XMLHTTP');\\n            } catch (e) {\\n              return null;\\n            }\\n          };\\n          AbstractXHRObject.enabled = !!new XHR();\\n        }\\n\\n        var cors = false;\\n        try {\\n          cors = 'withCredentials' in new XHR();\\n        } catch (ignored) {\\n          // intentionally empty\\n        }\\n\\n        AbstractXHRObject.supportsCORS = cors;\\n\\n        module.exports = AbstractXHRObject;\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"../../utils/event\\\": 46, \\\"../../utils/url\\\": 52, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 18: [function (require, module, exports) {\\n      (function (global) {\\n        module.exports = global.EventSource;\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, {}], 19: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        var Driver = global.WebSocket || global.MozWebSocket;\\n        if (Driver) {\\n          module.exports = function WebSocketBrowserDriver(url) {\\n            return new Driver(url);\\n          };\\n        } else {\\n          module.exports = undefined;\\n        }\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, {}], 20: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          AjaxBasedTransport = require('./lib/ajax-based'),\\n          EventSourceReceiver = require('./receiver/eventsource'),\\n          XHRCorsObject = require('./sender/xhr-cors'),\\n          EventSourceDriver = require('eventsource');\\n\\n      function EventSourceTransport(transUrl) {\\n        if (!EventSourceTransport.enabled()) {\\n          throw new Error('Transport created when disabled');\\n        }\\n\\n        AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);\\n      }\\n\\n      inherits(EventSourceTransport, AjaxBasedTransport);\\n\\n      EventSourceTransport.enabled = function () {\\n        return !!EventSourceDriver;\\n      };\\n\\n      EventSourceTransport.transportName = 'eventsource';\\n      EventSourceTransport.roundTrips = 2;\\n\\n      module.exports = EventSourceTransport;\\n    }, { \\\"./lib/ajax-based\\\": 24, \\\"./receiver/eventsource\\\": 29, \\\"./sender/xhr-cors\\\": 35, \\\"eventsource\\\": 18, \\\"inherits\\\": 56 }], 21: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          HtmlfileReceiver = require('./receiver/htmlfile'),\\n          XHRLocalObject = require('./sender/xhr-local'),\\n          AjaxBasedTransport = require('./lib/ajax-based');\\n\\n      function HtmlFileTransport(transUrl) {\\n        if (!HtmlfileReceiver.enabled) {\\n          throw new Error('Transport created when disabled');\\n        }\\n        AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);\\n      }\\n\\n      inherits(HtmlFileTransport, AjaxBasedTransport);\\n\\n      HtmlFileTransport.enabled = function (info) {\\n        return HtmlfileReceiver.enabled && info.sameOrigin;\\n      };\\n\\n      HtmlFileTransport.transportName = 'htmlfile';\\n      HtmlFileTransport.roundTrips = 2;\\n\\n      module.exports = HtmlFileTransport;\\n    }, { \\\"./lib/ajax-based\\\": 24, \\\"./receiver/htmlfile\\\": 30, \\\"./sender/xhr-local\\\": 37, \\\"inherits\\\": 56 }], 22: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        // Few cool transports do work only for same-origin. In order to make\\n        // them work cross-domain we shall use iframe, served from the\\n        // remote domain. New browsers have capabilities to communicate with\\n        // cross domain iframe using postMessage(). In IE it was implemented\\n        // from IE 8+, but of course, IE got some details wrong:\\n        //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx\\n        //    http://stevesouders.com/misc/test-postmessage.php\\n\\n        var inherits = require('inherits'),\\n            JSON3 = require('json3'),\\n            EventEmitter = require('events').EventEmitter,\\n            version = require('../version'),\\n            urlUtils = require('../utils/url'),\\n            iframeUtils = require('../utils/iframe'),\\n            eventUtils = require('../utils/event'),\\n            random = require('../utils/random');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:transport:iframe');\\n        }\\n\\n        function IframeTransport(transport, transUrl, baseUrl) {\\n          if (!IframeTransport.enabled()) {\\n            throw new Error('Transport created when disabled');\\n          }\\n          EventEmitter.call(this);\\n\\n          var self = this;\\n          this.origin = urlUtils.getOrigin(baseUrl);\\n          this.baseUrl = baseUrl;\\n          this.transUrl = transUrl;\\n          this.transport = transport;\\n          this.windowId = random.string(8);\\n\\n          var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;\\n          debug(transport, transUrl, iframeUrl);\\n\\n          this.iframeObj = iframeUtils.createIframe(iframeUrl, function (r) {\\n            debug('err callback');\\n            self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');\\n            self.close();\\n          });\\n\\n          this.onmessageCallback = this._message.bind(this);\\n          eventUtils.attachEvent('message', this.onmessageCallback);\\n        }\\n\\n        inherits(IframeTransport, EventEmitter);\\n\\n        IframeTransport.prototype.close = function () {\\n          debug('close');\\n          this.removeAllListeners();\\n          if (this.iframeObj) {\\n            eventUtils.detachEvent('message', this.onmessageCallback);\\n            try {\\n              // When the iframe is not loaded, IE raises an exception\\n              // on 'contentWindow'.\\n              this.postMessage('c');\\n            } catch (x) {\\n              // intentionally empty\\n            }\\n            this.iframeObj.cleanup();\\n            this.iframeObj = null;\\n            this.onmessageCallback = this.iframeObj = null;\\n          }\\n        };\\n\\n        IframeTransport.prototype._message = function (e) {\\n          debug('message', e.data);\\n          if (!urlUtils.isOriginEqual(e.origin, this.origin)) {\\n            debug('not same origin', e.origin, this.origin);\\n            return;\\n          }\\n\\n          var iframeMessage;\\n          try {\\n            iframeMessage = JSON3.parse(e.data);\\n          } catch (ignored) {\\n            debug('bad json', e.data);\\n            return;\\n          }\\n\\n          if (iframeMessage.windowId !== this.windowId) {\\n            debug('mismatched window id', iframeMessage.windowId, this.windowId);\\n            return;\\n          }\\n\\n          switch (iframeMessage.type) {\\n            case 's':\\n              this.iframeObj.loaded();\\n              // window global dependency\\n              this.postMessage('s', JSON3.stringify([version, this.transport, this.transUrl, this.baseUrl]));\\n              break;\\n            case 't':\\n              this.emit('message', iframeMessage.data);\\n              break;\\n            case 'c':\\n              var cdata;\\n              try {\\n                cdata = JSON3.parse(iframeMessage.data);\\n              } catch (ignored) {\\n                debug('bad json', iframeMessage.data);\\n                return;\\n              }\\n              this.emit('close', cdata[0], cdata[1]);\\n              this.close();\\n              break;\\n          }\\n        };\\n\\n        IframeTransport.prototype.postMessage = function (type, data) {\\n          debug('postMessage', type, data);\\n          this.iframeObj.post(JSON3.stringify({\\n            windowId: this.windowId,\\n            type: type,\\n            data: data || ''\\n          }), this.origin);\\n        };\\n\\n        IframeTransport.prototype.send = function (message) {\\n          debug('send', message);\\n          this.postMessage('m', message);\\n        };\\n\\n        IframeTransport.enabled = function () {\\n          return iframeUtils.iframeEnabled;\\n        };\\n\\n        IframeTransport.transportName = 'iframe';\\n        IframeTransport.roundTrips = 2;\\n\\n        module.exports = IframeTransport;\\n      }).call(this, { env: {} });\\n    }, { \\\"../utils/event\\\": 46, \\\"../utils/iframe\\\": 47, \\\"../utils/random\\\": 50, \\\"../utils/url\\\": 52, \\\"../version\\\": 53, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56, \\\"json3\\\": 57 }], 23: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        // The simplest and most robust transport, using the well-know cross\\n        // domain hack - JSONP. This transport is quite inefficient - one\\n        // message could use up to one http request. But at least it works almost\\n        // everywhere.\\n        // Known limitations:\\n        //   o you will get a spinning cursor\\n        //   o for Konqueror a dumb timer is needed to detect errors\\n\\n        var inherits = require('inherits'),\\n            SenderReceiver = require('./lib/sender-receiver'),\\n            JsonpReceiver = require('./receiver/jsonp'),\\n            jsonpSender = require('./sender/jsonp');\\n\\n        function JsonPTransport(transUrl) {\\n          if (!JsonPTransport.enabled()) {\\n            throw new Error('Transport created when disabled');\\n          }\\n          SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);\\n        }\\n\\n        inherits(JsonPTransport, SenderReceiver);\\n\\n        JsonPTransport.enabled = function () {\\n          return !!global.document;\\n        };\\n\\n        JsonPTransport.transportName = 'jsonp-polling';\\n        JsonPTransport.roundTrips = 1;\\n        JsonPTransport.needBody = true;\\n\\n        module.exports = JsonPTransport;\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"./lib/sender-receiver\\\": 28, \\\"./receiver/jsonp\\\": 31, \\\"./sender/jsonp\\\": 33, \\\"inherits\\\": 56 }], 24: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            urlUtils = require('../../utils/url'),\\n            SenderReceiver = require('./sender-receiver');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:ajax-based');\\n        }\\n\\n        function createAjaxSender(AjaxObject) {\\n          return function (url, payload, callback) {\\n            debug('create ajax sender', url, payload);\\n            var opt = {};\\n            if (typeof payload === 'string') {\\n              opt.headers = { 'Content-type': 'text/plain' };\\n            }\\n            var ajaxUrl = urlUtils.addPath(url, '/xhr_send');\\n            var xo = new AjaxObject('POST', ajaxUrl, payload, opt);\\n            xo.once('finish', function (status) {\\n              debug('finish', status);\\n              xo = null;\\n\\n              if (status !== 200 && status !== 204) {\\n                return callback(new Error('http status ' + status));\\n              }\\n              callback();\\n            });\\n            return function () {\\n              debug('abort');\\n              xo.close();\\n              xo = null;\\n\\n              var err = new Error('Aborted');\\n              err.code = 1000;\\n              callback(err);\\n            };\\n          };\\n        }\\n\\n        function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {\\n          SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);\\n        }\\n\\n        inherits(AjaxBasedTransport, SenderReceiver);\\n\\n        module.exports = AjaxBasedTransport;\\n      }).call(this, { env: {} });\\n    }, { \\\"../../utils/url\\\": 52, \\\"./sender-receiver\\\": 28, \\\"debug\\\": 54, \\\"inherits\\\": 56 }], 25: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            EventEmitter = require('events').EventEmitter;\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:buffered-sender');\\n        }\\n\\n        function BufferedSender(url, sender) {\\n          debug(url);\\n          EventEmitter.call(this);\\n          this.sendBuffer = [];\\n          this.sender = sender;\\n          this.url = url;\\n        }\\n\\n        inherits(BufferedSender, EventEmitter);\\n\\n        BufferedSender.prototype.send = function (message) {\\n          debug('send', message);\\n          this.sendBuffer.push(message);\\n          if (!this.sendStop) {\\n            this.sendSchedule();\\n          }\\n        };\\n\\n        // For polling transports in a situation when in the message callback,\\n        // new message is being send. If the sending connection was started\\n        // before receiving one, it is possible to saturate the network and\\n        // timeout due to the lack of receiving socket. To avoid that we delay\\n        // sending messages by some small time, in order to let receiving\\n        // connection be started beforehand. This is only a halfmeasure and\\n        // does not fix the big problem, but it does make the tests go more\\n        // stable on slow networks.\\n        BufferedSender.prototype.sendScheduleWait = function () {\\n          debug('sendScheduleWait');\\n          var self = this;\\n          var tref;\\n          this.sendStop = function () {\\n            debug('sendStop');\\n            self.sendStop = null;\\n            clearTimeout(tref);\\n          };\\n          tref = setTimeout(function () {\\n            debug('timeout');\\n            self.sendStop = null;\\n            self.sendSchedule();\\n          }, 25);\\n        };\\n\\n        BufferedSender.prototype.sendSchedule = function () {\\n          debug('sendSchedule', this.sendBuffer.length);\\n          var self = this;\\n          if (this.sendBuffer.length > 0) {\\n            var payload = '[' + this.sendBuffer.join(',') + ']';\\n            this.sendStop = this.sender(this.url, payload, function (err) {\\n              self.sendStop = null;\\n              if (err) {\\n                debug('error', err);\\n                self.emit('close', err.code || 1006, 'Sending error: ' + err);\\n                self.close();\\n              } else {\\n                self.sendScheduleWait();\\n              }\\n            });\\n            this.sendBuffer = [];\\n          }\\n        };\\n\\n        BufferedSender.prototype._cleanup = function () {\\n          debug('_cleanup');\\n          this.removeAllListeners();\\n        };\\n\\n        BufferedSender.prototype.close = function () {\\n          debug('close');\\n          this._cleanup();\\n          if (this.sendStop) {\\n            this.sendStop();\\n            this.sendStop = null;\\n          }\\n        };\\n\\n        module.exports = BufferedSender;\\n      }).call(this, { env: {} });\\n    }, { \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 26: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            IframeTransport = require('../iframe'),\\n            objectUtils = require('../../utils/object');\\n\\n        module.exports = function (transport) {\\n\\n          function IframeWrapTransport(transUrl, baseUrl) {\\n            IframeTransport.call(this, transport.transportName, transUrl, baseUrl);\\n          }\\n\\n          inherits(IframeWrapTransport, IframeTransport);\\n\\n          IframeWrapTransport.enabled = function (url, info) {\\n            if (!global.document) {\\n              return false;\\n            }\\n\\n            var iframeInfo = objectUtils.extend({}, info);\\n            iframeInfo.sameOrigin = true;\\n            return transport.enabled(iframeInfo) && IframeTransport.enabled();\\n          };\\n\\n          IframeWrapTransport.transportName = 'iframe-' + transport.transportName;\\n          IframeWrapTransport.needBody = true;\\n          IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)\\n\\n          IframeWrapTransport.facadeTransport = transport;\\n\\n          return IframeWrapTransport;\\n        };\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"../../utils/object\\\": 49, \\\"../iframe\\\": 22, \\\"inherits\\\": 56 }], 27: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            EventEmitter = require('events').EventEmitter;\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:polling');\\n        }\\n\\n        function Polling(Receiver, receiveUrl, AjaxObject) {\\n          debug(receiveUrl);\\n          EventEmitter.call(this);\\n          this.Receiver = Receiver;\\n          this.receiveUrl = receiveUrl;\\n          this.AjaxObject = AjaxObject;\\n          this._scheduleReceiver();\\n        }\\n\\n        inherits(Polling, EventEmitter);\\n\\n        Polling.prototype._scheduleReceiver = function () {\\n          debug('_scheduleReceiver');\\n          var self = this;\\n          var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);\\n\\n          poll.on('message', function (msg) {\\n            debug('message', msg);\\n            self.emit('message', msg);\\n          });\\n\\n          poll.once('close', function (code, reason) {\\n            debug('close', code, reason, self.pollIsClosing);\\n            self.poll = poll = null;\\n\\n            if (!self.pollIsClosing) {\\n              if (reason === 'network') {\\n                self._scheduleReceiver();\\n              } else {\\n                self.emit('close', code || 1006, reason);\\n                self.removeAllListeners();\\n              }\\n            }\\n          });\\n        };\\n\\n        Polling.prototype.abort = function () {\\n          debug('abort');\\n          this.removeAllListeners();\\n          this.pollIsClosing = true;\\n          if (this.poll) {\\n            this.poll.abort();\\n          }\\n        };\\n\\n        module.exports = Polling;\\n      }).call(this, { env: {} });\\n    }, { \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 28: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            urlUtils = require('../../utils/url'),\\n            BufferedSender = require('./buffered-sender'),\\n            Polling = require('./polling');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:sender-receiver');\\n        }\\n\\n        function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {\\n          var pollUrl = urlUtils.addPath(transUrl, urlSuffix);\\n          debug(pollUrl);\\n          var self = this;\\n          BufferedSender.call(this, transUrl, senderFunc);\\n\\n          this.poll = new Polling(Receiver, pollUrl, AjaxObject);\\n          this.poll.on('message', function (msg) {\\n            debug('poll message', msg);\\n            self.emit('message', msg);\\n          });\\n          this.poll.once('close', function (code, reason) {\\n            debug('poll close', code, reason);\\n            self.poll = null;\\n            self.emit('close', code, reason);\\n            self.close();\\n          });\\n        }\\n\\n        inherits(SenderReceiver, BufferedSender);\\n\\n        SenderReceiver.prototype.close = function () {\\n          BufferedSender.prototype.close.call(this);\\n          debug('close');\\n          this.removeAllListeners();\\n          if (this.poll) {\\n            this.poll.abort();\\n            this.poll = null;\\n          }\\n        };\\n\\n        module.exports = SenderReceiver;\\n      }).call(this, { env: {} });\\n    }, { \\\"../../utils/url\\\": 52, \\\"./buffered-sender\\\": 25, \\\"./polling\\\": 27, \\\"debug\\\": 54, \\\"inherits\\\": 56 }], 29: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            EventEmitter = require('events').EventEmitter,\\n            EventSourceDriver = require('eventsource');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:receiver:eventsource');\\n        }\\n\\n        function EventSourceReceiver(url) {\\n          debug(url);\\n          EventEmitter.call(this);\\n\\n          var self = this;\\n          var es = this.es = new EventSourceDriver(url);\\n          es.onmessage = function (e) {\\n            debug('message', e.data);\\n            self.emit('message', decodeURI(e.data));\\n          };\\n          es.onerror = function (e) {\\n            debug('error', es.readyState, e);\\n            // ES on reconnection has readyState = 0 or 1.\\n            // on network error it's CLOSED = 2\\n            var reason = es.readyState !== 2 ? 'network' : 'permanent';\\n            self._cleanup();\\n            self._close(reason);\\n          };\\n        }\\n\\n        inherits(EventSourceReceiver, EventEmitter);\\n\\n        EventSourceReceiver.prototype.abort = function () {\\n          debug('abort');\\n          this._cleanup();\\n          this._close('user');\\n        };\\n\\n        EventSourceReceiver.prototype._cleanup = function () {\\n          debug('cleanup');\\n          var es = this.es;\\n          if (es) {\\n            es.onmessage = es.onerror = null;\\n            es.close();\\n            this.es = null;\\n          }\\n        };\\n\\n        EventSourceReceiver.prototype._close = function (reason) {\\n          debug('close', reason);\\n          var self = this;\\n          // Safari and chrome < 15 crash if we close window before\\n          // waiting for ES cleanup. See:\\n          // https://code.google.com/p/chromium/issues/detail?id=89155\\n          setTimeout(function () {\\n            self.emit('close', null, reason);\\n            self.removeAllListeners();\\n          }, 200);\\n        };\\n\\n        module.exports = EventSourceReceiver;\\n      }).call(this, { env: {} });\\n    }, { \\\"debug\\\": 54, \\\"events\\\": 3, \\\"eventsource\\\": 18, \\\"inherits\\\": 56 }], 30: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            iframeUtils = require('../../utils/iframe'),\\n            urlUtils = require('../../utils/url'),\\n            EventEmitter = require('events').EventEmitter,\\n            random = require('../../utils/random');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:receiver:htmlfile');\\n        }\\n\\n        function HtmlfileReceiver(url) {\\n          debug(url);\\n          EventEmitter.call(this);\\n          var self = this;\\n          iframeUtils.polluteGlobalNamespace();\\n\\n          this.id = 'a' + random.string(6);\\n          url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));\\n\\n          debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);\\n          var constructFunc = HtmlfileReceiver.htmlfileEnabled ? iframeUtils.createHtmlfile : iframeUtils.createIframe;\\n\\n          global[iframeUtils.WPrefix][this.id] = {\\n            start: function () {\\n              debug('start');\\n              self.iframeObj.loaded();\\n            },\\n            message: function (data) {\\n              debug('message', data);\\n              self.emit('message', data);\\n            },\\n            stop: function () {\\n              debug('stop');\\n              self._cleanup();\\n              self._close('network');\\n            }\\n          };\\n          this.iframeObj = constructFunc(url, function () {\\n            debug('callback');\\n            self._cleanup();\\n            self._close('permanent');\\n          });\\n        }\\n\\n        inherits(HtmlfileReceiver, EventEmitter);\\n\\n        HtmlfileReceiver.prototype.abort = function () {\\n          debug('abort');\\n          this._cleanup();\\n          this._close('user');\\n        };\\n\\n        HtmlfileReceiver.prototype._cleanup = function () {\\n          debug('_cleanup');\\n          if (this.iframeObj) {\\n            this.iframeObj.cleanup();\\n            this.iframeObj = null;\\n          }\\n          delete global[iframeUtils.WPrefix][this.id];\\n        };\\n\\n        HtmlfileReceiver.prototype._close = function (reason) {\\n          debug('_close', reason);\\n          this.emit('close', null, reason);\\n          this.removeAllListeners();\\n        };\\n\\n        HtmlfileReceiver.htmlfileEnabled = false;\\n\\n        // obfuscate to avoid firewalls\\n        var axo = ['Active'].concat('Object').join('X');\\n        if (axo in global) {\\n          try {\\n            HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');\\n          } catch (x) {\\n            // intentionally empty\\n          }\\n        }\\n\\n        HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;\\n\\n        module.exports = HtmlfileReceiver;\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"../../utils/iframe\\\": 47, \\\"../../utils/random\\\": 50, \\\"../../utils/url\\\": 52, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 31: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        var utils = require('../../utils/iframe'),\\n            random = require('../../utils/random'),\\n            browser = require('../../utils/browser'),\\n            urlUtils = require('../../utils/url'),\\n            inherits = require('inherits'),\\n            EventEmitter = require('events').EventEmitter;\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:receiver:jsonp');\\n        }\\n\\n        function JsonpReceiver(url) {\\n          debug(url);\\n          var self = this;\\n          EventEmitter.call(this);\\n\\n          utils.polluteGlobalNamespace();\\n\\n          this.id = 'a' + random.string(6);\\n          var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));\\n\\n          global[utils.WPrefix][this.id] = this._callback.bind(this);\\n          this._createScript(urlWithId);\\n\\n          // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.\\n          this.timeoutId = setTimeout(function () {\\n            debug('timeout');\\n            self._abort(new Error('JSONP script loaded abnormally (timeout)'));\\n          }, JsonpReceiver.timeout);\\n        }\\n\\n        inherits(JsonpReceiver, EventEmitter);\\n\\n        JsonpReceiver.prototype.abort = function () {\\n          debug('abort');\\n          if (global[utils.WPrefix][this.id]) {\\n            var err = new Error('JSONP user aborted read');\\n            err.code = 1000;\\n            this._abort(err);\\n          }\\n        };\\n\\n        JsonpReceiver.timeout = 35000;\\n        JsonpReceiver.scriptErrorTimeout = 1000;\\n\\n        JsonpReceiver.prototype._callback = function (data) {\\n          debug('_callback', data);\\n          this._cleanup();\\n\\n          if (this.aborting) {\\n            return;\\n          }\\n\\n          if (data) {\\n            debug('message', data);\\n            this.emit('message', data);\\n          }\\n          this.emit('close', null, 'network');\\n          this.removeAllListeners();\\n        };\\n\\n        JsonpReceiver.prototype._abort = function (err) {\\n          debug('_abort', err);\\n          this._cleanup();\\n          this.aborting = true;\\n          this.emit('close', err.code, err.message);\\n          this.removeAllListeners();\\n        };\\n\\n        JsonpReceiver.prototype._cleanup = function () {\\n          debug('_cleanup');\\n          clearTimeout(this.timeoutId);\\n          if (this.script2) {\\n            this.script2.parentNode.removeChild(this.script2);\\n            this.script2 = null;\\n          }\\n          if (this.script) {\\n            var script = this.script;\\n            // Unfortunately, you can't really abort script loading of\\n            // the script.\\n            script.parentNode.removeChild(script);\\n            script.onreadystatechange = script.onerror = script.onload = script.onclick = null;\\n            this.script = null;\\n          }\\n          delete global[utils.WPrefix][this.id];\\n        };\\n\\n        JsonpReceiver.prototype._scriptError = function () {\\n          debug('_scriptError');\\n          var self = this;\\n          if (this.errorTimer) {\\n            return;\\n          }\\n\\n          this.errorTimer = setTimeout(function () {\\n            if (!self.loadedOkay) {\\n              self._abort(new Error('JSONP script loaded abnormally (onerror)'));\\n            }\\n          }, JsonpReceiver.scriptErrorTimeout);\\n        };\\n\\n        JsonpReceiver.prototype._createScript = function (url) {\\n          debug('_createScript', url);\\n          var self = this;\\n          var script = this.script = global.document.createElement('script');\\n          var script2; // Opera synchronous load trick.\\n\\n          script.id = 'a' + random.string(8);\\n          script.src = url;\\n          script.type = 'text/javascript';\\n          script.charset = 'UTF-8';\\n          script.onerror = this._scriptError.bind(this);\\n          script.onload = function () {\\n            debug('onload');\\n            self._abort(new Error('JSONP script loaded abnormally (onload)'));\\n          };\\n\\n          // IE9 fires 'error' event after onreadystatechange or before, in random order.\\n          // Use loadedOkay to determine if actually errored\\n          script.onreadystatechange = function () {\\n            debug('onreadystatechange', script.readyState);\\n            if (/loaded|closed/.test(script.readyState)) {\\n              if (script && script.htmlFor && script.onclick) {\\n                self.loadedOkay = true;\\n                try {\\n                  // In IE, actually execute the script.\\n                  script.onclick();\\n                } catch (x) {\\n                  // intentionally empty\\n                }\\n              }\\n              if (script) {\\n                self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));\\n              }\\n            }\\n          };\\n          // IE: event/htmlFor/onclick trick.\\n          // One can't rely on proper order for onreadystatechange. In order to\\n          // make sure, set a 'htmlFor' and 'event' properties, so that\\n          // script code will be installed as 'onclick' handler for the\\n          // script object. Later, onreadystatechange, manually execute this\\n          // code. FF and Chrome doesn't work with 'event' and 'htmlFor'\\n          // set. For reference see:\\n          //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\\n          // Also, read on that about script ordering:\\n          //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order\\n          if (typeof script.async === 'undefined' && global.document.attachEvent) {\\n            // According to mozilla docs, in recent browsers script.async defaults\\n            // to 'true', so we may use it to detect a good browser:\\n            // https://developer.mozilla.org/en/HTML/Element/script\\n            if (!browser.isOpera()) {\\n              // Naively assume we're in IE\\n              try {\\n                script.htmlFor = script.id;\\n                script.event = 'onclick';\\n              } catch (x) {\\n                // intentionally empty\\n              }\\n              script.async = true;\\n            } else {\\n              // Opera, second sync script hack\\n              script2 = this.script2 = global.document.createElement('script');\\n              script2.text = \\\"try{var a = document.getElementById('\\\" + script.id + \\\"'); if(a)a.onerror();}catch(x){};\\\";\\n              script.async = script2.async = false;\\n            }\\n          }\\n          if (typeof script.async !== 'undefined') {\\n            script.async = true;\\n          }\\n\\n          var head = global.document.getElementsByTagName('head')[0];\\n          head.insertBefore(script, head.firstChild);\\n          if (script2) {\\n            head.insertBefore(script2, head.firstChild);\\n          }\\n        };\\n\\n        module.exports = JsonpReceiver;\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"../../utils/browser\\\": 44, \\\"../../utils/iframe\\\": 47, \\\"../../utils/random\\\": 50, \\\"../../utils/url\\\": 52, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 32: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            EventEmitter = require('events').EventEmitter;\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:receiver:xhr');\\n        }\\n\\n        function XhrReceiver(url, AjaxObject) {\\n          debug(url);\\n          EventEmitter.call(this);\\n          var self = this;\\n\\n          this.bufferPosition = 0;\\n\\n          this.xo = new AjaxObject('POST', url, null);\\n          this.xo.on('chunk', this._chunkHandler.bind(this));\\n          this.xo.once('finish', function (status, text) {\\n            debug('finish', status, text);\\n            self._chunkHandler(status, text);\\n            self.xo = null;\\n            var reason = status === 200 ? 'network' : 'permanent';\\n            debug('close', reason);\\n            self.emit('close', null, reason);\\n            self._cleanup();\\n          });\\n        }\\n\\n        inherits(XhrReceiver, EventEmitter);\\n\\n        XhrReceiver.prototype._chunkHandler = function (status, text) {\\n          debug('_chunkHandler', status);\\n          if (status !== 200 || !text) {\\n            return;\\n          }\\n\\n          for (var idx = -1;; this.bufferPosition += idx + 1) {\\n            var buf = text.slice(this.bufferPosition);\\n            idx = buf.indexOf('\\\\n');\\n            if (idx === -1) {\\n              break;\\n            }\\n            var msg = buf.slice(0, idx);\\n            if (msg) {\\n              debug('message', msg);\\n              this.emit('message', msg);\\n            }\\n          }\\n        };\\n\\n        XhrReceiver.prototype._cleanup = function () {\\n          debug('_cleanup');\\n          this.removeAllListeners();\\n        };\\n\\n        XhrReceiver.prototype.abort = function () {\\n          debug('abort');\\n          if (this.xo) {\\n            this.xo.close();\\n            debug('close');\\n            this.emit('close', null, 'user');\\n            this.xo = null;\\n          }\\n          this._cleanup();\\n        };\\n\\n        module.exports = XhrReceiver;\\n      }).call(this, { env: {} });\\n    }, { \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 33: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        var random = require('../../utils/random'),\\n            urlUtils = require('../../utils/url');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:sender:jsonp');\\n        }\\n\\n        var form, area;\\n\\n        function createIframe(id) {\\n          debug('createIframe', id);\\n          try {\\n            // ie6 dynamic iframes with target=\\\"\\\" support (thanks Chris Lambacher)\\n            return global.document.createElement('<iframe name=\\\"' + id + '\\\">');\\n          } catch (x) {\\n            var iframe = global.document.createElement('iframe');\\n            iframe.name = id;\\n            return iframe;\\n          }\\n        }\\n\\n        function createForm() {\\n          debug('createForm');\\n          form = global.document.createElement('form');\\n          form.style.display = 'none';\\n          form.style.position = 'absolute';\\n          form.method = 'POST';\\n          form.enctype = 'application/x-www-form-urlencoded';\\n          form.acceptCharset = 'UTF-8';\\n\\n          area = global.document.createElement('textarea');\\n          area.name = 'd';\\n          form.appendChild(area);\\n\\n          global.document.body.appendChild(form);\\n        }\\n\\n        module.exports = function (url, payload, callback) {\\n          debug(url, payload);\\n          if (!form) {\\n            createForm();\\n          }\\n          var id = 'a' + random.string(8);\\n          form.target = id;\\n          form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);\\n\\n          var iframe = createIframe(id);\\n          iframe.id = id;\\n          iframe.style.display = 'none';\\n          form.appendChild(iframe);\\n\\n          try {\\n            area.value = payload;\\n          } catch (e) {\\n            // seriously broken browsers get here\\n          }\\n          form.submit();\\n\\n          var completed = function (err) {\\n            debug('completed', id, err);\\n            if (!iframe.onerror) {\\n              return;\\n            }\\n            iframe.onreadystatechange = iframe.onerror = iframe.onload = null;\\n            // Opera mini doesn't like if we GC iframe\\n            // immediately, thus this timeout.\\n            setTimeout(function () {\\n              debug('cleaning up', id);\\n              iframe.parentNode.removeChild(iframe);\\n              iframe = null;\\n            }, 500);\\n            area.value = '';\\n            // It is not possible to detect if the iframe succeeded or\\n            // failed to submit our form.\\n            callback(err);\\n          };\\n          iframe.onerror = function () {\\n            debug('onerror', id);\\n            completed();\\n          };\\n          iframe.onload = function () {\\n            debug('onload', id);\\n            completed();\\n          };\\n          iframe.onreadystatechange = function (e) {\\n            debug('onreadystatechange', id, iframe.readyState, e);\\n            if (iframe.readyState === 'complete') {\\n              completed();\\n            }\\n          };\\n          return function () {\\n            debug('aborted', id);\\n            completed(new Error('Aborted'));\\n          };\\n        };\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"../../utils/random\\\": 50, \\\"../../utils/url\\\": 52, \\\"debug\\\": 54 }], 34: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        var EventEmitter = require('events').EventEmitter,\\n            inherits = require('inherits'),\\n            eventUtils = require('../../utils/event'),\\n            browser = require('../../utils/browser'),\\n            urlUtils = require('../../utils/url');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:sender:xdr');\\n        }\\n\\n        // References:\\n        //   http://ajaxian.com/archives/100-line-ajax-wrapper\\n        //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx\\n\\n        function XDRObject(method, url, payload) {\\n          debug(method, url);\\n          var self = this;\\n          EventEmitter.call(this);\\n\\n          setTimeout(function () {\\n            self._start(method, url, payload);\\n          }, 0);\\n        }\\n\\n        inherits(XDRObject, EventEmitter);\\n\\n        XDRObject.prototype._start = function (method, url, payload) {\\n          debug('_start');\\n          var self = this;\\n          var xdr = new global.XDomainRequest();\\n          // IE caches even POSTs\\n          url = urlUtils.addQuery(url, 't=' + +new Date());\\n\\n          xdr.onerror = function () {\\n            debug('onerror');\\n            self._error();\\n          };\\n          xdr.ontimeout = function () {\\n            debug('ontimeout');\\n            self._error();\\n          };\\n          xdr.onprogress = function () {\\n            debug('progress', xdr.responseText);\\n            self.emit('chunk', 200, xdr.responseText);\\n          };\\n          xdr.onload = function () {\\n            debug('load');\\n            self.emit('finish', 200, xdr.responseText);\\n            self._cleanup(false);\\n          };\\n          this.xdr = xdr;\\n          this.unloadRef = eventUtils.unloadAdd(function () {\\n            self._cleanup(true);\\n          });\\n          try {\\n            // Fails with AccessDenied if port number is bogus\\n            this.xdr.open(method, url);\\n            if (this.timeout) {\\n              this.xdr.timeout = this.timeout;\\n            }\\n            this.xdr.send(payload);\\n          } catch (x) {\\n            this._error();\\n          }\\n        };\\n\\n        XDRObject.prototype._error = function () {\\n          this.emit('finish', 0, '');\\n          this._cleanup(false);\\n        };\\n\\n        XDRObject.prototype._cleanup = function (abort) {\\n          debug('cleanup', abort);\\n          if (!this.xdr) {\\n            return;\\n          }\\n          this.removeAllListeners();\\n          eventUtils.unloadDel(this.unloadRef);\\n\\n          this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;\\n          if (abort) {\\n            try {\\n              this.xdr.abort();\\n            } catch (x) {\\n              // intentionally empty\\n            }\\n          }\\n          this.unloadRef = this.xdr = null;\\n        };\\n\\n        XDRObject.prototype.close = function () {\\n          debug('close');\\n          this._cleanup(true);\\n        };\\n\\n        // IE 8/9 if the request target uses the same scheme - #79\\n        XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());\\n\\n        module.exports = XDRObject;\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"../../utils/browser\\\": 44, \\\"../../utils/event\\\": 46, \\\"../../utils/url\\\": 52, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 35: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          XhrDriver = require('../driver/xhr');\\n\\n      function XHRCorsObject(method, url, payload, opts) {\\n        XhrDriver.call(this, method, url, payload, opts);\\n      }\\n\\n      inherits(XHRCorsObject, XhrDriver);\\n\\n      XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;\\n\\n      module.exports = XHRCorsObject;\\n    }, { \\\"../driver/xhr\\\": 17, \\\"inherits\\\": 56 }], 36: [function (require, module, exports) {\\n      'use strict';\\n\\n      var EventEmitter = require('events').EventEmitter,\\n          inherits = require('inherits');\\n\\n      function XHRFake() /* method, url, payload, opts */{\\n        var self = this;\\n        EventEmitter.call(this);\\n\\n        this.to = setTimeout(function () {\\n          self.emit('finish', 200, '{}');\\n        }, XHRFake.timeout);\\n      }\\n\\n      inherits(XHRFake, EventEmitter);\\n\\n      XHRFake.prototype.close = function () {\\n        clearTimeout(this.to);\\n      };\\n\\n      XHRFake.timeout = 2000;\\n\\n      module.exports = XHRFake;\\n    }, { \\\"events\\\": 3, \\\"inherits\\\": 56 }], 37: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          XhrDriver = require('../driver/xhr');\\n\\n      function XHRLocalObject(method, url, payload /*, opts */) {\\n        XhrDriver.call(this, method, url, payload, {\\n          noCredentials: true\\n        });\\n      }\\n\\n      inherits(XHRLocalObject, XhrDriver);\\n\\n      XHRLocalObject.enabled = XhrDriver.enabled;\\n\\n      module.exports = XHRLocalObject;\\n    }, { \\\"../driver/xhr\\\": 17, \\\"inherits\\\": 56 }], 38: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var utils = require('../utils/event'),\\n            urlUtils = require('../utils/url'),\\n            inherits = require('inherits'),\\n            EventEmitter = require('events').EventEmitter,\\n            WebsocketDriver = require('./driver/websocket');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:websocket');\\n        }\\n\\n        function WebSocketTransport(transUrl, ignore, options) {\\n          if (!WebSocketTransport.enabled()) {\\n            throw new Error('Transport created when disabled');\\n          }\\n\\n          EventEmitter.call(this);\\n          debug('constructor', transUrl);\\n\\n          var self = this;\\n          var url = urlUtils.addPath(transUrl, '/websocket');\\n          if (url.slice(0, 5) === 'https') {\\n            url = 'wss' + url.slice(5);\\n          } else {\\n            url = 'ws' + url.slice(4);\\n          }\\n          this.url = url;\\n\\n          this.ws = new WebsocketDriver(this.url, [], options);\\n          this.ws.onmessage = function (e) {\\n            debug('message event', e.data);\\n            self.emit('message', e.data);\\n          };\\n          // Firefox has an interesting bug. If a websocket connection is\\n          // created after onunload, it stays alive even when user\\n          // navigates away from the page. In such situation let's lie -\\n          // let's not open the ws connection at all. See:\\n          // https://github.com/sockjs/sockjs-client/issues/28\\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=696085\\n          this.unloadRef = utils.unloadAdd(function () {\\n            debug('unload');\\n            self.ws.close();\\n          });\\n          this.ws.onclose = function (e) {\\n            debug('close event', e.code, e.reason);\\n            self.emit('close', e.code, e.reason);\\n            self._cleanup();\\n          };\\n          this.ws.onerror = function (e) {\\n            debug('error event', e);\\n            self.emit('close', 1006, 'WebSocket connection broken');\\n            self._cleanup();\\n          };\\n        }\\n\\n        inherits(WebSocketTransport, EventEmitter);\\n\\n        WebSocketTransport.prototype.send = function (data) {\\n          var msg = '[' + data + ']';\\n          debug('send', msg);\\n          this.ws.send(msg);\\n        };\\n\\n        WebSocketTransport.prototype.close = function () {\\n          debug('close');\\n          var ws = this.ws;\\n          this._cleanup();\\n          if (ws) {\\n            ws.close();\\n          }\\n        };\\n\\n        WebSocketTransport.prototype._cleanup = function () {\\n          debug('_cleanup');\\n          var ws = this.ws;\\n          if (ws) {\\n            ws.onmessage = ws.onclose = ws.onerror = null;\\n          }\\n          utils.unloadDel(this.unloadRef);\\n          this.unloadRef = this.ws = null;\\n          this.removeAllListeners();\\n        };\\n\\n        WebSocketTransport.enabled = function () {\\n          debug('enabled');\\n          return !!WebsocketDriver;\\n        };\\n        WebSocketTransport.transportName = 'websocket';\\n\\n        // In theory, ws should require 1 round trip. But in chrome, this is\\n        // not very stable over SSL. Most likely a ws connection requires a\\n        // separate SSL connection, in which case 2 round trips are an\\n        // absolute minumum.\\n        WebSocketTransport.roundTrips = 2;\\n\\n        module.exports = WebSocketTransport;\\n      }).call(this, { env: {} });\\n    }, { \\\"../utils/event\\\": 46, \\\"../utils/url\\\": 52, \\\"./driver/websocket\\\": 19, \\\"debug\\\": 54, \\\"events\\\": 3, \\\"inherits\\\": 56 }], 39: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          AjaxBasedTransport = require('./lib/ajax-based'),\\n          XdrStreamingTransport = require('./xdr-streaming'),\\n          XhrReceiver = require('./receiver/xhr'),\\n          XDRObject = require('./sender/xdr');\\n\\n      function XdrPollingTransport(transUrl) {\\n        if (!XDRObject.enabled) {\\n          throw new Error('Transport created when disabled');\\n        }\\n        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);\\n      }\\n\\n      inherits(XdrPollingTransport, AjaxBasedTransport);\\n\\n      XdrPollingTransport.enabled = XdrStreamingTransport.enabled;\\n      XdrPollingTransport.transportName = 'xdr-polling';\\n      XdrPollingTransport.roundTrips = 2; // preflight, ajax\\n\\n      module.exports = XdrPollingTransport;\\n    }, { \\\"./lib/ajax-based\\\": 24, \\\"./receiver/xhr\\\": 32, \\\"./sender/xdr\\\": 34, \\\"./xdr-streaming\\\": 40, \\\"inherits\\\": 56 }], 40: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          AjaxBasedTransport = require('./lib/ajax-based'),\\n          XhrReceiver = require('./receiver/xhr'),\\n          XDRObject = require('./sender/xdr');\\n\\n      // According to:\\n      //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests\\n      //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/\\n\\n      function XdrStreamingTransport(transUrl) {\\n        if (!XDRObject.enabled) {\\n          throw new Error('Transport created when disabled');\\n        }\\n        AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);\\n      }\\n\\n      inherits(XdrStreamingTransport, AjaxBasedTransport);\\n\\n      XdrStreamingTransport.enabled = function (info) {\\n        if (info.cookie_needed || info.nullOrigin) {\\n          return false;\\n        }\\n        return XDRObject.enabled && info.sameScheme;\\n      };\\n\\n      XdrStreamingTransport.transportName = 'xdr-streaming';\\n      XdrStreamingTransport.roundTrips = 2; // preflight, ajax\\n\\n      module.exports = XdrStreamingTransport;\\n    }, { \\\"./lib/ajax-based\\\": 24, \\\"./receiver/xhr\\\": 32, \\\"./sender/xdr\\\": 34, \\\"inherits\\\": 56 }], 41: [function (require, module, exports) {\\n      'use strict';\\n\\n      var inherits = require('inherits'),\\n          AjaxBasedTransport = require('./lib/ajax-based'),\\n          XhrReceiver = require('./receiver/xhr'),\\n          XHRCorsObject = require('./sender/xhr-cors'),\\n          XHRLocalObject = require('./sender/xhr-local');\\n\\n      function XhrPollingTransport(transUrl) {\\n        if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {\\n          throw new Error('Transport created when disabled');\\n        }\\n        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);\\n      }\\n\\n      inherits(XhrPollingTransport, AjaxBasedTransport);\\n\\n      XhrPollingTransport.enabled = function (info) {\\n        if (info.nullOrigin) {\\n          return false;\\n        }\\n\\n        if (XHRLocalObject.enabled && info.sameOrigin) {\\n          return true;\\n        }\\n        return XHRCorsObject.enabled;\\n      };\\n\\n      XhrPollingTransport.transportName = 'xhr-polling';\\n      XhrPollingTransport.roundTrips = 2; // preflight, ajax\\n\\n      module.exports = XhrPollingTransport;\\n    }, { \\\"./lib/ajax-based\\\": 24, \\\"./receiver/xhr\\\": 32, \\\"./sender/xhr-cors\\\": 35, \\\"./sender/xhr-local\\\": 37, \\\"inherits\\\": 56 }], 42: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        var inherits = require('inherits'),\\n            AjaxBasedTransport = require('./lib/ajax-based'),\\n            XhrReceiver = require('./receiver/xhr'),\\n            XHRCorsObject = require('./sender/xhr-cors'),\\n            XHRLocalObject = require('./sender/xhr-local'),\\n            browser = require('../utils/browser');\\n\\n        function XhrStreamingTransport(transUrl) {\\n          if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {\\n            throw new Error('Transport created when disabled');\\n          }\\n          AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);\\n        }\\n\\n        inherits(XhrStreamingTransport, AjaxBasedTransport);\\n\\n        XhrStreamingTransport.enabled = function (info) {\\n          if (info.nullOrigin) {\\n            return false;\\n          }\\n          // Opera doesn't support xhr-streaming #60\\n          // But it might be able to #92\\n          if (browser.isOpera()) {\\n            return false;\\n          }\\n\\n          return XHRCorsObject.enabled;\\n        };\\n\\n        XhrStreamingTransport.transportName = 'xhr-streaming';\\n        XhrStreamingTransport.roundTrips = 2; // preflight, ajax\\n\\n        // Safari gets confused when a streaming ajax request is started\\n        // before onload. This causes the load indicator to spin indefinetely.\\n        // Only require body when used in a browser\\n        XhrStreamingTransport.needBody = !!global.document;\\n\\n        module.exports = XhrStreamingTransport;\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"../utils/browser\\\": 44, \\\"./lib/ajax-based\\\": 24, \\\"./receiver/xhr\\\": 32, \\\"./sender/xhr-cors\\\": 35, \\\"./sender/xhr-local\\\": 37, \\\"inherits\\\": 56 }], 43: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        if (global.crypto && global.crypto.getRandomValues) {\\n          module.exports.randomBytes = function (length) {\\n            var bytes = new Uint8Array(length);\\n            global.crypto.getRandomValues(bytes);\\n            return bytes;\\n          };\\n        } else {\\n          module.exports.randomBytes = function (length) {\\n            var bytes = new Array(length);\\n            for (var i = 0; i < length; i++) {\\n              bytes[i] = Math.floor(Math.random() * 256);\\n            }\\n            return bytes;\\n          };\\n        }\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, {}], 44: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        module.exports = {\\n          isOpera: function () {\\n            return global.navigator && /opera/i.test(global.navigator.userAgent);\\n          },\\n\\n          isKonqueror: function () {\\n            return global.navigator && /konqueror/i.test(global.navigator.userAgent);\\n          }\\n\\n          // #187 wrap document.domain in try/catch because of WP8 from file:///\\n          , hasDomain: function () {\\n            // non-browser client always has a domain\\n            if (!global.document) {\\n              return true;\\n            }\\n\\n            try {\\n              return !!global.document.domain;\\n            } catch (e) {\\n              return false;\\n            }\\n          }\\n        };\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, {}], 45: [function (require, module, exports) {\\n      'use strict';\\n\\n      var JSON3 = require('json3');\\n\\n      // Some extra characters that Chrome gets wrong, and substitutes with\\n      // something else on the wire.\\n      // eslint-disable-next-line no-control-regex\\n      var extraEscapable = /[\\\\x00-\\\\x1f\\\\ud800-\\\\udfff\\\\ufffe\\\\uffff\\\\u0300-\\\\u0333\\\\u033d-\\\\u0346\\\\u034a-\\\\u034c\\\\u0350-\\\\u0352\\\\u0357-\\\\u0358\\\\u035c-\\\\u0362\\\\u0374\\\\u037e\\\\u0387\\\\u0591-\\\\u05af\\\\u05c4\\\\u0610-\\\\u0617\\\\u0653-\\\\u0654\\\\u0657-\\\\u065b\\\\u065d-\\\\u065e\\\\u06df-\\\\u06e2\\\\u06eb-\\\\u06ec\\\\u0730\\\\u0732-\\\\u0733\\\\u0735-\\\\u0736\\\\u073a\\\\u073d\\\\u073f-\\\\u0741\\\\u0743\\\\u0745\\\\u0747\\\\u07eb-\\\\u07f1\\\\u0951\\\\u0958-\\\\u095f\\\\u09dc-\\\\u09dd\\\\u09df\\\\u0a33\\\\u0a36\\\\u0a59-\\\\u0a5b\\\\u0a5e\\\\u0b5c-\\\\u0b5d\\\\u0e38-\\\\u0e39\\\\u0f43\\\\u0f4d\\\\u0f52\\\\u0f57\\\\u0f5c\\\\u0f69\\\\u0f72-\\\\u0f76\\\\u0f78\\\\u0f80-\\\\u0f83\\\\u0f93\\\\u0f9d\\\\u0fa2\\\\u0fa7\\\\u0fac\\\\u0fb9\\\\u1939-\\\\u193a\\\\u1a17\\\\u1b6b\\\\u1cda-\\\\u1cdb\\\\u1dc0-\\\\u1dcf\\\\u1dfc\\\\u1dfe\\\\u1f71\\\\u1f73\\\\u1f75\\\\u1f77\\\\u1f79\\\\u1f7b\\\\u1f7d\\\\u1fbb\\\\u1fbe\\\\u1fc9\\\\u1fcb\\\\u1fd3\\\\u1fdb\\\\u1fe3\\\\u1feb\\\\u1fee-\\\\u1fef\\\\u1ff9\\\\u1ffb\\\\u1ffd\\\\u2000-\\\\u2001\\\\u20d0-\\\\u20d1\\\\u20d4-\\\\u20d7\\\\u20e7-\\\\u20e9\\\\u2126\\\\u212a-\\\\u212b\\\\u2329-\\\\u232a\\\\u2adc\\\\u302b-\\\\u302c\\\\uaab2-\\\\uaab3\\\\uf900-\\\\ufa0d\\\\ufa10\\\\ufa12\\\\ufa15-\\\\ufa1e\\\\ufa20\\\\ufa22\\\\ufa25-\\\\ufa26\\\\ufa2a-\\\\ufa2d\\\\ufa30-\\\\ufa6d\\\\ufa70-\\\\ufad9\\\\ufb1d\\\\ufb1f\\\\ufb2a-\\\\ufb36\\\\ufb38-\\\\ufb3c\\\\ufb3e\\\\ufb40-\\\\ufb41\\\\ufb43-\\\\ufb44\\\\ufb46-\\\\ufb4e\\\\ufff0-\\\\uffff]/g,\\n          extraLookup;\\n\\n      // This may be quite slow, so let's delay until user actually uses bad\\n      // characters.\\n      var unrollLookup = function (escapable) {\\n        var i;\\n        var unrolled = {};\\n        var c = [];\\n        for (i = 0; i < 65536; i++) {\\n          c.push(String.fromCharCode(i));\\n        }\\n        escapable.lastIndex = 0;\\n        c.join('').replace(escapable, function (a) {\\n          unrolled[a] = '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\\n          return '';\\n        });\\n        escapable.lastIndex = 0;\\n        return unrolled;\\n      };\\n\\n      // Quote string, also taking care of unicode characters that browsers\\n      // often break. Especially, take care of unicode surrogates:\\n      // http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates\\n      module.exports = {\\n        quote: function (string) {\\n          var quoted = JSON3.stringify(string);\\n\\n          // In most cases this should be very fast and good enough.\\n          extraEscapable.lastIndex = 0;\\n          if (!extraEscapable.test(quoted)) {\\n            return quoted;\\n          }\\n\\n          if (!extraLookup) {\\n            extraLookup = unrollLookup(extraEscapable);\\n          }\\n\\n          return quoted.replace(extraEscapable, function (a) {\\n            return extraLookup[a];\\n          });\\n        }\\n      };\\n    }, { \\\"json3\\\": 57 }], 46: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        var random = require('./random');\\n\\n        var onUnload = {},\\n            afterUnload = false\\n        // detect google chrome packaged apps because they don't allow the 'unload' event\\n        ,\\n            isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime;\\n\\n        module.exports = {\\n          attachEvent: function (event, listener) {\\n            if (typeof global.addEventListener !== 'undefined') {\\n              global.addEventListener(event, listener, false);\\n            } else if (global.document && global.attachEvent) {\\n              // IE quirks.\\n              // According to: http://stevesouders.com/misc/test-postmessage.php\\n              // the message gets delivered only to 'document', not 'window'.\\n              global.document.attachEvent('on' + event, listener);\\n              // I get 'window' for ie8.\\n              global.attachEvent('on' + event, listener);\\n            }\\n          },\\n\\n          detachEvent: function (event, listener) {\\n            if (typeof global.addEventListener !== 'undefined') {\\n              global.removeEventListener(event, listener, false);\\n            } else if (global.document && global.detachEvent) {\\n              global.document.detachEvent('on' + event, listener);\\n              global.detachEvent('on' + event, listener);\\n            }\\n          },\\n\\n          unloadAdd: function (listener) {\\n            if (isChromePackagedApp) {\\n              return null;\\n            }\\n\\n            var ref = random.string(8);\\n            onUnload[ref] = listener;\\n            if (afterUnload) {\\n              setTimeout(this.triggerUnloadCallbacks, 0);\\n            }\\n            return ref;\\n          },\\n\\n          unloadDel: function (ref) {\\n            if (ref in onUnload) {\\n              delete onUnload[ref];\\n            }\\n          },\\n\\n          triggerUnloadCallbacks: function () {\\n            for (var ref in onUnload) {\\n              onUnload[ref]();\\n              delete onUnload[ref];\\n            }\\n          }\\n        };\\n\\n        var unloadTriggered = function () {\\n          if (afterUnload) {\\n            return;\\n          }\\n          afterUnload = true;\\n          module.exports.triggerUnloadCallbacks();\\n        };\\n\\n        // 'unload' alone is not reliable in opera within an iframe, but we\\n        // can't use `beforeunload` as IE fires it on javascript: links.\\n        if (!isChromePackagedApp) {\\n          module.exports.attachEvent('unload', unloadTriggered);\\n        }\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"./random\\\": 50 }], 47: [function (require, module, exports) {\\n      (function (process, global) {\\n        'use strict';\\n\\n        var eventUtils = require('./event'),\\n            JSON3 = require('json3'),\\n            browser = require('./browser');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:utils:iframe');\\n        }\\n\\n        module.exports = {\\n          WPrefix: '_jp',\\n          currentWindowId: null,\\n\\n          polluteGlobalNamespace: function () {\\n            if (!(module.exports.WPrefix in global)) {\\n              global[module.exports.WPrefix] = {};\\n            }\\n          },\\n\\n          postMessage: function (type, data) {\\n            if (global.parent !== global) {\\n              global.parent.postMessage(JSON3.stringify({\\n                windowId: module.exports.currentWindowId,\\n                type: type,\\n                data: data || ''\\n              }), '*');\\n            } else {\\n              debug('Cannot postMessage, no parent window.', type, data);\\n            }\\n          },\\n\\n          createIframe: function (iframeUrl, errorCallback) {\\n            var iframe = global.document.createElement('iframe');\\n            var tref, unloadRef;\\n            var unattach = function () {\\n              debug('unattach');\\n              clearTimeout(tref);\\n              // Explorer had problems with that.\\n              try {\\n                iframe.onload = null;\\n              } catch (x) {\\n                // intentionally empty\\n              }\\n              iframe.onerror = null;\\n            };\\n            var cleanup = function () {\\n              debug('cleanup');\\n              if (iframe) {\\n                unattach();\\n                // This timeout makes chrome fire onbeforeunload event\\n                // within iframe. Without the timeout it goes straight to\\n                // onunload.\\n                setTimeout(function () {\\n                  if (iframe) {\\n                    iframe.parentNode.removeChild(iframe);\\n                  }\\n                  iframe = null;\\n                }, 0);\\n                eventUtils.unloadDel(unloadRef);\\n              }\\n            };\\n            var onerror = function (err) {\\n              debug('onerror', err);\\n              if (iframe) {\\n                cleanup();\\n                errorCallback(err);\\n              }\\n            };\\n            var post = function (msg, origin) {\\n              debug('post', msg, origin);\\n              setTimeout(function () {\\n                try {\\n                  // When the iframe is not loaded, IE raises an exception\\n                  // on 'contentWindow'.\\n                  if (iframe && iframe.contentWindow) {\\n                    iframe.contentWindow.postMessage(msg, origin);\\n                  }\\n                } catch (x) {\\n                  // intentionally empty\\n                }\\n              }, 0);\\n            };\\n\\n            iframe.src = iframeUrl;\\n            iframe.style.display = 'none';\\n            iframe.style.position = 'absolute';\\n            iframe.onerror = function () {\\n              onerror('onerror');\\n            };\\n            iframe.onload = function () {\\n              debug('onload');\\n              // `onload` is triggered before scripts on the iframe are\\n              // executed. Give it few seconds to actually load stuff.\\n              clearTimeout(tref);\\n              tref = setTimeout(function () {\\n                onerror('onload timeout');\\n              }, 2000);\\n            };\\n            global.document.body.appendChild(iframe);\\n            tref = setTimeout(function () {\\n              onerror('timeout');\\n            }, 15000);\\n            unloadRef = eventUtils.unloadAdd(cleanup);\\n            return {\\n              post: post,\\n              cleanup: cleanup,\\n              loaded: unattach\\n            };\\n          }\\n\\n          /* eslint no-undef: \\\"off\\\", new-cap: \\\"off\\\" */\\n          , createHtmlfile: function (iframeUrl, errorCallback) {\\n            var axo = ['Active'].concat('Object').join('X');\\n            var doc = new global[axo]('htmlfile');\\n            var tref, unloadRef;\\n            var iframe;\\n            var unattach = function () {\\n              clearTimeout(tref);\\n              iframe.onerror = null;\\n            };\\n            var cleanup = function () {\\n              if (doc) {\\n                unattach();\\n                eventUtils.unloadDel(unloadRef);\\n                iframe.parentNode.removeChild(iframe);\\n                iframe = doc = null;\\n                CollectGarbage();\\n              }\\n            };\\n            var onerror = function (r) {\\n              debug('onerror', r);\\n              if (doc) {\\n                cleanup();\\n                errorCallback(r);\\n              }\\n            };\\n            var post = function (msg, origin) {\\n              try {\\n                // When the iframe is not loaded, IE raises an exception\\n                // on 'contentWindow'.\\n                setTimeout(function () {\\n                  if (iframe && iframe.contentWindow) {\\n                    iframe.contentWindow.postMessage(msg, origin);\\n                  }\\n                }, 0);\\n              } catch (x) {\\n                // intentionally empty\\n              }\\n            };\\n\\n            doc.open();\\n            doc.write('<html><s' + 'cript>' + 'document.domain=\\\"' + global.document.domain + '\\\";' + '</s' + 'cript></html>');\\n            doc.close();\\n            doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];\\n            var c = doc.createElement('div');\\n            doc.body.appendChild(c);\\n            iframe = doc.createElement('iframe');\\n            c.appendChild(iframe);\\n            iframe.src = iframeUrl;\\n            iframe.onerror = function () {\\n              onerror('onerror');\\n            };\\n            tref = setTimeout(function () {\\n              onerror('timeout');\\n            }, 15000);\\n            unloadRef = eventUtils.unloadAdd(cleanup);\\n            return {\\n              post: post,\\n              cleanup: cleanup,\\n              loaded: unattach\\n            };\\n          }\\n        };\\n\\n        module.exports.iframeEnabled = false;\\n        if (global.document) {\\n          // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with\\n          // huge delay, or not at all.\\n          module.exports.iframeEnabled = (typeof global.postMessage === 'function' || typeof global.postMessage === 'object') && !browser.isKonqueror();\\n        }\\n      }).call(this, { env: {} }, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"./browser\\\": 44, \\\"./event\\\": 46, \\\"debug\\\": 54, \\\"json3\\\": 57 }], 48: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        var logObject = {};\\n        ['log', 'debug', 'warn'].forEach(function (level) {\\n          var levelExists;\\n\\n          try {\\n            levelExists = global.console && global.console[level] && global.console[level].apply;\\n          } catch (e) {\\n            // do nothing\\n          }\\n\\n          logObject[level] = levelExists ? function () {\\n            return global.console[level].apply(global.console, arguments);\\n          } : level === 'log' ? function () {} : logObject.log;\\n        });\\n\\n        module.exports = logObject;\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, {}], 49: [function (require, module, exports) {\\n      'use strict';\\n\\n      module.exports = {\\n        isObject: function (obj) {\\n          var type = typeof obj;\\n          return type === 'function' || type === 'object' && !!obj;\\n        },\\n\\n        extend: function (obj) {\\n          if (!this.isObject(obj)) {\\n            return obj;\\n          }\\n          var source, prop;\\n          for (var i = 1, length = arguments.length; i < length; i++) {\\n            source = arguments[i];\\n            for (prop in source) {\\n              if (Object.prototype.hasOwnProperty.call(source, prop)) {\\n                obj[prop] = source[prop];\\n              }\\n            }\\n          }\\n          return obj;\\n        }\\n      };\\n    }, {}], 50: [function (require, module, exports) {\\n      'use strict';\\n\\n      /* global crypto:true */\\n\\n      var crypto = require('crypto');\\n\\n      // This string has length 32, a power of 2, so the modulus doesn't introduce a\\n      // bias.\\n      var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';\\n      module.exports = {\\n        string: function (length) {\\n          var max = _randomStringChars.length;\\n          var bytes = crypto.randomBytes(length);\\n          var ret = [];\\n          for (var i = 0; i < length; i++) {\\n            ret.push(_randomStringChars.substr(bytes[i] % max, 1));\\n          }\\n          return ret.join('');\\n        },\\n\\n        number: function (max) {\\n          return Math.floor(Math.random() * max);\\n        },\\n\\n        numberString: function (max) {\\n          var t = ('' + (max - 1)).length;\\n          var p = new Array(t + 1).join('0');\\n          return (p + this.number(max)).slice(-t);\\n        }\\n      };\\n    }, { \\\"crypto\\\": 43 }], 51: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:utils:transport');\\n        }\\n\\n        module.exports = function (availableTransports) {\\n          return {\\n            filterToEnabled: function (transportsWhitelist, info) {\\n              var transports = {\\n                main: [],\\n                facade: []\\n              };\\n              if (!transportsWhitelist) {\\n                transportsWhitelist = [];\\n              } else if (typeof transportsWhitelist === 'string') {\\n                transportsWhitelist = [transportsWhitelist];\\n              }\\n\\n              availableTransports.forEach(function (trans) {\\n                if (!trans) {\\n                  return;\\n                }\\n\\n                if (trans.transportName === 'websocket' && info.websocket === false) {\\n                  debug('disabled from server', 'websocket');\\n                  return;\\n                }\\n\\n                if (transportsWhitelist.length && transportsWhitelist.indexOf(trans.transportName) === -1) {\\n                  debug('not in whitelist', trans.transportName);\\n                  return;\\n                }\\n\\n                if (trans.enabled(info)) {\\n                  debug('enabled', trans.transportName);\\n                  transports.main.push(trans);\\n                  if (trans.facadeTransport) {\\n                    transports.facade.push(trans.facadeTransport);\\n                  }\\n                } else {\\n                  debug('disabled', trans.transportName);\\n                }\\n              });\\n              return transports;\\n            }\\n          };\\n        };\\n      }).call(this, { env: {} });\\n    }, { \\\"debug\\\": 54 }], 52: [function (require, module, exports) {\\n      (function (process) {\\n        'use strict';\\n\\n        var URL = require('url-parse');\\n\\n        var debug = function () {};\\n        if (process.env.NODE_ENV !== 'production') {\\n          debug = require('debug')('sockjs-client:utils:url');\\n        }\\n\\n        module.exports = {\\n          getOrigin: function (url) {\\n            if (!url) {\\n              return null;\\n            }\\n\\n            var p = new URL(url);\\n            if (p.protocol === 'file:') {\\n              return null;\\n            }\\n\\n            var port = p.port;\\n            if (!port) {\\n              port = p.protocol === 'https:' ? '443' : '80';\\n            }\\n\\n            return p.protocol + '//' + p.hostname + ':' + port;\\n          },\\n\\n          isOriginEqual: function (a, b) {\\n            var res = this.getOrigin(a) === this.getOrigin(b);\\n            debug('same', a, b, res);\\n            return res;\\n          },\\n\\n          isSchemeEqual: function (a, b) {\\n            return a.split(':')[0] === b.split(':')[0];\\n          },\\n\\n          addPath: function (url, path) {\\n            var qs = url.split('?');\\n            return qs[0] + path + (qs[1] ? '?' + qs[1] : '');\\n          },\\n\\n          addQuery: function (url, q) {\\n            return url + (url.indexOf('?') === -1 ? '?' + q : '&' + q);\\n          }\\n        };\\n      }).call(this, { env: {} });\\n    }, { \\\"debug\\\": 54, \\\"url-parse\\\": 61 }], 53: [function (require, module, exports) {\\n      module.exports = '1.1.5';\\n    }, {}], 54: [function (require, module, exports) {\\n      (function (process) {\\n        /**\\r\\n         * This is the web browser implementation of `debug()`.\\r\\n         *\\r\\n         * Expose `debug()` as the module.\\r\\n         */\\n\\n        exports = module.exports = require('./debug');\\n        exports.log = log;\\n        exports.formatArgs = formatArgs;\\n        exports.save = save;\\n        exports.load = load;\\n        exports.useColors = useColors;\\n        exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();\\n\\n        /**\\r\\n         * Colors.\\r\\n         */\\n\\n        exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];\\n\\n        /**\\r\\n         * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\r\\n         * and the Firebug extension (any Firefox version) are known\\r\\n         * to support \\\"%c\\\" CSS customizations.\\r\\n         *\\r\\n         * TODO: add a `localStorage` variable to explicitly enable/disable colors\\r\\n         */\\n\\n        function useColors() {\\n          // NB: In an Electron preload script, document will be defined but not fully\\n          // initialized. Since we know we're in Chrome, we'll just detect this case\\n          // explicitly\\n          if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\\n            return true;\\n          }\\n\\n          // is webkit? http://stackoverflow.com/a/16459606/376773\\n          // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\\n          return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||\\n          // is firebug? http://stackoverflow.com/a/398120/376773\\n          typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||\\n          // is firefox >= v31?\\n          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||\\n          // double check webkit in userAgent just in case we are in a worker\\n          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\\\/(\\\\d+)/);\\n        }\\n\\n        /**\\r\\n         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\r\\n         */\\n\\n        exports.formatters.j = function (v) {\\n          try {\\n            return JSON.stringify(v);\\n          } catch (err) {\\n            return '[UnexpectedJSONParseError]: ' + err.message;\\n          }\\n        };\\n\\n        /**\\r\\n         * Colorize log arguments if enabled.\\r\\n         *\\r\\n         * @api public\\r\\n         */\\n\\n        function formatArgs(args) {\\n          var useColors = this.useColors;\\n\\n          args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);\\n\\n          if (!useColors) return;\\n\\n          var c = 'color: ' + this.color;\\n          args.splice(1, 0, c, 'color: inherit');\\n\\n          // the final \\\"%c\\\" is somewhat tricky, because there could be other\\n          // arguments passed either before or after the %c, so we need to\\n          // figure out the correct index to insert the CSS into\\n          var index = 0;\\n          var lastC = 0;\\n          args[0].replace(/%[a-zA-Z%]/g, function (match) {\\n            if ('%%' === match) return;\\n            index++;\\n            if ('%c' === match) {\\n              // we only are interested in the *last* %c\\n              // (the user may have provided their own)\\n              lastC = index;\\n            }\\n          });\\n\\n          args.splice(lastC, 0, c);\\n        }\\n\\n        /**\\r\\n         * Invokes `console.log()` when available.\\r\\n         * No-op when `console.log` is not a \\\"function\\\".\\r\\n         *\\r\\n         * @api public\\r\\n         */\\n\\n        function log() {\\n          // this hackery is required for IE8/9, where\\n          // the `console.log` function doesn't have 'apply'\\n          return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\\n        }\\n\\n        /**\\r\\n         * Save `namespaces`.\\r\\n         *\\r\\n         * @param {String} namespaces\\r\\n         * @api private\\r\\n         */\\n\\n        function save(namespaces) {\\n          try {\\n            if (null == namespaces) {\\n              exports.storage.removeItem('debug');\\n            } else {\\n              exports.storage.debug = namespaces;\\n            }\\n          } catch (e) {}\\n        }\\n\\n        /**\\r\\n         * Load `namespaces`.\\r\\n         *\\r\\n         * @return {String} returns the previously persisted debug modes\\r\\n         * @api private\\r\\n         */\\n\\n        function load() {\\n          var r;\\n          try {\\n            r = exports.storage.debug;\\n          } catch (e) {}\\n\\n          // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\\n          if (!r && typeof process !== 'undefined' && 'env' in process) {\\n            r = process.env.DEBUG;\\n          }\\n\\n          return r;\\n        }\\n\\n        /**\\r\\n         * Enable namespaces listed in `localStorage.debug` initially.\\r\\n         */\\n\\n        exports.enable(load());\\n\\n        /**\\r\\n         * Localstorage attempts to return the localstorage.\\r\\n         *\\r\\n         * This is necessary because safari throws\\r\\n         * when a user disables cookies/localstorage\\r\\n         * and you attempt to access it.\\r\\n         *\\r\\n         * @return {LocalStorage}\\r\\n         * @api private\\r\\n         */\\n\\n        function localstorage() {\\n          try {\\n            return window.localStorage;\\n          } catch (e) {}\\n        }\\n      }).call(this, { env: {} });\\n    }, { \\\"./debug\\\": 55 }], 55: [function (require, module, exports) {\\n\\n      /**\\r\\n       * This is the common logic for both the Node.js and web browser\\r\\n       * implementations of `debug()`.\\r\\n       *\\r\\n       * Expose `debug()` as the module.\\r\\n       */\\n\\n      exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\\n      exports.coerce = coerce;\\n      exports.disable = disable;\\n      exports.enable = enable;\\n      exports.enabled = enabled;\\n      exports.humanize = require('ms');\\n\\n      /**\\r\\n       * The currently active debug mode names, and names to skip.\\r\\n       */\\n\\n      exports.names = [];\\n      exports.skips = [];\\n\\n      /**\\r\\n       * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\r\\n       *\\r\\n       * Valid key names are a single, lower or upper-case letter, i.e. \\\"n\\\" and \\\"N\\\".\\r\\n       */\\n\\n      exports.formatters = {};\\n\\n      /**\\r\\n       * Previous log timestamp.\\r\\n       */\\n\\n      var prevTime;\\n\\n      /**\\r\\n       * Select a color.\\r\\n       * @param {String} namespace\\r\\n       * @return {Number}\\r\\n       * @api private\\r\\n       */\\n\\n      function selectColor(namespace) {\\n        var hash = 0,\\n            i;\\n\\n        for (i in namespace) {\\n          hash = (hash << 5) - hash + namespace.charCodeAt(i);\\n          hash |= 0; // Convert to 32bit integer\\n        }\\n\\n        return exports.colors[Math.abs(hash) % exports.colors.length];\\n      }\\n\\n      /**\\r\\n       * Create a debugger with the given `namespace`.\\r\\n       *\\r\\n       * @param {String} namespace\\r\\n       * @return {Function}\\r\\n       * @api public\\r\\n       */\\n\\n      function createDebug(namespace) {\\n\\n        function debug() {\\n          // disabled?\\n          if (!debug.enabled) return;\\n\\n          var self = debug;\\n\\n          // set `diff` timestamp\\n          var curr = +new Date();\\n          var ms = curr - (prevTime || curr);\\n          self.diff = ms;\\n          self.prev = prevTime;\\n          self.curr = curr;\\n          prevTime = curr;\\n\\n          // turn the `arguments` into a proper Array\\n          var args = new Array(arguments.length);\\n          for (var i = 0; i < args.length; i++) {\\n            args[i] = arguments[i];\\n          }\\n\\n          args[0] = exports.coerce(args[0]);\\n\\n          if ('string' !== typeof args[0]) {\\n            // anything else let's inspect with %O\\n            args.unshift('%O');\\n          }\\n\\n          // apply any `formatters` transformations\\n          var index = 0;\\n          args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\\n            // if we encounter an escaped % then don't increase the array index\\n            if (match === '%%') return match;\\n            index++;\\n            var formatter = exports.formatters[format];\\n            if ('function' === typeof formatter) {\\n              var val = args[index];\\n              match = formatter.call(self, val);\\n\\n              // now we need to remove `args[index]` since it's inlined in the `format`\\n              args.splice(index, 1);\\n              index--;\\n            }\\n            return match;\\n          });\\n\\n          // apply env-specific formatting (colors, etc.)\\n          exports.formatArgs.call(self, args);\\n\\n          var logFn = debug.log || exports.log || console.log.bind(console);\\n          logFn.apply(self, args);\\n        }\\n\\n        debug.namespace = namespace;\\n        debug.enabled = exports.enabled(namespace);\\n        debug.useColors = exports.useColors();\\n        debug.color = selectColor(namespace);\\n\\n        // env-specific initialization logic for debug instances\\n        if ('function' === typeof exports.init) {\\n          exports.init(debug);\\n        }\\n\\n        return debug;\\n      }\\n\\n      /**\\r\\n       * Enables a debug mode by namespaces. This can include modes\\r\\n       * separated by a colon and wildcards.\\r\\n       *\\r\\n       * @param {String} namespaces\\r\\n       * @api public\\r\\n       */\\n\\n      function enable(namespaces) {\\n        exports.save(namespaces);\\n\\n        exports.names = [];\\n        exports.skips = [];\\n\\n        var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\\\s,]+/);\\n        var len = split.length;\\n\\n        for (var i = 0; i < len; i++) {\\n          if (!split[i]) continue; // ignore empty strings\\n          namespaces = split[i].replace(/\\\\*/g, '.*?');\\n          if (namespaces[0] === '-') {\\n            exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n          } else {\\n            exports.names.push(new RegExp('^' + namespaces + '$'));\\n          }\\n        }\\n      }\\n\\n      /**\\r\\n       * Disable debug output.\\r\\n       *\\r\\n       * @api public\\r\\n       */\\n\\n      function disable() {\\n        exports.enable('');\\n      }\\n\\n      /**\\r\\n       * Returns true if the given mode name is enabled, false otherwise.\\r\\n       *\\r\\n       * @param {String} name\\r\\n       * @return {Boolean}\\r\\n       * @api public\\r\\n       */\\n\\n      function enabled(name) {\\n        var i, len;\\n        for (i = 0, len = exports.skips.length; i < len; i++) {\\n          if (exports.skips[i].test(name)) {\\n            return false;\\n          }\\n        }\\n        for (i = 0, len = exports.names.length; i < len; i++) {\\n          if (exports.names[i].test(name)) {\\n            return true;\\n          }\\n        }\\n        return false;\\n      }\\n\\n      /**\\r\\n       * Coerce `val`.\\r\\n       *\\r\\n       * @param {Mixed} val\\r\\n       * @return {Mixed}\\r\\n       * @api private\\r\\n       */\\n\\n      function coerce(val) {\\n        if (val instanceof Error) return val.stack || val.message;\\n        return val;\\n      }\\n    }, { \\\"ms\\\": 58 }], 56: [function (require, module, exports) {\\n      if (typeof Object.create === 'function') {\\n        // implementation from standard node.js 'util' module\\n        module.exports = function inherits(ctor, superCtor) {\\n          ctor.super_ = superCtor;\\n          ctor.prototype = Object.create(superCtor.prototype, {\\n            constructor: {\\n              value: ctor,\\n              enumerable: false,\\n              writable: true,\\n              configurable: true\\n            }\\n          });\\n        };\\n      } else {\\n        // old school shim for old browsers\\n        module.exports = function inherits(ctor, superCtor) {\\n          ctor.super_ = superCtor;\\n          var TempCtor = function () {};\\n          TempCtor.prototype = superCtor.prototype;\\n          ctor.prototype = new TempCtor();\\n          ctor.prototype.constructor = ctor;\\n        };\\n      }\\n    }, {}], 57: [function (require, module, exports) {\\n      (function (global) {\\n        /*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\\n        ;(function () {\\n          // Detect the `define` function exposed by asynchronous module loaders. The\\n          // strict `define` check is necessary for compatibility with `r.js`.\\n          var isLoader = typeof define === \\\"function\\\" && define.amd;\\n\\n          // A set of types used to distinguish objects from primitives.\\n          var objectTypes = {\\n            \\\"function\\\": true,\\n            \\\"object\\\": true\\n          };\\n\\n          // Detect the `exports` object exposed by CommonJS implementations.\\n          var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\\n\\n          // Use the `global` object exposed by Node (including Browserify via\\n          // `insert-module-globals`), Narwhal, and Ringo as the default context,\\n          // and the `window` object in browsers. Rhino exports a `global` function\\n          // instead.\\n          var root = objectTypes[typeof window] && window || this,\\n              freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \\\"object\\\" && global;\\n\\n          if (freeGlobal && (freeGlobal[\\\"global\\\"] === freeGlobal || freeGlobal[\\\"window\\\"] === freeGlobal || freeGlobal[\\\"self\\\"] === freeGlobal)) {\\n            root = freeGlobal;\\n          }\\n\\n          // Public: Initializes JSON 3 using the given `context` object, attaching the\\n          // `stringify` and `parse` functions to the specified `exports` object.\\n          function runInContext(context, exports) {\\n            context || (context = root[\\\"Object\\\"]());\\n            exports || (exports = root[\\\"Object\\\"]());\\n\\n            // Native constructor aliases.\\n            var Number = context[\\\"Number\\\"] || root[\\\"Number\\\"],\\n                String = context[\\\"String\\\"] || root[\\\"String\\\"],\\n                Object = context[\\\"Object\\\"] || root[\\\"Object\\\"],\\n                Date = context[\\\"Date\\\"] || root[\\\"Date\\\"],\\n                SyntaxError = context[\\\"SyntaxError\\\"] || root[\\\"SyntaxError\\\"],\\n                TypeError = context[\\\"TypeError\\\"] || root[\\\"TypeError\\\"],\\n                Math = context[\\\"Math\\\"] || root[\\\"Math\\\"],\\n                nativeJSON = context[\\\"JSON\\\"] || root[\\\"JSON\\\"];\\n\\n            // Delegate to the native `stringify` and `parse` implementations.\\n            if (typeof nativeJSON == \\\"object\\\" && nativeJSON) {\\n              exports.stringify = nativeJSON.stringify;\\n              exports.parse = nativeJSON.parse;\\n            }\\n\\n            // Convenience aliases.\\n            var objectProto = Object.prototype,\\n                getClass = objectProto.toString,\\n                isProperty,\\n                forEach,\\n                undef;\\n\\n            // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\\n            var isExtended = new Date(-3509827334573292);\\n            try {\\n              // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\\n              // results for certain dates in Opera >= 10.53.\\n              isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\\n              // Safari < 2.0.2 stores the internal millisecond time value correctly,\\n              // but clips the values returned by the date methods to the range of\\n              // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\\n              isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\\n            } catch (exception) {}\\n\\n            // Internal: Determines whether the native `JSON.stringify` and `parse`\\n            // implementations are spec-compliant. Based on work by Ken Snyder.\\n            function has(name) {\\n              if (has[name] !== undef) {\\n                // Return cached feature test result.\\n                return has[name];\\n              }\\n              var isSupported;\\n              if (name == \\\"bug-string-char-index\\\") {\\n                // IE <= 7 doesn't support accessing string characters using square\\n                // bracket notation. IE 8 only supports this for primitives.\\n                isSupported = \\\"a\\\"[0] != \\\"a\\\";\\n              } else if (name == \\\"json\\\") {\\n                // Indicates whether both `JSON.stringify` and `JSON.parse` are\\n                // supported.\\n                isSupported = has(\\\"json-stringify\\\") && has(\\\"json-parse\\\");\\n              } else {\\n                var value,\\n                    serialized = '{\\\"a\\\":[1,true,false,null,\\\"\\\\\\\\u0000\\\\\\\\b\\\\\\\\n\\\\\\\\f\\\\\\\\r\\\\\\\\t\\\"]}';\\n                // Test `JSON.stringify`.\\n                if (name == \\\"json-stringify\\\") {\\n                  var stringify = exports.stringify,\\n                      stringifySupported = typeof stringify == \\\"function\\\" && isExtended;\\n                  if (stringifySupported) {\\n                    // A test function object with a custom `toJSON` method.\\n                    (value = function () {\\n                      return 1;\\n                    }).toJSON = value;\\n                    try {\\n                      stringifySupported =\\n                      // Firefox 3.1b1 and b2 serialize string, number, and boolean\\n                      // primitives as object literals.\\n                      stringify(0) === \\\"0\\\" &&\\n                      // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\\n                      // literals.\\n                      stringify(new Number()) === \\\"0\\\" && stringify(new String()) == '\\\"\\\"' &&\\n                      // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\\n                      // does not define a canonical JSON representation (this applies to\\n                      // objects with `toJSON` properties as well, *unless* they are nested\\n                      // within an object or array).\\n                      stringify(getClass) === undef &&\\n                      // IE 8 serializes `undefined` as `\\\"undefined\\\"`. Safari <= 5.1.7 and\\n                      // FF 3.1b3 pass this test.\\n                      stringify(undef) === undef &&\\n                      // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\\n                      // respectively, if the value is omitted entirely.\\n                      stringify() === undef &&\\n                      // FF 3.1b1, 2 throw an error if the given value is not a number,\\n                      // string, array, object, Boolean, or `null` literal. This applies to\\n                      // objects with custom `toJSON` methods as well, unless they are nested\\n                      // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\\n                      // methods entirely.\\n                      stringify(value) === \\\"1\\\" && stringify([value]) == \\\"[1]\\\" &&\\n                      // Prototype <= 1.6.1 serializes `[undefined]` as `\\\"[]\\\"` instead of\\n                      // `\\\"[null]\\\"`.\\n                      stringify([undef]) == \\\"[null]\\\" &&\\n                      // YUI 3.0.0b1 fails to serialize `null` literals.\\n                      stringify(null) == \\\"null\\\" &&\\n                      // FF 3.1b1, 2 halts serialization if an array contains a function:\\n                      // `[1, true, getClass, 1]` serializes as \\\"[1,true,],\\\". FF 3.1b3\\n                      // elides non-JSON values from objects and arrays, unless they\\n                      // define custom `toJSON` methods.\\n                      stringify([undef, getClass, null]) == \\\"[null,null,null]\\\" &&\\n                      // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\\n                      // where character escape codes are expected (e.g., `\\\\b` => `\\\\u0008`).\\n                      stringify({ \\\"a\\\": [value, true, false, null, \\\"\\\\x00\\\\b\\\\n\\\\f\\\\r\\\\t\\\"] }) == serialized &&\\n                      // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\\n                      stringify(null, value) === \\\"1\\\" && stringify([1, 2], null, 1) == \\\"[\\\\n 1,\\\\n 2\\\\n]\\\" &&\\n                      // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\\n                      // serialize extended years.\\n                      stringify(new Date(-8.64e15)) == '\\\"-271821-04-20T00:00:00.000Z\\\"' &&\\n                      // The milliseconds are optional in ES 5, but required in 5.1.\\n                      stringify(new Date(8.64e15)) == '\\\"+275760-09-13T00:00:00.000Z\\\"' &&\\n                      // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\\n                      // four-digit years instead of six-digit years. Credits: @Yaffle.\\n                      stringify(new Date(-621987552e5)) == '\\\"-000001-01-01T00:00:00.000Z\\\"' &&\\n                      // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\\n                      // values less than 1000. Credits: @Yaffle.\\n                      stringify(new Date(-1)) == '\\\"1969-12-31T23:59:59.999Z\\\"';\\n                    } catch (exception) {\\n                      stringifySupported = false;\\n                    }\\n                  }\\n                  isSupported = stringifySupported;\\n                }\\n                // Test `JSON.parse`.\\n                if (name == \\\"json-parse\\\") {\\n                  var parse = exports.parse;\\n                  if (typeof parse == \\\"function\\\") {\\n                    try {\\n                      // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\\n                      // Conforming implementations should also coerce the initial argument to\\n                      // a string prior to parsing.\\n                      if (parse(\\\"0\\\") === 0 && !parse(false)) {\\n                        // Simple parsing test.\\n                        value = parse(serialized);\\n                        var parseSupported = value[\\\"a\\\"].length == 5 && value[\\\"a\\\"][0] === 1;\\n                        if (parseSupported) {\\n                          try {\\n                            // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\\n                            parseSupported = !parse('\\\"\\\\t\\\"');\\n                          } catch (exception) {}\\n                          if (parseSupported) {\\n                            try {\\n                              // FF 4.0 and 4.0.1 allow leading `+` signs and leading\\n                              // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\\n                              // certain octal literals.\\n                              parseSupported = parse(\\\"01\\\") !== 1;\\n                            } catch (exception) {}\\n                          }\\n                          if (parseSupported) {\\n                            try {\\n                              // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\\n                              // points. These environments, along with FF 3.1b1 and 2,\\n                              // also allow trailing commas in JSON objects and arrays.\\n                              parseSupported = parse(\\\"1.\\\") !== 1;\\n                            } catch (exception) {}\\n                          }\\n                        }\\n                      }\\n                    } catch (exception) {\\n                      parseSupported = false;\\n                    }\\n                  }\\n                  isSupported = parseSupported;\\n                }\\n              }\\n              return has[name] = !!isSupported;\\n            }\\n\\n            if (!has(\\\"json\\\")) {\\n              // Common `[[Class]]` name aliases.\\n              var functionClass = \\\"[object Function]\\\",\\n                  dateClass = \\\"[object Date]\\\",\\n                  numberClass = \\\"[object Number]\\\",\\n                  stringClass = \\\"[object String]\\\",\\n                  arrayClass = \\\"[object Array]\\\",\\n                  booleanClass = \\\"[object Boolean]\\\";\\n\\n              // Detect incomplete support for accessing string characters by index.\\n              var charIndexBuggy = has(\\\"bug-string-char-index\\\");\\n\\n              // Define additional utility methods if the `Date` methods are buggy.\\n              if (!isExtended) {\\n                var floor = Math.floor;\\n                // A mapping between the months of the year and the number of days between\\n                // January 1st and the first of the respective month.\\n                var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\\n                // Internal: Calculates the number of days between the Unix epoch and the\\n                // first day of the given month.\\n                var getDay = function (year, month) {\\n                  return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\\n                };\\n              }\\n\\n              // Internal: Determines if a property is a direct property of the given\\n              // object. Delegates to the native `Object#hasOwnProperty` method.\\n              if (!(isProperty = objectProto.hasOwnProperty)) {\\n                isProperty = function (property) {\\n                  var members = {},\\n                      constructor;\\n                  if ((members.__proto__ = null, members.__proto__ = {\\n                    // The *proto* property cannot be set multiple times in recent\\n                    // versions of Firefox and SeaMonkey.\\n                    \\\"toString\\\": 1\\n                  }, members).toString != getClass) {\\n                    // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\\n                    // supports the mutable *proto* property.\\n                    isProperty = function (property) {\\n                      // Capture and break the object's prototype chain (see section 8.6.2\\n                      // of the ES 5.1 spec). The parenthesized expression prevents an\\n                      // unsafe transformation by the Closure Compiler.\\n                      var original = this.__proto__,\\n                          result = property in (this.__proto__ = null, this);\\n                      // Restore the original prototype chain.\\n                      this.__proto__ = original;\\n                      return result;\\n                    };\\n                  } else {\\n                    // Capture a reference to the top-level `Object` constructor.\\n                    constructor = members.constructor;\\n                    // Use the `constructor` property to simulate `Object#hasOwnProperty` in\\n                    // other environments.\\n                    isProperty = function (property) {\\n                      var parent = (this.constructor || constructor).prototype;\\n                      return property in this && !(property in parent && this[property] === parent[property]);\\n                    };\\n                  }\\n                  members = null;\\n                  return isProperty.call(this, property);\\n                };\\n              }\\n\\n              // Internal: Normalizes the `for...in` iteration algorithm across\\n              // environments. Each enumerated key is yielded to a `callback` function.\\n              forEach = function (object, callback) {\\n                var size = 0,\\n                    Properties,\\n                    members,\\n                    property;\\n\\n                // Tests for bugs in the current environment's `for...in` algorithm. The\\n                // `valueOf` property inherits the non-enumerable flag from\\n                // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\\n                (Properties = function () {\\n                  this.valueOf = 0;\\n                }).prototype.valueOf = 0;\\n\\n                // Iterate over a new instance of the `Properties` class.\\n                members = new Properties();\\n                for (property in members) {\\n                  // Ignore all properties inherited from `Object.prototype`.\\n                  if (isProperty.call(members, property)) {\\n                    size++;\\n                  }\\n                }\\n                Properties = members = null;\\n\\n                // Normalize the iteration algorithm.\\n                if (!size) {\\n                  // A list of non-enumerable properties inherited from `Object.prototype`.\\n                  members = [\\\"valueOf\\\", \\\"toString\\\", \\\"toLocaleString\\\", \\\"propertyIsEnumerable\\\", \\\"isPrototypeOf\\\", \\\"hasOwnProperty\\\", \\\"constructor\\\"];\\n                  // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\\n                  // properties.\\n                  forEach = function (object, callback) {\\n                    var isFunction = getClass.call(object) == functionClass,\\n                        property,\\n                        length;\\n                    var hasProperty = !isFunction && typeof object.constructor != \\\"function\\\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\\n                    for (property in object) {\\n                      // Gecko <= 1.0 enumerates the `prototype` property of functions under\\n                      // certain conditions; IE does not.\\n                      if (!(isFunction && property == \\\"prototype\\\") && hasProperty.call(object, property)) {\\n                        callback(property);\\n                      }\\n                    }\\n                    // Manually invoke the callback for each non-enumerable property.\\n                    for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\\n                  };\\n                } else if (size == 2) {\\n                  // Safari <= 2.0.4 enumerates shadowed properties twice.\\n                  forEach = function (object, callback) {\\n                    // Create a set of iterated properties.\\n                    var members = {},\\n                        isFunction = getClass.call(object) == functionClass,\\n                        property;\\n                    for (property in object) {\\n                      // Store each property name to prevent double enumeration. The\\n                      // `prototype` property of functions is not enumerated due to cross-\\n                      // environment inconsistencies.\\n                      if (!(isFunction && property == \\\"prototype\\\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\\n                        callback(property);\\n                      }\\n                    }\\n                  };\\n                } else {\\n                  // No bugs detected; use the standard `for...in` algorithm.\\n                  forEach = function (object, callback) {\\n                    var isFunction = getClass.call(object) == functionClass,\\n                        property,\\n                        isConstructor;\\n                    for (property in object) {\\n                      if (!(isFunction && property == \\\"prototype\\\") && isProperty.call(object, property) && !(isConstructor = property === \\\"constructor\\\")) {\\n                        callback(property);\\n                      }\\n                    }\\n                    // Manually invoke the callback for the `constructor` property due to\\n                    // cross-environment inconsistencies.\\n                    if (isConstructor || isProperty.call(object, property = \\\"constructor\\\")) {\\n                      callback(property);\\n                    }\\n                  };\\n                }\\n                return forEach(object, callback);\\n              };\\n\\n              // Public: Serializes a JavaScript `value` as a JSON string. The optional\\n              // `filter` argument may specify either a function that alters how object and\\n              // array members are serialized, or an array of strings and numbers that\\n              // indicates which properties should be serialized. The optional `width`\\n              // argument may be either a string or number that specifies the indentation\\n              // level of the output.\\n              if (!has(\\\"json-stringify\\\")) {\\n                // Internal: A map of control characters and their escaped equivalents.\\n                var Escapes = {\\n                  92: \\\"\\\\\\\\\\\\\\\\\\\",\\n                  34: '\\\\\\\\\\\"',\\n                  8: \\\"\\\\\\\\b\\\",\\n                  12: \\\"\\\\\\\\f\\\",\\n                  10: \\\"\\\\\\\\n\\\",\\n                  13: \\\"\\\\\\\\r\\\",\\n                  9: \\\"\\\\\\\\t\\\"\\n                };\\n\\n                // Internal: Converts `value` into a zero-padded string such that its\\n                // length is at least equal to `width`. The `width` must be <= 6.\\n                var leadingZeroes = \\\"000000\\\";\\n                var toPaddedString = function (width, value) {\\n                  // The `|| 0` expression is necessary to work around a bug in\\n                  // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \\\"0\\\"`.\\n                  return (leadingZeroes + (value || 0)).slice(-width);\\n                };\\n\\n                // Internal: Double-quotes a string `value`, replacing all ASCII control\\n                // characters (characters with code unit values between 0 and 31) with\\n                // their escaped equivalents. This is an implementation of the\\n                // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\\n                var unicodePrefix = \\\"\\\\\\\\u00\\\";\\n                var quote = function (value) {\\n                  var result = '\\\"',\\n                      index = 0,\\n                      length = value.length,\\n                      useCharIndex = !charIndexBuggy || length > 10;\\n                  var symbols = useCharIndex && (charIndexBuggy ? value.split(\\\"\\\") : value);\\n                  for (; index < length; index++) {\\n                    var charCode = value.charCodeAt(index);\\n                    // If the character is a control character, append its Unicode or\\n                    // shorthand escape sequence; otherwise, append the character as-is.\\n                    switch (charCode) {\\n                      case 8:case 9:case 10:case 12:case 13:case 34:case 92:\\n                        result += Escapes[charCode];\\n                        break;\\n                      default:\\n                        if (charCode < 32) {\\n                          result += unicodePrefix + toPaddedString(2, charCode.toString(16));\\n                          break;\\n                        }\\n                        result += useCharIndex ? symbols[index] : value.charAt(index);\\n                    }\\n                  }\\n                  return result + '\\\"';\\n                };\\n\\n                // Internal: Recursively serializes an object. Implements the\\n                // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\\n                var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\\n                  var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\\n                  try {\\n                    // Necessary for host object support.\\n                    value = object[property];\\n                  } catch (exception) {}\\n                  if (typeof value == \\\"object\\\" && value) {\\n                    className = getClass.call(value);\\n                    if (className == dateClass && !isProperty.call(value, \\\"toJSON\\\")) {\\n                      if (value > -1 / 0 && value < 1 / 0) {\\n                        // Dates are serialized according to the `Date#toJSON` method\\n                        // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\\n                        // for the ISO 8601 date time string format.\\n                        if (getDay) {\\n                          // Manually compute the year, month, date, hours, minutes,\\n                          // seconds, and milliseconds if the `getUTC*` methods are\\n                          // buggy. Adapted from @Yaffle's `date-shim` project.\\n                          date = floor(value / 864e5);\\n                          for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\\n                          for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\\n                          date = 1 + date - getDay(year, month);\\n                          // The `time` value specifies the time within the day (see ES\\n                          // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\\n                          // to compute `A modulo B`, as the `%` operator does not\\n                          // correspond to the `modulo` operation for negative numbers.\\n                          time = (value % 864e5 + 864e5) % 864e5;\\n                          // The hours, minutes, seconds, and milliseconds are obtained by\\n                          // decomposing the time within the day. See section 15.9.1.10.\\n                          hours = floor(time / 36e5) % 24;\\n                          minutes = floor(time / 6e4) % 60;\\n                          seconds = floor(time / 1e3) % 60;\\n                          milliseconds = time % 1e3;\\n                        } else {\\n                          year = value.getUTCFullYear();\\n                          month = value.getUTCMonth();\\n                          date = value.getUTCDate();\\n                          hours = value.getUTCHours();\\n                          minutes = value.getUTCMinutes();\\n                          seconds = value.getUTCSeconds();\\n                          milliseconds = value.getUTCMilliseconds();\\n                        }\\n                        // Serialize extended years correctly.\\n                        value = (year <= 0 || year >= 1e4 ? (year < 0 ? \\\"-\\\" : \\\"+\\\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + \\\"-\\\" + toPaddedString(2, month + 1) + \\\"-\\\" + toPaddedString(2, date) +\\n                        // Months, dates, hours, minutes, and seconds should have two\\n                        // digits; milliseconds should have three.\\n                        \\\"T\\\" + toPaddedString(2, hours) + \\\":\\\" + toPaddedString(2, minutes) + \\\":\\\" + toPaddedString(2, seconds) +\\n                        // Milliseconds are optional in ES 5.0, but required in 5.1.\\n                        \\\".\\\" + toPaddedString(3, milliseconds) + \\\"Z\\\";\\n                      } else {\\n                        value = null;\\n                      }\\n                    } else if (typeof value.toJSON == \\\"function\\\" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, \\\"toJSON\\\"))) {\\n                      // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\\n                      // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\\n                      // ignores all `toJSON` methods on these objects unless they are\\n                      // defined directly on an instance.\\n                      value = value.toJSON(property);\\n                    }\\n                  }\\n                  if (callback) {\\n                    // If a replacement function was provided, call it to obtain the value\\n                    // for serialization.\\n                    value = callback.call(object, property, value);\\n                  }\\n                  if (value === null) {\\n                    return \\\"null\\\";\\n                  }\\n                  className = getClass.call(value);\\n                  if (className == booleanClass) {\\n                    // Booleans are represented literally.\\n                    return \\\"\\\" + value;\\n                  } else if (className == numberClass) {\\n                    // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\\n                    // `\\\"null\\\"`.\\n                    return value > -1 / 0 && value < 1 / 0 ? \\\"\\\" + value : \\\"null\\\";\\n                  } else if (className == stringClass) {\\n                    // Strings are double-quoted and escaped.\\n                    return quote(\\\"\\\" + value);\\n                  }\\n                  // Recursively serialize objects and arrays.\\n                  if (typeof value == \\\"object\\\") {\\n                    // Check for cyclic structures. This is a linear search; performance\\n                    // is inversely proportional to the number of unique nested objects.\\n                    for (length = stack.length; length--;) {\\n                      if (stack[length] === value) {\\n                        // Cyclic structures cannot be serialized by `JSON.stringify`.\\n                        throw TypeError();\\n                      }\\n                    }\\n                    // Add the object to the stack of traversed objects.\\n                    stack.push(value);\\n                    results = [];\\n                    // Save the current indentation level and indent one additional level.\\n                    prefix = indentation;\\n                    indentation += whitespace;\\n                    if (className == arrayClass) {\\n                      // Recursively serialize array elements.\\n                      for (index = 0, length = value.length; index < length; index++) {\\n                        element = serialize(index, value, callback, properties, whitespace, indentation, stack);\\n                        results.push(element === undef ? \\\"null\\\" : element);\\n                      }\\n                      result = results.length ? whitespace ? \\\"[\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"]\\\" : \\\"[\\\" + results.join(\\\",\\\") + \\\"]\\\" : \\\"[]\\\";\\n                    } else {\\n                      // Recursively serialize object members. Members are selected from\\n                      // either a user-specified list of property names, or the object\\n                      // itself.\\n                      forEach(properties || value, function (property) {\\n                        var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\\n                        if (element !== undef) {\\n                          // According to ES 5.1 section 15.12.3: \\\"If `gap` {whitespace}\\n                          // is not the empty string, let `member` {quote(property) + \\\":\\\"}\\n                          // be the concatenation of `member` and the `space` character.\\\"\\n                          // The \\\"`space` character\\\" refers to the literal space\\n                          // character, not the `space` {width} argument provided to\\n                          // `JSON.stringify`.\\n                          results.push(quote(property) + \\\":\\\" + (whitespace ? \\\" \\\" : \\\"\\\") + element);\\n                        }\\n                      });\\n                      result = results.length ? whitespace ? \\\"{\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"}\\\" : \\\"{\\\" + results.join(\\\",\\\") + \\\"}\\\" : \\\"{}\\\";\\n                    }\\n                    // Remove the object from the traversed object stack.\\n                    stack.pop();\\n                    return result;\\n                  }\\n                };\\n\\n                // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\\n                exports.stringify = function (source, filter, width) {\\n                  var whitespace, callback, properties, className;\\n                  if (objectTypes[typeof filter] && filter) {\\n                    if ((className = getClass.call(filter)) == functionClass) {\\n                      callback = filter;\\n                    } else if (className == arrayClass) {\\n                      // Convert the property names array into a makeshift set.\\n                      properties = {};\\n                      for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));\\n                    }\\n                  }\\n                  if (width) {\\n                    if ((className = getClass.call(width)) == numberClass) {\\n                      // Convert the `width` to an integer and create a string containing\\n                      // `width` number of space characters.\\n                      if ((width -= width % 1) > 0) {\\n                        for (whitespace = \\\"\\\", width > 10 && (width = 10); whitespace.length < width; whitespace += \\\" \\\");\\n                      }\\n                    } else if (className == stringClass) {\\n                      whitespace = width.length <= 10 ? width : width.slice(0, 10);\\n                    }\\n                  }\\n                  // Opera <= 7.54u2 discards the values associated with empty string keys\\n                  // (`\\\"\\\"`) only if they are used directly within an object member list\\n                  // (e.g., `!(\\\"\\\" in { \\\"\\\": 1})`).\\n                  return serialize(\\\"\\\", (value = {}, value[\\\"\\\"] = source, value), callback, properties, whitespace, \\\"\\\", []);\\n                };\\n              }\\n\\n              // Public: Parses a JSON source string.\\n              if (!has(\\\"json-parse\\\")) {\\n                var fromCharCode = String.fromCharCode;\\n\\n                // Internal: A map of escaped control characters and their unescaped\\n                // equivalents.\\n                var Unescapes = {\\n                  92: \\\"\\\\\\\\\\\",\\n                  34: '\\\"',\\n                  47: \\\"/\\\",\\n                  98: \\\"\\\\b\\\",\\n                  116: \\\"\\\\t\\\",\\n                  110: \\\"\\\\n\\\",\\n                  102: \\\"\\\\f\\\",\\n                  114: \\\"\\\\r\\\"\\n                };\\n\\n                // Internal: Stores the parser state.\\n                var Index, Source;\\n\\n                // Internal: Resets the parser state and throws a `SyntaxError`.\\n                var abort = function () {\\n                  Index = Source = null;\\n                  throw SyntaxError();\\n                };\\n\\n                // Internal: Returns the next token, or `\\\"$\\\"` if the parser has reached\\n                // the end of the source string. A token may be a string, number, `null`\\n                // literal, or Boolean literal.\\n                var lex = function () {\\n                  var source = Source,\\n                      length = source.length,\\n                      value,\\n                      begin,\\n                      position,\\n                      isSigned,\\n                      charCode;\\n                  while (Index < length) {\\n                    charCode = source.charCodeAt(Index);\\n                    switch (charCode) {\\n                      case 9:case 10:case 13:case 32:\\n                        // Skip whitespace tokens, including tabs, carriage returns, line\\n                        // feeds, and space characters.\\n                        Index++;\\n                        break;\\n                      case 123:case 125:case 91:case 93:case 58:case 44:\\n                        // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\\n                        // the current position.\\n                        value = charIndexBuggy ? source.charAt(Index) : source[Index];\\n                        Index++;\\n                        return value;\\n                      case 34:\\n                        // `\\\"` delimits a JSON string; advance to the next character and\\n                        // begin parsing the string. String tokens are prefixed with the\\n                        // sentinel `@` character to distinguish them from punctuators and\\n                        // end-of-string tokens.\\n                        for (value = \\\"@\\\", Index++; Index < length;) {\\n                          charCode = source.charCodeAt(Index);\\n                          if (charCode < 32) {\\n                            // Unescaped ASCII control characters (those with a code unit\\n                            // less than the space character) are not permitted.\\n                            abort();\\n                          } else if (charCode == 92) {\\n                            // A reverse solidus (`\\\\`) marks the beginning of an escaped\\n                            // control character (including `\\\"`, `\\\\`, and `/`) or Unicode\\n                            // escape sequence.\\n                            charCode = source.charCodeAt(++Index);\\n                            switch (charCode) {\\n                              case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:\\n                                // Revive escaped control characters.\\n                                value += Unescapes[charCode];\\n                                Index++;\\n                                break;\\n                              case 117:\\n                                // `\\\\u` marks the beginning of a Unicode escape sequence.\\n                                // Advance to the first character and validate the\\n                                // four-digit code point.\\n                                begin = ++Index;\\n                                for (position = Index + 4; Index < position; Index++) {\\n                                  charCode = source.charCodeAt(Index);\\n                                  // A valid sequence comprises four hexdigits (case-\\n                                  // insensitive) that form a single hexadecimal value.\\n                                  if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\\n                                    // Invalid Unicode escape sequence.\\n                                    abort();\\n                                  }\\n                                }\\n                                // Revive the escaped character.\\n                                value += fromCharCode(\\\"0x\\\" + source.slice(begin, Index));\\n                                break;\\n                              default:\\n                                // Invalid escape sequence.\\n                                abort();\\n                            }\\n                          } else {\\n                            if (charCode == 34) {\\n                              // An unescaped double-quote character marks the end of the\\n                              // string.\\n                              break;\\n                            }\\n                            charCode = source.charCodeAt(Index);\\n                            begin = Index;\\n                            // Optimize for the common case where a string is valid.\\n                            while (charCode >= 32 && charCode != 92 && charCode != 34) {\\n                              charCode = source.charCodeAt(++Index);\\n                            }\\n                            // Append the string as-is.\\n                            value += source.slice(begin, Index);\\n                          }\\n                        }\\n                        if (source.charCodeAt(Index) == 34) {\\n                          // Advance to the next character and return the revived string.\\n                          Index++;\\n                          return value;\\n                        }\\n                        // Unterminated string.\\n                        abort();\\n                      default:\\n                        // Parse numbers and literals.\\n                        begin = Index;\\n                        // Advance past the negative sign, if one is specified.\\n                        if (charCode == 45) {\\n                          isSigned = true;\\n                          charCode = source.charCodeAt(++Index);\\n                        }\\n                        // Parse an integer or floating-point value.\\n                        if (charCode >= 48 && charCode <= 57) {\\n                          // Leading zeroes are interpreted as octal literals.\\n                          if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {\\n                            // Illegal octal literal.\\n                            abort();\\n                          }\\n                          isSigned = false;\\n                          // Parse the integer component.\\n                          for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++);\\n                          // Floats cannot contain a leading decimal point; however, this\\n                          // case is already accounted for by the parser.\\n                          if (source.charCodeAt(Index) == 46) {\\n                            position = ++Index;\\n                            // Parse the decimal component.\\n                            for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);\\n                            if (position == Index) {\\n                              // Illegal trailing decimal.\\n                              abort();\\n                            }\\n                            Index = position;\\n                          }\\n                          // Parse exponents. The `e` denoting the exponent is\\n                          // case-insensitive.\\n                          charCode = source.charCodeAt(Index);\\n                          if (charCode == 101 || charCode == 69) {\\n                            charCode = source.charCodeAt(++Index);\\n                            // Skip past the sign following the exponent, if one is\\n                            // specified.\\n                            if (charCode == 43 || charCode == 45) {\\n                              Index++;\\n                            }\\n                            // Parse the exponential component.\\n                            for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);\\n                            if (position == Index) {\\n                              // Illegal empty exponent.\\n                              abort();\\n                            }\\n                            Index = position;\\n                          }\\n                          // Coerce the parsed value to a JavaScript number.\\n                          return +source.slice(begin, Index);\\n                        }\\n                        // A negative sign may only precede numbers.\\n                        if (isSigned) {\\n                          abort();\\n                        }\\n                        // `true`, `false`, and `null` literals.\\n                        if (source.slice(Index, Index + 4) == \\\"true\\\") {\\n                          Index += 4;\\n                          return true;\\n                        } else if (source.slice(Index, Index + 5) == \\\"false\\\") {\\n                          Index += 5;\\n                          return false;\\n                        } else if (source.slice(Index, Index + 4) == \\\"null\\\") {\\n                          Index += 4;\\n                          return null;\\n                        }\\n                        // Unrecognized token.\\n                        abort();\\n                    }\\n                  }\\n                  // Return the sentinel `$` character if the parser has reached the end\\n                  // of the source string.\\n                  return \\\"$\\\";\\n                };\\n\\n                // Internal: Parses a JSON `value` token.\\n                var get = function (value) {\\n                  var results, hasMembers;\\n                  if (value == \\\"$\\\") {\\n                    // Unexpected end of input.\\n                    abort();\\n                  }\\n                  if (typeof value == \\\"string\\\") {\\n                    if ((charIndexBuggy ? value.charAt(0) : value[0]) == \\\"@\\\") {\\n                      // Remove the sentinel `@` character.\\n                      return value.slice(1);\\n                    }\\n                    // Parse object and array literals.\\n                    if (value == \\\"[\\\") {\\n                      // Parses a JSON array, returning a new JavaScript array.\\n                      results = [];\\n                      for (;; hasMembers || (hasMembers = true)) {\\n                        value = lex();\\n                        // A closing square bracket marks the end of the array literal.\\n                        if (value == \\\"]\\\") {\\n                          break;\\n                        }\\n                        // If the array literal contains elements, the current token\\n                        // should be a comma separating the previous element from the\\n                        // next.\\n                        if (hasMembers) {\\n                          if (value == \\\",\\\") {\\n                            value = lex();\\n                            if (value == \\\"]\\\") {\\n                              // Unexpected trailing `,` in array literal.\\n                              abort();\\n                            }\\n                          } else {\\n                            // A `,` must separate each array element.\\n                            abort();\\n                          }\\n                        }\\n                        // Elisions and leading commas are not permitted.\\n                        if (value == \\\",\\\") {\\n                          abort();\\n                        }\\n                        results.push(get(value));\\n                      }\\n                      return results;\\n                    } else if (value == \\\"{\\\") {\\n                      // Parses a JSON object, returning a new JavaScript object.\\n                      results = {};\\n                      for (;; hasMembers || (hasMembers = true)) {\\n                        value = lex();\\n                        // A closing curly brace marks the end of the object literal.\\n                        if (value == \\\"}\\\") {\\n                          break;\\n                        }\\n                        // If the object literal contains members, the current token\\n                        // should be a comma separator.\\n                        if (hasMembers) {\\n                          if (value == \\\",\\\") {\\n                            value = lex();\\n                            if (value == \\\"}\\\") {\\n                              // Unexpected trailing `,` in object literal.\\n                              abort();\\n                            }\\n                          } else {\\n                            // A `,` must separate each object member.\\n                            abort();\\n                          }\\n                        }\\n                        // Leading commas are not permitted, object property names must be\\n                        // double-quoted strings, and a `:` must separate each property\\n                        // name and value.\\n                        if (value == \\\",\\\" || typeof value != \\\"string\\\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \\\"@\\\" || lex() != \\\":\\\") {\\n                          abort();\\n                        }\\n                        results[value.slice(1)] = get(lex());\\n                      }\\n                      return results;\\n                    }\\n                    // Unexpected token encountered.\\n                    abort();\\n                  }\\n                  return value;\\n                };\\n\\n                // Internal: Updates a traversed object member.\\n                var update = function (source, property, callback) {\\n                  var element = walk(source, property, callback);\\n                  if (element === undef) {\\n                    delete source[property];\\n                  } else {\\n                    source[property] = element;\\n                  }\\n                };\\n\\n                // Internal: Recursively traverses a parsed JSON object, invoking the\\n                // `callback` function for each value. This is an implementation of the\\n                // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\\n                var walk = function (source, property, callback) {\\n                  var value = source[property],\\n                      length;\\n                  if (typeof value == \\\"object\\\" && value) {\\n                    // `forEach` can't be used to traverse an array in Opera <= 8.54\\n                    // because its `Object#hasOwnProperty` implementation returns `false`\\n                    // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\\\"0\\\")`).\\n                    if (getClass.call(value) == arrayClass) {\\n                      for (length = value.length; length--;) {\\n                        update(value, length, callback);\\n                      }\\n                    } else {\\n                      forEach(value, function (property) {\\n                        update(value, property, callback);\\n                      });\\n                    }\\n                  }\\n                  return callback.call(source, property, value);\\n                };\\n\\n                // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\\n                exports.parse = function (source, callback) {\\n                  var result, value;\\n                  Index = 0;\\n                  Source = \\\"\\\" + source;\\n                  result = get(lex());\\n                  // If a JSON string contains multiple tokens, it is invalid.\\n                  if (lex() != \\\"$\\\") {\\n                    abort();\\n                  }\\n                  // Reset the parser state.\\n                  Index = Source = null;\\n                  return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\\\"\\\"] = result, value), \\\"\\\", callback) : result;\\n                };\\n              }\\n            }\\n\\n            exports[\\\"runInContext\\\"] = runInContext;\\n            return exports;\\n          }\\n\\n          if (freeExports && !isLoader) {\\n            // Export for CommonJS environments.\\n            runInContext(root, freeExports);\\n          } else {\\n            // Export for web browsers and JavaScript engines.\\n            var nativeJSON = root.JSON,\\n                previousJSON = root[\\\"JSON3\\\"],\\n                isRestored = false;\\n\\n            var JSON3 = runInContext(root, root[\\\"JSON3\\\"] = {\\n              // Public: Restores the original value of the global `JSON` object and\\n              // returns a reference to the `JSON3` object.\\n              \\\"noConflict\\\": function () {\\n                if (!isRestored) {\\n                  isRestored = true;\\n                  root.JSON = nativeJSON;\\n                  root[\\\"JSON3\\\"] = previousJSON;\\n                  nativeJSON = previousJSON = null;\\n                }\\n                return JSON3;\\n              }\\n            });\\n\\n            root.JSON = {\\n              \\\"parse\\\": JSON3.parse,\\n              \\\"stringify\\\": JSON3.stringify\\n            };\\n          }\\n\\n          // Export for asynchronous module loaders.\\n          if (isLoader) {\\n            define(function () {\\n              return JSON3;\\n            });\\n          }\\n        }).call(this);\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, {}], 58: [function (require, module, exports) {\\n      /**\\r\\n       * Helpers.\\r\\n       */\\n\\n      var s = 1000;\\n      var m = s * 60;\\n      var h = m * 60;\\n      var d = h * 24;\\n      var y = d * 365.25;\\n\\n      /**\\r\\n       * Parse or format the given `val`.\\r\\n       *\\r\\n       * Options:\\r\\n       *\\r\\n       *  - `long` verbose formatting [false]\\r\\n       *\\r\\n       * @param {String|Number} val\\r\\n       * @param {Object} [options]\\r\\n       * @throws {Error} throw an error if val is not a non-empty string or a number\\r\\n       * @return {String|Number}\\r\\n       * @api public\\r\\n       */\\n\\n      module.exports = function (val, options) {\\n        options = options || {};\\n        var type = typeof val;\\n        if (type === 'string' && val.length > 0) {\\n          return parse(val);\\n        } else if (type === 'number' && isNaN(val) === false) {\\n          return options.long ? fmtLong(val) : fmtShort(val);\\n        }\\n        throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));\\n      };\\n\\n      /**\\r\\n       * Parse the given `str` and return milliseconds.\\r\\n       *\\r\\n       * @param {String} str\\r\\n       * @return {Number}\\r\\n       * @api private\\r\\n       */\\n\\n      function parse(str) {\\n        str = String(str);\\n        if (str.length > 100) {\\n          return;\\n        }\\n        var match = /^((?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\\n        if (!match) {\\n          return;\\n        }\\n        var n = parseFloat(match[1]);\\n        var type = (match[2] || 'ms').toLowerCase();\\n        switch (type) {\\n          case 'years':\\n          case 'year':\\n          case 'yrs':\\n          case 'yr':\\n          case 'y':\\n            return n * y;\\n          case 'days':\\n          case 'day':\\n          case 'd':\\n            return n * d;\\n          case 'hours':\\n          case 'hour':\\n          case 'hrs':\\n          case 'hr':\\n          case 'h':\\n            return n * h;\\n          case 'minutes':\\n          case 'minute':\\n          case 'mins':\\n          case 'min':\\n          case 'm':\\n            return n * m;\\n          case 'seconds':\\n          case 'second':\\n          case 'secs':\\n          case 'sec':\\n          case 's':\\n            return n * s;\\n          case 'milliseconds':\\n          case 'millisecond':\\n          case 'msecs':\\n          case 'msec':\\n          case 'ms':\\n            return n;\\n          default:\\n            return undefined;\\n        }\\n      }\\n\\n      /**\\r\\n       * Short format for `ms`.\\r\\n       *\\r\\n       * @param {Number} ms\\r\\n       * @return {String}\\r\\n       * @api private\\r\\n       */\\n\\n      function fmtShort(ms) {\\n        if (ms >= d) {\\n          return Math.round(ms / d) + 'd';\\n        }\\n        if (ms >= h) {\\n          return Math.round(ms / h) + 'h';\\n        }\\n        if (ms >= m) {\\n          return Math.round(ms / m) + 'm';\\n        }\\n        if (ms >= s) {\\n          return Math.round(ms / s) + 's';\\n        }\\n        return ms + 'ms';\\n      }\\n\\n      /**\\r\\n       * Long format for `ms`.\\r\\n       *\\r\\n       * @param {Number} ms\\r\\n       * @return {String}\\r\\n       * @api private\\r\\n       */\\n\\n      function fmtLong(ms) {\\n        return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';\\n      }\\n\\n      /**\\r\\n       * Pluralization helper.\\r\\n       */\\n\\n      function plural(ms, n, name) {\\n        if (ms < n) {\\n          return;\\n        }\\n        if (ms < n * 1.5) {\\n          return Math.floor(ms / n) + ' ' + name;\\n        }\\n        return Math.ceil(ms / n) + ' ' + name + 's';\\n      }\\n    }, {}], 59: [function (require, module, exports) {\\n      'use strict';\\n\\n      var has = Object.prototype.hasOwnProperty;\\n\\n      /**\\r\\n       * Decode a URI encoded string.\\r\\n       *\\r\\n       * @param {String} input The URI encoded string.\\r\\n       * @returns {String} The decoded string.\\r\\n       * @api private\\r\\n       */\\n      function decode(input) {\\n        return decodeURIComponent(input.replace(/\\\\+/g, ' '));\\n      }\\n\\n      /**\\r\\n       * Simple query string parser.\\r\\n       *\\r\\n       * @param {String} query The query string that needs to be parsed.\\r\\n       * @returns {Object}\\r\\n       * @api public\\r\\n       */\\n      function querystring(query) {\\n        var parser = /([^=?&]+)=?([^&]*)/g,\\n            result = {},\\n            part;\\n\\n        while (part = parser.exec(query)) {\\n          var key = decode(part[1]),\\n              value = decode(part[2]);\\n\\n          //\\n          // Prevent overriding of existing properties. This ensures that build-in\\n          // methods like `toString` or __proto__ are not overriden by malicious\\n          // querystrings.\\n          //\\n          if (key in result) continue;\\n          result[key] = value;\\n        }\\n\\n        return result;\\n      }\\n\\n      /**\\r\\n       * Transform a query string to an object.\\r\\n       *\\r\\n       * @param {Object} obj Object that should be transformed.\\r\\n       * @param {String} prefix Optional prefix.\\r\\n       * @returns {String}\\r\\n       * @api public\\r\\n       */\\n      function querystringify(obj, prefix) {\\n        prefix = prefix || '';\\n\\n        var pairs = [];\\n\\n        //\\n        // Optionally prefix with a '?' if needed\\n        //\\n        if ('string' !== typeof prefix) prefix = '?';\\n\\n        for (var key in obj) {\\n          if (has.call(obj, key)) {\\n            pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\\n          }\\n        }\\n\\n        return pairs.length ? prefix + pairs.join('&') : '';\\n      }\\n\\n      //\\n      // Expose the module.\\n      //\\n      exports.stringify = querystringify;\\n      exports.parse = querystring;\\n    }, {}], 60: [function (require, module, exports) {\\n      'use strict';\\n\\n      /**\\r\\n       * Check if we're required to add a port number.\\r\\n       *\\r\\n       * @see https://url.spec.whatwg.org/#default-port\\r\\n       * @param {Number|String} port Port number we need to check\\r\\n       * @param {String} protocol Protocol we need to check against.\\r\\n       * @returns {Boolean} Is it a default port for the given protocol\\r\\n       * @api private\\r\\n       */\\n\\n      module.exports = function required(port, protocol) {\\n        protocol = protocol.split(':')[0];\\n        port = +port;\\n\\n        if (!port) return false;\\n\\n        switch (protocol) {\\n          case 'http':\\n          case 'ws':\\n            return port !== 80;\\n\\n          case 'https':\\n          case 'wss':\\n            return port !== 443;\\n\\n          case 'ftp':\\n            return port !== 21;\\n\\n          case 'gopher':\\n            return port !== 70;\\n\\n          case 'file':\\n            return false;\\n        }\\n\\n        return port !== 0;\\n      };\\n    }, {}], 61: [function (require, module, exports) {\\n      (function (global) {\\n        'use strict';\\n\\n        var required = require('requires-port'),\\n            qs = require('querystringify'),\\n            protocolre = /^([a-z][a-z0-9.+-]*:)?(\\\\/\\\\/)?([\\\\S\\\\s]*)/i,\\n            slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\\\/\\\\//;\\n\\n        /**\\r\\n         * These are the parse rules for the URL parser, it informs the parser\\r\\n         * about:\\r\\n         *\\r\\n         * 0. The char it Needs to parse, if it's a string it should be done using\\r\\n         *    indexOf, RegExp using exec and NaN means set as current value.\\r\\n         * 1. The property we should set when parsing this value.\\r\\n         * 2. Indication if it's backwards or forward parsing, when set as number it's\\r\\n         *    the value of extra chars that should be split off.\\r\\n         * 3. Inherit from location if non existing in the parser.\\r\\n         * 4. `toLowerCase` the resulting value.\\r\\n         */\\n        var rules = [['#', 'hash'], // Extract from the back.\\n        ['?', 'query'], // Extract from the back.\\n        ['/', 'pathname'], // Extract from the back.\\n        ['@', 'auth', 1], // Extract from the front.\\n        [NaN, 'host', undefined, 1, 1], // Set left over value.\\n        [/:(\\\\d+)$/, 'port', undefined, 1], // RegExp the back.\\n        [NaN, 'hostname', undefined, 1, 1] // Set left over.\\n        ];\\n\\n        /**\\r\\n         * These properties should not be copied or inherited from. This is only needed\\r\\n         * for all non blob URL's as a blob URL does not include a hash, only the\\r\\n         * origin.\\r\\n         *\\r\\n         * @type {Object}\\r\\n         * @private\\r\\n         */\\n        var ignore = { hash: 1, query: 1 };\\n\\n        /**\\r\\n         * The location object differs when your code is loaded through a normal page,\\r\\n         * Worker or through a worker using a blob. And with the blobble begins the\\r\\n         * trouble as the location object will contain the URL of the blob, not the\\r\\n         * location of the page where our code is loaded in. The actual origin is\\r\\n         * encoded in the `pathname` so we can thankfully generate a good \\\"default\\\"\\r\\n         * location from it so we can generate proper relative URL's again.\\r\\n         *\\r\\n         * @param {Object|String} loc Optional default location object.\\r\\n         * @returns {Object} lolcation object.\\r\\n         * @api public\\r\\n         */\\n        function lolcation(loc) {\\n          loc = loc || global.location || {};\\n\\n          var finaldestination = {},\\n              type = typeof loc,\\n              key;\\n\\n          if ('blob:' === loc.protocol) {\\n            finaldestination = new URL(unescape(loc.pathname), {});\\n          } else if ('string' === type) {\\n            finaldestination = new URL(loc, {});\\n            for (key in ignore) delete finaldestination[key];\\n          } else if ('object' === type) {\\n            for (key in loc) {\\n              if (key in ignore) continue;\\n              finaldestination[key] = loc[key];\\n            }\\n\\n            if (finaldestination.slashes === undefined) {\\n              finaldestination.slashes = slashes.test(loc.href);\\n            }\\n          }\\n\\n          return finaldestination;\\n        }\\n\\n        /**\\r\\n         * @typedef ProtocolExtract\\r\\n         * @type Object\\r\\n         * @property {String} protocol Protocol matched in the URL, in lowercase.\\r\\n         * @property {Boolean} slashes `true` if protocol is followed by \\\"//\\\", else `false`.\\r\\n         * @property {String} rest Rest of the URL that is not part of the protocol.\\r\\n         */\\n\\n        /**\\r\\n         * Extract protocol information from a URL with/without double slash (\\\"//\\\").\\r\\n         *\\r\\n         * @param {String} address URL we want to extract from.\\r\\n         * @return {ProtocolExtract} Extracted information.\\r\\n         * @api private\\r\\n         */\\n        function extractProtocol(address) {\\n          var match = protocolre.exec(address);\\n\\n          return {\\n            protocol: match[1] ? match[1].toLowerCase() : '',\\n            slashes: !!match[2],\\n            rest: match[3]\\n          };\\n        }\\n\\n        /**\\r\\n         * Resolve a relative URL pathname against a base URL pathname.\\r\\n         *\\r\\n         * @param {String} relative Pathname of the relative URL.\\r\\n         * @param {String} base Pathname of the base URL.\\r\\n         * @return {String} Resolved pathname.\\r\\n         * @api private\\r\\n         */\\n        function resolve(relative, base) {\\n          var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),\\n              i = path.length,\\n              last = path[i - 1],\\n              unshift = false,\\n              up = 0;\\n\\n          while (i--) {\\n            if (path[i] === '.') {\\n              path.splice(i, 1);\\n            } else if (path[i] === '..') {\\n              path.splice(i, 1);\\n              up++;\\n            } else if (up) {\\n              if (i === 0) unshift = true;\\n              path.splice(i, 1);\\n              up--;\\n            }\\n          }\\n\\n          if (unshift) path.unshift('');\\n          if (last === '.' || last === '..') path.push('');\\n\\n          return path.join('/');\\n        }\\n\\n        /**\\r\\n         * The actual URL instance. Instead of returning an object we've opted-in to\\r\\n         * create an actual constructor as it's much more memory efficient and\\r\\n         * faster and it pleases my OCD.\\r\\n         *\\r\\n         * @constructor\\r\\n         * @param {String} address URL we want to parse.\\r\\n         * @param {Object|String} location Location defaults for relative paths.\\r\\n         * @param {Boolean|Function} parser Parser for the query string.\\r\\n         * @api public\\r\\n         */\\n        function URL(address, location, parser) {\\n          if (!(this instanceof URL)) {\\n            return new URL(address, location, parser);\\n          }\\n\\n          var relative,\\n              extracted,\\n              parse,\\n              instruction,\\n              index,\\n              key,\\n              instructions = rules.slice(),\\n              type = typeof location,\\n              url = this,\\n              i = 0;\\n\\n          //\\n          // The following if statements allows this module two have compatibility with\\n          // 2 different API:\\n          //\\n          // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\\n          //    where the boolean indicates that the query string should also be parsed.\\n          //\\n          // 2. The `URL` interface of the browser which accepts a URL, object as\\n          //    arguments. The supplied object will be used as default values / fall-back\\n          //    for relative paths.\\n          //\\n          if ('object' !== type && 'string' !== type) {\\n            parser = location;\\n            location = null;\\n          }\\n\\n          if (parser && 'function' !== typeof parser) parser = qs.parse;\\n\\n          location = lolcation(location);\\n\\n          //\\n          // Extract protocol information before running the instructions.\\n          //\\n          extracted = extractProtocol(address || '');\\n          relative = !extracted.protocol && !extracted.slashes;\\n          url.slashes = extracted.slashes || relative && location.slashes;\\n          url.protocol = extracted.protocol || location.protocol || '';\\n          address = extracted.rest;\\n\\n          //\\n          // When the authority component is absent the URL starts with a path\\n          // component.\\n          //\\n          if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\\n\\n          for (; i < instructions.length; i++) {\\n            instruction = instructions[i];\\n            parse = instruction[0];\\n            key = instruction[1];\\n\\n            if (parse !== parse) {\\n              url[key] = address;\\n            } else if ('string' === typeof parse) {\\n              if (~(index = address.indexOf(parse))) {\\n                if ('number' === typeof instruction[2]) {\\n                  url[key] = address.slice(0, index);\\n                  address = address.slice(index + instruction[2]);\\n                } else {\\n                  url[key] = address.slice(index);\\n                  address = address.slice(0, index);\\n                }\\n              }\\n            } else if (index = parse.exec(address)) {\\n              url[key] = index[1];\\n              address = address.slice(0, index.index);\\n            }\\n\\n            url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : '');\\n\\n            //\\n            // Hostname, host and protocol should be lowercased so they can be used to\\n            // create a proper `origin`.\\n            //\\n            if (instruction[4]) url[key] = url[key].toLowerCase();\\n          }\\n\\n          //\\n          // Also parse the supplied query string in to an object. If we're supplied\\n          // with a custom parser as function use that instead of the default build-in\\n          // parser.\\n          //\\n          if (parser) url.query = parser(url.query);\\n\\n          //\\n          // If the URL is relative, resolve the pathname against the base URL.\\n          //\\n          if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {\\n            url.pathname = resolve(url.pathname, location.pathname);\\n          }\\n\\n          //\\n          // We should not add port numbers if they are already the default port number\\n          // for a given protocol. As the host also contains the port number we're going\\n          // override it with the hostname which contains no port number.\\n          //\\n          if (!required(url.port, url.protocol)) {\\n            url.host = url.hostname;\\n            url.port = '';\\n          }\\n\\n          //\\n          // Parse down the `auth` for the username and password.\\n          //\\n          url.username = url.password = '';\\n          if (url.auth) {\\n            instruction = url.auth.split(':');\\n            url.username = instruction[0] || '';\\n            url.password = instruction[1] || '';\\n          }\\n\\n          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';\\n\\n          //\\n          // The href is just the compiled result.\\n          //\\n          url.href = url.toString();\\n        }\\n\\n        /**\\r\\n         * This is convenience method for changing properties in the URL instance to\\r\\n         * insure that they all propagate correctly.\\r\\n         *\\r\\n         * @param {String} part          Property we need to adjust.\\r\\n         * @param {Mixed} value          The newly assigned value.\\r\\n         * @param {Boolean|Function} fn  When setting the query, it will be the function\\r\\n         *                               used to parse the query.\\r\\n         *                               When setting the protocol, double slash will be\\r\\n         *                               removed from the final url if it is true.\\r\\n         * @returns {URL}\\r\\n         * @api public\\r\\n         */\\n        function set(part, value, fn) {\\n          var url = this;\\n\\n          switch (part) {\\n            case 'query':\\n              if ('string' === typeof value && value.length) {\\n                value = (fn || qs.parse)(value);\\n              }\\n\\n              url[part] = value;\\n              break;\\n\\n            case 'port':\\n              url[part] = value;\\n\\n              if (!required(value, url.protocol)) {\\n                url.host = url.hostname;\\n                url[part] = '';\\n              } else if (value) {\\n                url.host = url.hostname + ':' + value;\\n              }\\n\\n              break;\\n\\n            case 'hostname':\\n              url[part] = value;\\n\\n              if (url.port) value += ':' + url.port;\\n              url.host = value;\\n              break;\\n\\n            case 'host':\\n              url[part] = value;\\n\\n              if (/:\\\\d+$/.test(value)) {\\n                value = value.split(':');\\n                url.port = value.pop();\\n                url.hostname = value.join(':');\\n              } else {\\n                url.hostname = value;\\n                url.port = '';\\n              }\\n\\n              break;\\n\\n            case 'protocol':\\n              url.protocol = value.toLowerCase();\\n              url.slashes = !fn;\\n              break;\\n\\n            case 'pathname':\\n            case 'hash':\\n              if (value) {\\n                var char = part === 'pathname' ? '/' : '#';\\n                url[part] = value.charAt(0) !== char ? char + value : value;\\n              } else {\\n                url[part] = value;\\n              }\\n              break;\\n\\n            default:\\n              url[part] = value;\\n          }\\n\\n          for (var i = 0; i < rules.length; i++) {\\n            var ins = rules[i];\\n\\n            if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\\n          }\\n\\n          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';\\n\\n          url.href = url.toString();\\n\\n          return url;\\n        }\\n\\n        /**\\r\\n         * Transform the properties back in to a valid and full URL string.\\r\\n         *\\r\\n         * @param {Function} stringify Optional query stringify function.\\r\\n         * @returns {String}\\r\\n         * @api public\\r\\n         */\\n        function toString(stringify) {\\n          if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\\n\\n          var query,\\n              url = this,\\n              protocol = url.protocol;\\n\\n          if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\\n\\n          var result = protocol + (url.slashes ? '//' : '');\\n\\n          if (url.username) {\\n            result += url.username;\\n            if (url.password) result += ':' + url.password;\\n            result += '@';\\n          }\\n\\n          result += url.host + url.pathname;\\n\\n          query = 'object' === typeof url.query ? stringify(url.query) : url.query;\\n          if (query) result += '?' !== query.charAt(0) ? '?' + query : query;\\n\\n          if (url.hash) result += url.hash;\\n\\n          return result;\\n        }\\n\\n        URL.prototype = { set: set, toString: toString };\\n\\n        //\\n        // Expose the URL parser and some additional properties that might be useful for\\n        // others or testing.\\n        //\\n        URL.extractProtocol = extractProtocol;\\n        URL.location = lolcation;\\n        URL.qs = qs;\\n\\n        module.exports = URL;\\n      }).call(this, typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {});\\n    }, { \\\"querystringify\\\": 59, \\\"requires-port\\\": 60 }] }, {}, [1])(1);\\n});\\n\\n//# sourceMappingURL=sockjs.js.map\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///15\\n\")},function(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\n// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)\\n// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).\\n\\nvar ansiHTML = __webpack_require__(17);\\nvar Entities = __webpack_require__(18).AllHtmlEntities;\\n\\nvar entities = new Entities();\\n\\nvar colors = {\\n  reset: ['transparent', 'transparent'],\\n  black: '181818',\\n  red: 'E36049',\\n  green: 'B3CB74',\\n  yellow: 'FFD080',\\n  blue: '7CAFC2',\\n  magenta: '7FACCA',\\n  cyan: 'C3C2EF',\\n  lightgrey: 'EBE7E3',\\n  darkgrey: '6D7891'\\n};\\nansiHTML.setColors(colors);\\n\\nfunction createOverlayIframe(onIframeLoad) {\\n  var iframe = document.createElement('iframe');\\n  iframe.id = 'webpack-dev-server-client-overlay';\\n  iframe.src = 'about:blank';\\n  iframe.style.position = 'fixed';\\n  iframe.style.left = 0;\\n  iframe.style.top = 0;\\n  iframe.style.right = 0;\\n  iframe.style.bottom = 0;\\n  iframe.style.width = '100vw';\\n  iframe.style.height = '100vh';\\n  iframe.style.border = 'none';\\n  iframe.style.zIndex = 9999999999;\\n  iframe.onload = onIframeLoad;\\n  return iframe;\\n}\\n\\nfunction addOverlayDivTo(iframe) {\\n  var div = iframe.contentDocument.createElement('div');\\n  div.id = 'webpack-dev-server-client-overlay-div';\\n  div.style.position = 'fixed';\\n  div.style.boxSizing = 'border-box';\\n  div.style.left = 0;\\n  div.style.top = 0;\\n  div.style.right = 0;\\n  div.style.bottom = 0;\\n  div.style.width = '100vw';\\n  div.style.height = '100vh';\\n  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';\\n  div.style.color = '#E8E8E8';\\n  div.style.fontFamily = 'Menlo, Consolas, monospace';\\n  div.style.fontSize = 'large';\\n  div.style.padding = '2rem';\\n  div.style.lineHeight = '1.2';\\n  div.style.whiteSpace = 'pre-wrap';\\n  div.style.overflow = 'auto';\\n  iframe.contentDocument.body.appendChild(div);\\n  return div;\\n}\\n\\nvar overlayIframe = null;\\nvar overlayDiv = null;\\nvar lastOnOverlayDivReady = null;\\n\\nfunction ensureOverlayDivExists(onOverlayDivReady) {\\n  if (overlayDiv) {\\n    // Everything is ready, call the callback right away.\\n    onOverlayDivReady(overlayDiv);\\n    return;\\n  }\\n\\n  // Creating an iframe may be asynchronous so we'll schedule the callback.\\n  // In case of multiple calls, last callback wins.\\n  lastOnOverlayDivReady = onOverlayDivReady;\\n\\n  if (overlayIframe) {\\n    // We're already creating it.\\n    return;\\n  }\\n\\n  // Create iframe and, when it is ready, a div inside it.\\n  overlayIframe = createOverlayIframe(function () {\\n    overlayDiv = addOverlayDivTo(overlayIframe);\\n    // Now we can talk!\\n    lastOnOverlayDivReady(overlayDiv);\\n  });\\n\\n  // Zalgo alert: onIframeLoad() will be called either synchronously\\n  // or asynchronously depending on the browser.\\n  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.\\n  document.body.appendChild(overlayIframe);\\n}\\n\\nfunction showMessageOverlay(message) {\\n  ensureOverlayDivExists(function (div) {\\n    // Make it look similar to our terminal.\\n    div.innerHTML = '<span style=\\\"color: #' + colors.red + '\\\">Failed to compile.</span><br><br>' + ansiHTML(entities.encode(message));\\n  });\\n}\\n\\nfunction destroyErrorOverlay() {\\n  if (!overlayDiv) {\\n    // It is not there in the first place.\\n    return;\\n  }\\n\\n  // Clean up and reset internal state.\\n  document.body.removeChild(overlayIframe);\\n  overlayDiv = null;\\n  overlayIframe = null;\\n  lastOnOverlayDivReady = null;\\n}\\n\\n// Successful compilation.\\nexports.clear = function handleSuccess() {\\n  destroyErrorOverlay();\\n};\\n\\n// Compilation with errors (e.g. syntax error or missing modules).\\nexports.showMessage = function handleMessage(messages) {\\n  showMessageOverlay(messages[0]);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///16\\n\")},function(module,exports){eval(\"throw new Error(\\\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\\\nError: ENOENT: no such file or directory, open 'C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\ansi-html\\\\\\\\index.js'\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxNy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///17\\n\")},function(module,exports){eval(\"throw new Error(\\\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\\\nError: ENOENT: no such file or directory, open 'C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\html-entities\\\\\\\\index.js'\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///18\\n\")},,,function(module,exports,__webpack_require__){eval('var map = {\\n\\t\"./log\": 22\\n};\\n\\n\\nfunction webpackContext(req) {\\n\\tvar id = webpackContextResolve(req);\\n\\treturn __webpack_require__(id);\\n}\\nfunction webpackContextResolve(req) {\\n\\tvar id = map[req];\\n\\tif(!(id + 1)) { // check for number or string\\n\\t\\tvar e = new Error(\"Cannot find module \\'\" + req + \"\\'\");\\n\\t\\te.code = \\'MODULE_NOT_FOUND\\';\\n\\t\\tthrow e;\\n\\t}\\n\\treturn id;\\n}\\nwebpackContext.keys = function webpackContextKeys() {\\n\\treturn Object.keys(map);\\n};\\nwebpackContext.resolve = webpackContextResolve;\\nmodule.exports = webpackContext;\\nwebpackContext.id = 21;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2hvdCBzeW5jIG5vbnJlY3Vyc2l2ZSBeXFwuXFwvbG9nJD8xYzNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9sb2dcIjogMjJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIHsgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIGlkO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDIxOyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///21\\n')},function(module,exports){eval('var logLevel = \"info\";\\n\\nfunction dummy() {}\\n\\nfunction shouldLog(level) {\\n\\tvar shouldLog = logLevel === \"info\" && level === \"info\" || [\"info\", \"warning\"].indexOf(logLevel) >= 0 && level === \"warning\" || [\"info\", \"warning\", \"error\"].indexOf(logLevel) >= 0 && level === \"error\";\\n\\treturn shouldLog;\\n}\\n\\nfunction logGroup(logFn) {\\n\\treturn function (level, msg) {\\n\\t\\tif (shouldLog(level)) {\\n\\t\\t\\tlogFn(msg);\\n\\t\\t}\\n\\t};\\n}\\n\\nmodule.exports = function (level, msg) {\\n\\tif (shouldLog(level)) {\\n\\t\\tif (level === \"info\") {\\n\\t\\t\\tconsole.log(msg);\\n\\t\\t} else if (level === \"warning\") {\\n\\t\\t\\tconsole.warn(msg);\\n\\t\\t} else if (level === \"error\") {\\n\\t\\t\\tconsole.error(msg);\\n\\t\\t}\\n\\t}\\n};\\n\\n/* eslint-disable node/no-unsupported-features/node-builtins */\\nvar group = console.group || dummy;\\nvar groupCollapsed = console.groupCollapsed || dummy;\\nvar groupEnd = console.groupEnd || dummy;\\n/* eslint-enable node/no-unsupported-features/node-builtins */\\n\\nmodule.exports.group = logGroup(group);\\n\\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\\n\\nmodule.exports.groupEnd = logGroup(groupEnd);\\n\\nmodule.exports.setLogLevel = function (level) {\\n\\tlogLevel = level;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2hvdC9sb2cuanM/MWFmZCJdLCJuYW1lcyI6WyJsb2dMZXZlbCIsImR1bW15Iiwic2hvdWxkTG9nIiwibGV2ZWwiLCJpbmRleE9mIiwibG9nR3JvdXAiLCJsb2dGbiIsIm1zZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zb2xlIiwibG9nIiwid2FybiIsImVycm9yIiwiZ3JvdXAiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwic2V0TG9nTGV2ZWwiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFdBQVcsTUFBZjs7QUFFQSxTQUFTQyxLQUFULEdBQWlCLENBQUU7O0FBRW5CLFNBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQ3pCLEtBQUlELFlBQ0ZGLGFBQWEsTUFBYixJQUF1QkcsVUFBVSxNQUFsQyxJQUNDLENBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0JDLE9BQXBCLENBQTRCSixRQUE1QixLQUF5QyxDQUF6QyxJQUE4Q0csVUFBVSxTQUR6RCxJQUVDLENBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0IsT0FBcEIsRUFBNkJDLE9BQTdCLENBQXFDSixRQUFyQyxLQUFrRCxDQUFsRCxJQUF1REcsVUFBVSxPQUhuRTtBQUlBLFFBQU9ELFNBQVA7QUFDQTs7QUFFRCxTQUFTRyxRQUFULENBQWtCQyxLQUFsQixFQUF5QjtBQUN4QixRQUFPLFVBQVNILEtBQVQsRUFBZ0JJLEdBQWhCLEVBQXFCO0FBQzNCLE1BQUlMLFVBQVVDLEtBQVYsQ0FBSixFQUFzQjtBQUNyQkcsU0FBTUMsR0FBTjtBQUNBO0FBQ0QsRUFKRDtBQUtBOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCLFVBQVNOLEtBQVQsRUFBZ0JJLEdBQWhCLEVBQXFCO0FBQ3JDLEtBQUlMLFVBQVVDLEtBQVYsQ0FBSixFQUFzQjtBQUNyQixNQUFJQSxVQUFVLE1BQWQsRUFBc0I7QUFDckJPLFdBQVFDLEdBQVIsQ0FBWUosR0FBWjtBQUNBLEdBRkQsTUFFTyxJQUFJSixVQUFVLFNBQWQsRUFBeUI7QUFDL0JPLFdBQVFFLElBQVIsQ0FBYUwsR0FBYjtBQUNBLEdBRk0sTUFFQSxJQUFJSixVQUFVLE9BQWQsRUFBdUI7QUFDN0JPLFdBQVFHLEtBQVIsQ0FBY04sR0FBZDtBQUNBO0FBQ0Q7QUFDRCxDQVZEOztBQVlBO0FBQ0EsSUFBSU8sUUFBUUosUUFBUUksS0FBUixJQUFpQmIsS0FBN0I7QUFDQSxJQUFJYyxpQkFBaUJMLFFBQVFLLGNBQVIsSUFBMEJkLEtBQS9DO0FBQ0EsSUFBSWUsV0FBV04sUUFBUU0sUUFBUixJQUFvQmYsS0FBbkM7QUFDQTs7QUFFQU8sT0FBT0MsT0FBUCxDQUFlSyxLQUFmLEdBQXVCVCxTQUFTUyxLQUFULENBQXZCOztBQUVBTixPQUFPQyxPQUFQLENBQWVNLGNBQWYsR0FBZ0NWLFNBQVNVLGNBQVQsQ0FBaEM7O0FBRUFQLE9BQU9DLE9BQVAsQ0FBZU8sUUFBZixHQUEwQlgsU0FBU1csUUFBVCxDQUExQjs7QUFFQVIsT0FBT0MsT0FBUCxDQUFlUSxXQUFmLEdBQTZCLFVBQVNkLEtBQVQsRUFBZ0I7QUFDNUNILFlBQVdHLEtBQVg7QUFDQSxDQUZEIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGxvZ0xldmVsID0gXCJpbmZvXCI7XHJcblxyXG5mdW5jdGlvbiBkdW1teSgpIHt9XHJcblxyXG5mdW5jdGlvbiBzaG91bGRMb2cobGV2ZWwpIHtcclxuXHR2YXIgc2hvdWxkTG9nID1cclxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxyXG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwid2FybmluZ1wiKSB8fFxyXG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCIsIFwiZXJyb3JcIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gXCJlcnJvclwiKTtcclxuXHRyZXR1cm4gc2hvdWxkTG9nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xyXG5cdHJldHVybiBmdW5jdGlvbihsZXZlbCwgbXNnKSB7XHJcblx0XHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xyXG5cdFx0XHRsb2dGbihtc2cpO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGV2ZWwsIG1zZykge1xyXG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XHJcblx0XHRpZiAobGV2ZWwgPT09IFwiaW5mb1wiKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XHJcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xyXG5cdFx0XHRjb25zb2xlLndhcm4obXNnKTtcclxuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXHJcbnZhciBncm91cCA9IGNvbnNvbGUuZ3JvdXAgfHwgZHVtbXk7XHJcbnZhciBncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgfHwgZHVtbXk7XHJcbnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7XHJcbi8qIGVzbGludC1lbmFibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzLmdyb3VwQ29sbGFwc2VkID0gbG9nR3JvdXAoZ3JvdXBDb2xsYXBzZWQpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uKGxldmVsKSB7XHJcblx0bG9nTGV2ZWwgPSBsZXZlbDtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///22\\n')},function(module,exports,__webpack_require__){eval(\"var EventEmitter = __webpack_require__(24);\\nmodule.exports = new EventEmitter();//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2hvdC9lbWl0dGVyLmpzP2E2YmQiXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDLEVBQVIsQ0FBbkI7QUFDQUMsT0FBT0MsT0FBUCxHQUFpQixJQUFJSCxZQUFKLEVBQWpCIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJldmVudHNcIik7XHJcbm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///23\\n\")},function(module,exports){eval(\"throw new Error(\\\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\\\nError: ENOENT: no such file or directory, open 'C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\events\\\\\\\\package.json'\\\\n    at Object.fs.openSync (fs.js:646:18)\\\\n    at Object.fs.readFileSync (fs.js:551:33)\\\\n    at ConfigChainBuilder.addConfig (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:146:32)\\\\n    at ConfigChainBuilder.findConfigs (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:102:30)\\\\n    at buildConfigChain (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\build-config-chain.js:61:13)\\\\n    at OptionManager.init (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\options\\\\\\\\option-manager.js:354:58)\\\\n    at File.initOptions (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\index.js:212:65)\\\\n    at new File (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\file\\\\\\\\index.js:135:24)\\\\n    at Pipeline.transform (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-core\\\\\\\\lib\\\\\\\\transformation\\\\\\\\pipeline.js:46:16)\\\\n    at transpile (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-loader\\\\\\\\lib\\\\\\\\index.js:50:20)\\\\n    at Object.module.exports (C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\babel-loader\\\\\\\\lib\\\\\\\\index.js:173:20)\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyNC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///24\\n\")},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _index_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);\\n/* harmony import */ var _index_html__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_index_html__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _css_style_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);\\n/* harmony import */ var _css_style_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_style_scss__WEBPACK_IMPORTED_MODULE_1__);\\n//import $ from \\\"jquery\\\";\\n\\n\\n//import \\\"./index.html\\\";/// ?????????????\\n\\n//$(function () {\\n//    $('.test').html('jqueryTest');\\n//});\\n\\nlet b = 8;\\nconsole.log(b);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJiIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQyxJQUFJQSxJQUFHLENBQVA7QUFDQUMsUUFBUUMsR0FBUixDQUFZRixDQUFaIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XHJcbmltcG9ydCBcIi4uL2luZGV4Lmh0bWxcIjtcclxuaW1wb3J0IFwiLi9jc3Mvc3R5bGUuc2Nzc1wiO1xyXG4vL2ltcG9ydCBcIi4vaW5kZXguaHRtbFwiOy8vLyA/Pz8/Pz8/Pz8/Pz8/XHJcblxyXG4vLyQoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAkKCcudGVzdCcpLmh0bWwoJ2pxdWVyeVRlc3QnKTtcclxuLy99KTtcclxuXHJcblx0bGV0IGIgPTg7XHJcblx0Y29uc29sZS5sb2coYik7XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///25\\n\")},function(module,exports){eval('module.exports = \"<!DOCTYPE html>\\\\r\\\\n<html>\\\\r\\\\n<head>\\\\r\\\\n    <meta charset=\\\\\"UTF-8\\\\\">\\\\r\\\\n    <title>webpack</title>\\\\r\\\\n    <script src=\\\\\"dist/main.js\\\\\"><\\/script>\\\\r\\\\n</head>\\\\r\\\\n<body>\\\\r\\\\n   <h1 class=\\\\\"test\\\\\"></h1>\\\\r\\\\n   <div class=\\\\\"sass\\\\\">Sass <span class=\\\\\"span\\\\\">test</span></div>\\\\r\\\\n</body>\\\\r\\\\n</html>\";//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9pbmRleC5odG1sPzBjNjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPCFET0NUWVBFIGh0bWw+XFxyXFxuPGh0bWw+XFxyXFxuPGhlYWQ+XFxyXFxuICAgIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIj5cXHJcXG4gICAgPHRpdGxlPndlYnBhY2s8L3RpdGxlPlxcclxcbiAgICA8c2NyaXB0IHNyYz1cXFwiZGlzdC9tYWluLmpzXFxcIj48L3NjcmlwdD5cXHJcXG48L2hlYWQ+XFxyXFxuPGJvZHk+XFxyXFxuICAgPGgxIGNsYXNzPVxcXCJ0ZXN0XFxcIj48L2gxPlxcclxcbiAgIDxkaXYgY2xhc3M9XFxcInNhc3NcXFwiPlNhc3MgPHNwYW4gY2xhc3M9XFxcInNwYW5cXFwiPnRlc3Q8L3NwYW4+PC9kaXY+XFxyXFxuPC9ib2R5PlxcclxcbjwvaHRtbD5cIjsiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///26\\n')},function(module,exports,__webpack_require__){eval(\"\\nvar content = __webpack_require__(28);\\n\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n\\nvar transform;\\nvar insertInto;\\n\\n\\n\\nvar options = {\\\"hmr\\\":true}\\n\\noptions.transform = transform\\noptions.insertInto = undefined;\\n\\nvar update = __webpack_require__(30)(content, options);\\n\\nif(content.locals) module.exports = content.locals;\\n\\nif(false) {}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3N0eWxlLnNjc3M/ZjdiZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQW9HOztBQUUxSCw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsRUFBbUQ7O0FBRXhFOztBQUVBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///27\\n\")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(29)(false);\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \".sass {\\\\n  color: blue; }\\\\n  .sass .span {\\\\n    color: red; }\\\\n\", \"\"]);\\n\\n// exports\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3N0eWxlLnNjc3M/Yzk3YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxFQUErQztBQUNsRjs7O0FBR0E7QUFDQSxjQUFjLFFBQVMsVUFBVSxnQkFBZ0IsRUFBRSxpQkFBaUIsaUJBQWlCLEVBQUU7O0FBRXZGIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2FzcyB7XFxuICBjb2xvcjogYmx1ZTsgfVxcbiAgLnNhc3MgLnNwYW4ge1xcbiAgICBjb2xvcjogcmVkOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///28\\n')},function(module,exports){eval(\"throw new Error(\\\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\\\nError: ENOENT: no such file or directory, open 'C:\\\\\\\\Users\\\\\\\\DENN_\\\\\\\\OneDrive\\\\\\\\Документы\\\\\\\\GitHub\\\\\\\\JavaScript2\\\\\\\\Dz-7\\\\\\\\node_modules\\\\\\\\css-loader\\\\\\\\lib\\\\\\\\css-base.js'\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyOS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///29\\n\")},function(module,exports,__webpack_require__){eval('/*\\r\\n\\tMIT License http://www.opensource.org/licenses/mit-license.php\\r\\n\\tAuthor Tobias Koppers @sokra\\r\\n*/\\r\\n\\r\\nvar stylesInDom = {};\\r\\n\\r\\nvar\\tmemoize = function (fn) {\\r\\n\\tvar memo;\\r\\n\\r\\n\\treturn function () {\\r\\n\\t\\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\\r\\n\\t\\treturn memo;\\r\\n\\t};\\r\\n};\\r\\n\\r\\nvar isOldIE = memoize(function () {\\r\\n\\t// Test for IE <= 9 as proposed by Browserhacks\\r\\n\\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\r\\n\\t// Tests for existence of standard globals is to allow style-loader\\r\\n\\t// to operate correctly into non-standard environments\\r\\n\\t// @see https://github.com/webpack-contrib/style-loader/issues/177\\r\\n\\treturn window && document && document.all && !window.atob;\\r\\n});\\r\\n\\r\\nvar getTarget = function (target, parent) {\\r\\n  if (parent){\\r\\n    return parent.querySelector(target);\\r\\n  }\\r\\n  return document.querySelector(target);\\r\\n};\\r\\n\\r\\nvar getElement = (function (fn) {\\r\\n\\tvar memo = {};\\r\\n\\r\\n\\treturn function(target, parent) {\\r\\n                // If passing function in options, then use it for resolve \"head\" element.\\r\\n                // Useful for Shadow Root style i.e\\r\\n                // {\\r\\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\\r\\n                // }\\r\\n                if (typeof target === \\'function\\') {\\r\\n                        return target();\\r\\n                }\\r\\n                if (typeof memo[target] === \"undefined\") {\\r\\n\\t\\t\\tvar styleTarget = getTarget.call(this, target, parent);\\r\\n\\t\\t\\t// Special case to return head of iframe instead of iframe itself\\r\\n\\t\\t\\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\t// This will throw an exception if access to iframe is blocked\\r\\n\\t\\t\\t\\t\\t// due to cross-origin restrictions\\r\\n\\t\\t\\t\\t\\tstyleTarget = styleTarget.contentDocument.head;\\r\\n\\t\\t\\t\\t} catch(e) {\\r\\n\\t\\t\\t\\t\\tstyleTarget = null;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tmemo[target] = styleTarget;\\r\\n\\t\\t}\\r\\n\\t\\treturn memo[target]\\r\\n\\t};\\r\\n})();\\r\\n\\r\\nvar singleton = null;\\r\\nvar\\tsingletonCounter = 0;\\r\\nvar\\tstylesInsertedAtTop = [];\\r\\n\\r\\nvar\\tfixUrls = __webpack_require__(31);\\r\\n\\r\\nmodule.exports = function(list, options) {\\r\\n\\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\\r\\n\\t\\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\\r\\n\\t}\\r\\n\\r\\n\\toptions = options || {};\\r\\n\\r\\n\\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\\r\\n\\r\\n\\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\\r\\n\\t// tags it will allow on a page\\r\\n\\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\\r\\n\\r\\n\\t// By default, add <style> tags to the <head> element\\r\\n        if (!options.insertInto) options.insertInto = \"head\";\\r\\n\\r\\n\\t// By default, add <style> tags to the bottom of the target\\r\\n\\tif (!options.insertAt) options.insertAt = \"bottom\";\\r\\n\\r\\n\\tvar styles = listToStyles(list, options);\\r\\n\\r\\n\\taddStylesToDom(styles, options);\\r\\n\\r\\n\\treturn function update (newList) {\\r\\n\\t\\tvar mayRemove = [];\\r\\n\\r\\n\\t\\tfor (var i = 0; i < styles.length; i++) {\\r\\n\\t\\t\\tvar item = styles[i];\\r\\n\\t\\t\\tvar domStyle = stylesInDom[item.id];\\r\\n\\r\\n\\t\\t\\tdomStyle.refs--;\\r\\n\\t\\t\\tmayRemove.push(domStyle);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif(newList) {\\r\\n\\t\\t\\tvar newStyles = listToStyles(newList, options);\\r\\n\\t\\t\\taddStylesToDom(newStyles, options);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (var i = 0; i < mayRemove.length; i++) {\\r\\n\\t\\t\\tvar domStyle = mayRemove[i];\\r\\n\\r\\n\\t\\t\\tif(domStyle.refs === 0) {\\r\\n\\t\\t\\t\\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\\r\\n\\r\\n\\t\\t\\t\\tdelete stylesInDom[domStyle.id];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n};\\r\\n\\r\\nfunction addStylesToDom (styles, options) {\\r\\n\\tfor (var i = 0; i < styles.length; i++) {\\r\\n\\t\\tvar item = styles[i];\\r\\n\\t\\tvar domStyle = stylesInDom[item.id];\\r\\n\\r\\n\\t\\tif(domStyle) {\\r\\n\\t\\t\\tdomStyle.refs++;\\r\\n\\r\\n\\t\\t\\tfor(var j = 0; j < domStyle.parts.length; j++) {\\r\\n\\t\\t\\t\\tdomStyle.parts[j](item.parts[j]);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor(; j < item.parts.length; j++) {\\r\\n\\t\\t\\t\\tdomStyle.parts.push(addStyle(item.parts[j], options));\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tvar parts = [];\\r\\n\\r\\n\\t\\t\\tfor(var j = 0; j < item.parts.length; j++) {\\r\\n\\t\\t\\t\\tparts.push(addStyle(item.parts[j], options));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction listToStyles (list, options) {\\r\\n\\tvar styles = [];\\r\\n\\tvar newStyles = {};\\r\\n\\r\\n\\tfor (var i = 0; i < list.length; i++) {\\r\\n\\t\\tvar item = list[i];\\r\\n\\t\\tvar id = options.base ? item[0] + options.base : item[0];\\r\\n\\t\\tvar css = item[1];\\r\\n\\t\\tvar media = item[2];\\r\\n\\t\\tvar sourceMap = item[3];\\r\\n\\t\\tvar part = {css: css, media: media, sourceMap: sourceMap};\\r\\n\\r\\n\\t\\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\\r\\n\\t\\telse newStyles[id].parts.push(part);\\r\\n\\t}\\r\\n\\r\\n\\treturn styles;\\r\\n}\\r\\n\\r\\nfunction insertStyleElement (options, style) {\\r\\n\\tvar target = getElement(options.insertInto)\\r\\n\\r\\n\\tif (!target) {\\r\\n\\t\\tthrow new Error(\"Couldn\\'t find a style target. This probably means that the value for the \\'insertInto\\' parameter is invalid.\");\\r\\n\\t}\\r\\n\\r\\n\\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\\r\\n\\r\\n\\tif (options.insertAt === \"top\") {\\r\\n\\t\\tif (!lastStyleElementInsertedAtTop) {\\r\\n\\t\\t\\ttarget.insertBefore(style, target.firstChild);\\r\\n\\t\\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\\r\\n\\t\\t\\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttarget.appendChild(style);\\r\\n\\t\\t}\\r\\n\\t\\tstylesInsertedAtTop.push(style);\\r\\n\\t} else if (options.insertAt === \"bottom\") {\\r\\n\\t\\ttarget.appendChild(style);\\r\\n\\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\\r\\n\\t\\tvar nextSibling = getElement(options.insertAt.before, target);\\r\\n\\t\\ttarget.insertBefore(style, nextSibling);\\r\\n\\t} else {\\r\\n\\t\\tthrow new Error(\"[Style Loader]\\\\n\\\\n Invalid value for parameter \\'insertAt\\' (\\'options.insertAt\\') found.\\\\n Must be \\'top\\', \\'bottom\\', or Object.\\\\n (https://github.com/webpack-contrib/style-loader#insertat)\\\\n\");\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction removeStyleElement (style) {\\r\\n\\tif (style.parentNode === null) return false;\\r\\n\\tstyle.parentNode.removeChild(style);\\r\\n\\r\\n\\tvar idx = stylesInsertedAtTop.indexOf(style);\\r\\n\\tif(idx >= 0) {\\r\\n\\t\\tstylesInsertedAtTop.splice(idx, 1);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction createStyleElement (options) {\\r\\n\\tvar style = document.createElement(\"style\");\\r\\n\\r\\n\\tif(options.attrs.type === undefined) {\\r\\n\\t\\toptions.attrs.type = \"text/css\";\\r\\n\\t}\\r\\n\\r\\n\\tif(options.attrs.nonce === undefined) {\\r\\n\\t\\tvar nonce = getNonce();\\r\\n\\t\\tif (nonce) {\\r\\n\\t\\t\\toptions.attrs.nonce = nonce;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\taddAttrs(style, options.attrs);\\r\\n\\tinsertStyleElement(options, style);\\r\\n\\r\\n\\treturn style;\\r\\n}\\r\\n\\r\\nfunction createLinkElement (options) {\\r\\n\\tvar link = document.createElement(\"link\");\\r\\n\\r\\n\\tif(options.attrs.type === undefined) {\\r\\n\\t\\toptions.attrs.type = \"text/css\";\\r\\n\\t}\\r\\n\\toptions.attrs.rel = \"stylesheet\";\\r\\n\\r\\n\\taddAttrs(link, options.attrs);\\r\\n\\tinsertStyleElement(options, link);\\r\\n\\r\\n\\treturn link;\\r\\n}\\r\\n\\r\\nfunction addAttrs (el, attrs) {\\r\\n\\tObject.keys(attrs).forEach(function (key) {\\r\\n\\t\\tel.setAttribute(key, attrs[key]);\\r\\n\\t});\\r\\n}\\r\\n\\r\\nfunction getNonce() {\\r\\n\\tif (false) {}\\r\\n\\r\\n\\treturn __webpack_require__.nc;\\r\\n}\\r\\n\\r\\nfunction addStyle (obj, options) {\\r\\n\\tvar style, update, remove, result;\\r\\n\\r\\n\\t// If a transform function was defined, run it on the css\\r\\n\\tif (options.transform && obj.css) {\\r\\n\\t    result = typeof options.transform === \\'function\\'\\r\\n\\t\\t ? options.transform(obj.css) \\r\\n\\t\\t : options.transform.default(obj.css);\\r\\n\\r\\n\\t    if (result) {\\r\\n\\t    \\t// If transform returns a value, use that instead of the original css.\\r\\n\\t    \\t// This allows running runtime transformations on the css.\\r\\n\\t    \\tobj.css = result;\\r\\n\\t    } else {\\r\\n\\t    \\t// If the transform function returns a falsy value, don\\'t add this css.\\r\\n\\t    \\t// This allows conditional loading of css\\r\\n\\t    \\treturn function() {\\r\\n\\t    \\t\\t// noop\\r\\n\\t    \\t};\\r\\n\\t    }\\r\\n\\t}\\r\\n\\r\\n\\tif (options.singleton) {\\r\\n\\t\\tvar styleIndex = singletonCounter++;\\r\\n\\r\\n\\t\\tstyle = singleton || (singleton = createStyleElement(options));\\r\\n\\r\\n\\t\\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\\r\\n\\t\\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\\r\\n\\r\\n\\t} else if (\\r\\n\\t\\tobj.sourceMap &&\\r\\n\\t\\ttypeof URL === \"function\" &&\\r\\n\\t\\ttypeof URL.createObjectURL === \"function\" &&\\r\\n\\t\\ttypeof URL.revokeObjectURL === \"function\" &&\\r\\n\\t\\ttypeof Blob === \"function\" &&\\r\\n\\t\\ttypeof btoa === \"function\"\\r\\n\\t) {\\r\\n\\t\\tstyle = createLinkElement(options);\\r\\n\\t\\tupdate = updateLink.bind(null, style, options);\\r\\n\\t\\tremove = function () {\\r\\n\\t\\t\\tremoveStyleElement(style);\\r\\n\\r\\n\\t\\t\\tif(style.href) URL.revokeObjectURL(style.href);\\r\\n\\t\\t};\\r\\n\\t} else {\\r\\n\\t\\tstyle = createStyleElement(options);\\r\\n\\t\\tupdate = applyToTag.bind(null, style);\\r\\n\\t\\tremove = function () {\\r\\n\\t\\t\\tremoveStyleElement(style);\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\n\\tupdate(obj);\\r\\n\\r\\n\\treturn function updateStyle (newObj) {\\r\\n\\t\\tif (newObj) {\\r\\n\\t\\t\\tif (\\r\\n\\t\\t\\t\\tnewObj.css === obj.css &&\\r\\n\\t\\t\\t\\tnewObj.media === obj.media &&\\r\\n\\t\\t\\t\\tnewObj.sourceMap === obj.sourceMap\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tupdate(obj = newObj);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tremove();\\r\\n\\t\\t}\\r\\n\\t};\\r\\n}\\r\\n\\r\\nvar replaceText = (function () {\\r\\n\\tvar textStore = [];\\r\\n\\r\\n\\treturn function (index, replacement) {\\r\\n\\t\\ttextStore[index] = replacement;\\r\\n\\r\\n\\t\\treturn textStore.filter(Boolean).join(\\'\\\\n\\');\\r\\n\\t};\\r\\n})();\\r\\n\\r\\nfunction applyToSingletonTag (style, index, remove, obj) {\\r\\n\\tvar css = remove ? \"\" : obj.css;\\r\\n\\r\\n\\tif (style.styleSheet) {\\r\\n\\t\\tstyle.styleSheet.cssText = replaceText(index, css);\\r\\n\\t} else {\\r\\n\\t\\tvar cssNode = document.createTextNode(css);\\r\\n\\t\\tvar childNodes = style.childNodes;\\r\\n\\r\\n\\t\\tif (childNodes[index]) style.removeChild(childNodes[index]);\\r\\n\\r\\n\\t\\tif (childNodes.length) {\\r\\n\\t\\t\\tstyle.insertBefore(cssNode, childNodes[index]);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tstyle.appendChild(cssNode);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction applyToTag (style, obj) {\\r\\n\\tvar css = obj.css;\\r\\n\\tvar media = obj.media;\\r\\n\\r\\n\\tif(media) {\\r\\n\\t\\tstyle.setAttribute(\"media\", media)\\r\\n\\t}\\r\\n\\r\\n\\tif(style.styleSheet) {\\r\\n\\t\\tstyle.styleSheet.cssText = css;\\r\\n\\t} else {\\r\\n\\t\\twhile(style.firstChild) {\\r\\n\\t\\t\\tstyle.removeChild(style.firstChild);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tstyle.appendChild(document.createTextNode(css));\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction updateLink (link, options, obj) {\\r\\n\\tvar css = obj.css;\\r\\n\\tvar sourceMap = obj.sourceMap;\\r\\n\\r\\n\\t/*\\r\\n\\t\\tIf convertToAbsoluteUrls isn\\'t defined, but sourcemaps are enabled\\r\\n\\t\\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\\r\\n\\t\\ton by default.  Otherwise default to the convertToAbsoluteUrls option\\r\\n\\t\\tdirectly\\r\\n\\t*/\\r\\n\\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\\r\\n\\r\\n\\tif (options.convertToAbsoluteUrls || autoFixUrls) {\\r\\n\\t\\tcss = fixUrls(css);\\r\\n\\t}\\r\\n\\r\\n\\tif (sourceMap) {\\r\\n\\t\\t// http://stackoverflow.com/a/26603875\\r\\n\\t\\tcss += \"\\\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\\r\\n\\t}\\r\\n\\r\\n\\tvar blob = new Blob([css], { type: \"text/css\" });\\r\\n\\r\\n\\tvar oldSrc = link.href;\\r\\n\\r\\n\\tlink.href = URL.createObjectURL(blob);\\r\\n\\r\\n\\tif(oldSrc) URL.revokeObjectURL(oldSrc);\\r\\n}\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///30\\n')},function(module,exports){eval('\\n/**\\r\\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\\r\\n * embed the css on the page. This breaks all relative urls because now they are relative to a\\r\\n * bundle instead of the current page.\\r\\n *\\r\\n * One solution is to only use full urls, but that may be impossible.\\r\\n *\\r\\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\\r\\n *\\r\\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\\r\\n *\\r\\n */\\n\\nmodule.exports = function (css) {\\n\\t// get current location\\n\\tvar location = typeof window !== \"undefined\" && window.location;\\n\\n\\tif (!location) {\\n\\t\\tthrow new Error(\"fixUrls requires window.location\");\\n\\t}\\n\\n\\t// blank or null?\\n\\tif (!css || typeof css !== \"string\") {\\n\\t\\treturn css;\\n\\t}\\n\\n\\tvar baseUrl = location.protocol + \"//\" + location.host;\\n\\tvar currentDir = baseUrl + location.pathname.replace(/\\\\/[^\\\\/]*$/, \"/\");\\n\\n\\t// convert each url(...)\\n\\t/*\\r\\n This regular expression is just a way to recursively match brackets within\\r\\n a string.\\r\\n \\n  /url\\\\s*\\\\(  = Match on the word \"url\" with any whitespace after it and then a parens\\r\\n    (  = Start a capturing group\\r\\n      (?:  = Start a non-capturing group\\r\\n          [^)(]  = Match anything that isn\\'t a parentheses\\r\\n          |  = OR\\r\\n          \\\\(  = Match a start parentheses\\r\\n              (?:  = Start another non-capturing groups\\r\\n                  [^)(]+  = Match anything that isn\\'t a parentheses\\r\\n                  |  = OR\\r\\n                  \\\\(  = Match a start parentheses\\r\\n                      [^)(]*  = Match anything that isn\\'t a parentheses\\r\\n                  \\\\)  = Match a end parentheses\\r\\n              )  = End Group\\r\\n              *\\\\) = Match anything and then a close parens\\r\\n          )  = Close non-capturing group\\r\\n          *  = Match anything\\r\\n       )  = Close capturing group\\r\\n  \\\\)  = Match a close parens\\r\\n \\n  /gi  = Get all matches, not the first.  Be case insensitive.\\r\\n  */\\n\\tvar fixedCss = css.replace(/url\\\\s*\\\\(((?:[^)(]|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*)\\\\)/gi, function (fullMatch, origUrl) {\\n\\t\\t// strip quotes (if they exist)\\n\\t\\tvar unquotedOrigUrl = origUrl.trim().replace(/^\"(.*)\"$/, function (o, $1) {\\n\\t\\t\\treturn $1;\\n\\t\\t}).replace(/^\\'(.*)\\'$/, function (o, $1) {\\n\\t\\t\\treturn $1;\\n\\t\\t});\\n\\n\\t\\t// already a full url? no change\\n\\t\\tif (/^(#|data:|http:\\\\/\\\\/|https:\\\\/\\\\/|file:\\\\/\\\\/\\\\/|\\\\s*$)/i.test(unquotedOrigUrl)) {\\n\\t\\t\\treturn fullMatch;\\n\\t\\t}\\n\\n\\t\\t// convert the url to a full url\\n\\t\\tvar newUrl;\\n\\n\\t\\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\\n\\t\\t\\t//TODO: should we add protocol?\\n\\t\\t\\tnewUrl = unquotedOrigUrl;\\n\\t\\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\\n\\t\\t\\t// path should be relative to the base url\\n\\t\\t\\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with \\'/\\'\\n\\t\\t} else {\\n\\t\\t\\t// path should be relative to current directory\\n\\t\\t\\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\\\.\\\\//, \"\"); // Strip leading \\'./\\'\\n\\t\\t}\\n\\n\\t\\t// send back the fixed url(...)\\n\\t\\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\\n\\t});\\n\\n\\t// send back the fixed css\\n\\treturn fixedCss;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzP2Y2ZDMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNzcyIsImxvY2F0aW9uIiwid2luZG93IiwiRXJyb3IiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZpeGVkQ3NzIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCJvIiwiJDEiLCJ0ZXN0IiwibmV3VXJsIiwiaW5kZXhPZiIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7Ozs7Ozs7OztBQWFBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUM5QjtBQUNBLEtBQUlDLFdBQVcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsT0FBT0QsUUFBdkQ7O0FBRUEsS0FBSSxDQUFDQSxRQUFMLEVBQWU7QUFDYixRQUFNLElBQUlFLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0Q7O0FBRUY7QUFDQSxLQUFJLENBQUNILEdBQUQsSUFBUSxPQUFPQSxHQUFQLEtBQWUsUUFBM0IsRUFBcUM7QUFDbkMsU0FBT0EsR0FBUDtBQUNBOztBQUVELEtBQUlJLFVBQVVILFNBQVNJLFFBQVQsR0FBb0IsSUFBcEIsR0FBMkJKLFNBQVNLLElBQWxEO0FBQ0EsS0FBSUMsYUFBYUgsVUFBVUgsU0FBU08sUUFBVCxDQUFrQkMsT0FBbEIsQ0FBMEIsV0FBMUIsRUFBdUMsR0FBdkMsQ0FBM0I7O0FBRUQ7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxLQUFJQyxXQUFXVixJQUFJUyxPQUFKLENBQVkscURBQVosRUFBbUUsVUFBU0UsU0FBVCxFQUFvQkMsT0FBcEIsRUFBNkI7QUFDOUc7QUFDQSxNQUFJQyxrQkFBa0JELFFBQ3BCRSxJQURvQixHQUVwQkwsT0FGb0IsQ0FFWixVQUZZLEVBRUEsVUFBU00sQ0FBVCxFQUFZQyxFQUFaLEVBQWU7QUFBRSxVQUFPQSxFQUFQO0FBQVksR0FGN0IsRUFHcEJQLE9BSG9CLENBR1osVUFIWSxFQUdBLFVBQVNNLENBQVQsRUFBWUMsRUFBWixFQUFlO0FBQUUsVUFBT0EsRUFBUDtBQUFZLEdBSDdCLENBQXRCOztBQUtBO0FBQ0EsTUFBSSxvREFBb0RDLElBQXBELENBQXlESixlQUF6RCxDQUFKLEVBQStFO0FBQzdFLFVBQU9GLFNBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUlPLE1BQUo7O0FBRUEsTUFBSUwsZ0JBQWdCTSxPQUFoQixDQUF3QixJQUF4QixNQUFrQyxDQUF0QyxFQUF5QztBQUN0QztBQUNGRCxZQUFTTCxlQUFUO0FBQ0EsR0FIRCxNQUdPLElBQUlBLGdCQUFnQk0sT0FBaEIsQ0FBd0IsR0FBeEIsTUFBaUMsQ0FBckMsRUFBd0M7QUFDOUM7QUFDQUQsWUFBU2QsVUFBVVMsZUFBbkIsQ0FGOEMsQ0FFVjtBQUNwQyxHQUhNLE1BR0E7QUFDTjtBQUNBSyxZQUFTWCxhQUFhTSxnQkFBZ0JKLE9BQWhCLENBQXdCLE9BQXhCLEVBQWlDLEVBQWpDLENBQXRCLENBRk0sQ0FFc0Q7QUFDNUQ7O0FBRUQ7QUFDQSxTQUFPLFNBQVNXLEtBQUtDLFNBQUwsQ0FBZUgsTUFBZixDQUFULEdBQWtDLEdBQXpDO0FBQ0EsRUE1QmMsQ0FBZjs7QUE4QkE7QUFDQSxRQUFPUixRQUFQO0FBQ0EsQ0ExRUQiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXHJcbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcclxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cclxuICpcclxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXHJcbiAqXHJcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxyXG4gKlxyXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cclxuICpcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcclxuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxyXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xyXG5cclxuICBpZiAoIWxvY2F0aW9uKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcclxuICB9XHJcblxyXG5cdC8vIGJsYW5rIG9yIG51bGw/XHJcblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xyXG5cdCAgcmV0dXJuIGNzcztcclxuICB9XHJcblxyXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xyXG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xyXG5cclxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcclxuXHQvKlxyXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXHJcblx0YSBzdHJpbmcuXHJcblxyXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcclxuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXHJcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXHJcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXHJcblx0ICAgICAgICAgfCAgPSBPUlxyXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXHJcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXHJcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXHJcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXHJcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xyXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcclxuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xyXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxyXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xyXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXHJcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXHJcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxyXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcclxuXHJcblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxyXG5cdCAqL1xyXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XHJcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXHJcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxyXG5cdFx0XHQudHJpbSgpXHJcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXHJcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcclxuXHJcblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxyXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xyXG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXHJcblx0XHR2YXIgbmV3VXJsO1xyXG5cclxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XHJcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xyXG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XHJcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xyXG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcclxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XHJcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXHJcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XHJcblx0fSk7XHJcblxyXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXHJcblx0cmV0dXJuIGZpeGVkQ3NzO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///31\\n')}]);","extractedComments":[]}